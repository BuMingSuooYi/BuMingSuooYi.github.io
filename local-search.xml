<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS布局</title>
    <link href="/2023/04/19/CSS%E5%B8%83%E5%B1%80/"/>
    <url>/2023/04/19/CSS%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="HTML-基础标签和属性"><a href="#HTML-基础标签和属性" class="headerlink" title="HTML 基础标签和属性"></a>HTML 基础标签和属性</h4><blockquote><h5 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h5><p>&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;body&gt;</p><p>&lt;div&gt;块级、&lt;p&gt;段落、&lt;h1~h6&gt;标题、&lt;a&gt;链接、&lt;img&gt;图片&lt;ul&gt;无序列表&lt;ol&gt;有序列表</p><h5 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h5><p>id：给元素设置一个唯一的id标识符</p><p>class：给元素添加css类名，用于控制样式</p><p>style：直接给元素设置样式（内联样式）</p><p>src：设置超链接或媒体文件的源地址</p><p>alt：为图像添加替代文本，当图像无法显示时会显示该文本</p><p>title：为元素添加标题，鼠标悬停在元素上会弹出该标题</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客美化</title>
    <link href="/2023/04/17/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    <url>/2023/04/17/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="Hexo主题基本结构"><a href="#Hexo主题基本结构" class="headerlink" title="Hexo主题基本结构"></a>Hexo主题基本结构</h4><blockquote><p>.<br>├── _config.yml  主题的配置文件<br>├── languages语言文件夹<br>├── layout    布局文件<br>├── scripts脚本文件启动时<br>└── source资源源文件</p><p>其中layout：</p><p>layout.ejs   - 使用 EJS<br>layout.swig  - 使用 Swig</p><p>其中source：</p><p>  CSS、JavaScript 文件等。文件或文件夹开头名称为 _（下划线）或隐藏的文件会被忽略。 </p></blockquote><h4 id="source-资源文件夹"><a href="#source-资源文件夹" class="headerlink" title="source 资源文件夹"></a>source 资源文件夹</h4>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程与进程</title>
    <link href="/2023/04/17/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    <url>/2023/04/17/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>进程和线程</p><p>线程的实现</p><p>线程的状态</p><p>线程的常用方法</p><p>线程的优先级</p><p>同步和死锁</p></blockquote><blockquote><h4 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h4><p>线程：是单独按顺序运行的控制流；</p><p>进程：执行中的程序；</p><p>一个进程最少包含一个线程，可以包含多个线程</p></blockquote><blockquote><h4 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h4><ol><li><p>继承Thread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个构造函数，接受线程编号作为参数，并将该编号保存在实例变量 threadNum 中。重写 run() 方法，在其中使用循环打印线程编号和计数器的值。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threadNum;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(<span class="hljs-type">int</span> threadNum)</span> &#123;<br>        <span class="hljs-built_in">this</span>.threadNum = threadNum;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Thread &quot;</span> + threadNum + <span class="hljs-string">&quot;: &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-number">2</span>);<br>        <br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现Runnable接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个构造函数，接受线程编号作为参数，并将该编号保存在实例变量 threadNum 中。实现 run() 方法，在其中使用循环打印线程编号和计数器的值。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threadNum;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable</span><span class="hljs-params">(<span class="hljs-type">int</span> threadNum)</span> &#123;<br>        <span class="hljs-built_in">this</span>.threadNum = threadNum;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Thread &quot;</span> + threadNum + <span class="hljs-string">&quot;: &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">2</span>));<br>        <br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></blockquote><blockquote><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><h6 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h6><ol><li>创建状态：创建好了一个单&#x2F;多线程的对象</li><li>就绪状态：调用了star()方法，等待CPU调度（等待资源分配）</li><li>运行状态：执行run()方法</li><li>阻塞状态：暂停执行，可能将资源交给其它线程使用</li><li>终止状态（死亡状态）：线程销毁</li></ol><h5 id="官话解释"><a href="#官话解释" class="headerlink" title="官话解释"></a>官话解释</h5><ol><li>New（创建）状态：当线程对象被创建但还没有开始执行时，它处于新状态。</li><li>Runnable（运行）状态：当线程正在运行或等待系统资源以执行时，它处于可运行状态。例如，当线程调用sleep()方法或等待I&#x2F;O操作完成时，它将进入可运行状态。</li><li>Blocked（阻塞）状态：当线程被阻止进一步执行时，它处于阻塞状态。这通常发生在等待获取synchronized锁或等待I&#x2F;O操作完成时。</li><li>Waiting（等待）状态：当线程无限期地等待另一个线程执行特定操作时，它处于等待状态。例如，当线程调用wait()方法时，它将进入等待状态。</li><li>Timed Waiting（计时等待）状态：当线程在有限时间内等待另一个线程执行特定操作时，它处于计时等待状态。例如，当线程调用Thread.sleep()方法，或者调用带超时参数的方法，如wait(long timeout)或join(long timeout)方法时，它将进入计时等待状态。</li><li>Terminated（终止）状态：当线程完成了它的任务并退出时，它处于终止状态。</li></ol></blockquote><blockquote><h4 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h4><ol><li>start()：启动线程，调用run()方法。</li><li>run()：线程执行体，在start()方法被调用后自动执行。</li><li>sleep()：使线程暂停执行指定的时间，以毫秒为单位。</li><li>join()：等待该线程结束，其他线程才能继续执行。</li><li>interrupt()：中断该线程，抛出InterruptedException异常。</li><li>isInterrupted()：判断该线程是否被中断。</li><li>wait()：使线程等待，直到其他线程唤醒它。</li><li>notify()：唤醒一个在wait()状态下的线程。</li><li>setPriority()：设置线程的优先级。</li><li>yield()：让出CPU执行权，给其他线程执行机会。</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>     <span class="hljs-comment">// 创建一个新线程</span><br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br><br>     <span class="hljs-comment">// 启动线程</span><br>     thread.start();<br><br>     <span class="hljs-comment">// 等待线程结束</span><br>     thread.join();<br><br>     <span class="hljs-comment">// 打印线程是否被中断</span><br>     System.out.println(<span class="hljs-string">&quot;Thread interrupted? &quot;</span> + thread.isInterrupted());<br><br>     <br>     <span class="hljs-comment">//设置线程优先级，线程的优先级请看下一节</span><br>    thread.setPriority(Thread.MAX_PRIORITY);<br><br>     <span class="hljs-comment">// 让出CPU执行权</span><br>     Thread.yield();<br><br>     <span class="hljs-comment">// 等待1秒钟</span><br>     Thread.sleep(<span class="hljs-number">1000L</span>);<br> &#125;<br><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">try</span> &#123;<br>             <span class="hljs-comment">// 使线程暂停执行500毫秒</span><br>             Thread.sleep(<span class="hljs-number">500L</span>);<br>         &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>             <span class="hljs-comment">// 处理异常</span><br>             e.printStackTrace();<br>         &#125;<br><br>         <span class="hljs-comment">// 唤醒在wait状态下的线程</span><br>         <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>             notify();<br>         &#125;<br>     &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><p>​     Java中的线程优先级用整数表示，范围从1到10，其中1是最低优先级，10是最高优先级。默认情况下，所有线程都具有相同的优先级为5。可以用thread.setPriority()方法设置优先级。</p><p>​     Thread.MIN_PRIORITY：表示线程的最低优先级。该常量的值为1。<br>​     Thread.NORM_PRIORITY：表示线程的普通优先级。该常量的值为5。<br>​     Thread.MAX_PRIORITY：表示线程的最高优先级。该常量的值为10。<br>​     *&#x2F;</p></blockquote><blockquote><h4 id="线程同步和死锁"><a href="#线程同步和死锁" class="headerlink" title="线程同步和死锁"></a>线程同步和死锁</h4><p>同步的概念： 多个线程访问共享资源时，保证它们的访问顺序和结果正确性的一种机制 </p><p>实现同步的手段：使用锁、信号量等 </p><p>Java提供实现同步的关键字synchronized，有以下用法</p><ol><li>修饰代码块：可以将<code>synchronized</code>关键字放置在一段代码块周围，以确保同一时间只有一个线程能够进入该代码块。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br> <span class="hljs-comment">// 这里的代码同一时间只能被一个线程执行</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>修饰方法：可以将<code>synchronized</code>关键字放在（静态）方法声明上，以确保同一时间只有一个线程能够执行该方法。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修饰方法</span><br><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">// 这里的代码同一时间只能被一个线程执行</span><br>&#125;<br><span class="hljs-comment">//修饰静态方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">// 这里的代码同一时间只能被一个线程执行</span><br>&#125;  <br></code></pre></td></tr></table></figure><p>一个使用线程的实际例子，所有售票窗口共享500张票，买完为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketSeller</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>         System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;售出第&quot;</span> + tickets-- + <span class="hljs-string">&quot;张票&quot;</span>);<br>     &#125;<br> &#125;<br><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>         sell();<br>     &#125;<br> &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">TicketSeller</span> <span class="hljs-variable">ticketSeller</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSeller</span>();<br><br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticketSeller);<br>     t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>     t1.start();<br><br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticketSeller);<br>     t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>     t2.start();<br><br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticketSeller);<br>     t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br>     t3.start();<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>死锁：两个或多个线程在执行过程中，因互相等待对方释放资源而陷入了无限等待的状态。</p><p>死锁发生需要满足的四个条件：</p><p>互斥（资源只能被一个进程占用）</p><p>占有并等待（已经占有资源的进程可以请求其他的资源）</p><p>不可抢占（资源不能被其他进程抢占）</p><p>循环等待（存在一个进程等待一个进程所持有的资源，而这个进程又在等待另一个进程所持有的资源）</p><p>避免死锁，从四个条件出发：</p><ol><li>打破互斥条件：例如采用读写锁而非独占锁，使得多个线程可以同时读取同一份数据。</li><li>打破占有并等待条件：例如采用资源预分配策略，即在申请资源之前就将所有需要的资源全部分配完毕。</li><li>打破不可抢占条件：例如引入超时机制，在等待一段时间后强制释放已经占有的资源。</li><li>打破循环等待条件：例如引入资源排序机制，规定所有线程必须按照同一套顺序申请资源，从而避免循环等待的情况。</li></ol></blockquote><blockquote><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p><img src="/..%5Cpostot%5C23-04-17-1.png" alt="1665027727152"></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运筹学-运输问题</title>
    <link href="/2022/11/22/Untitled/"/>
    <url>/2022/11/22/Untitled/</url>
    
    <content type="html"><![CDATA[<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% N=[ 3 6 2 6</span><br><span class="hljs-comment">%     5 3 6 4 </span><br><span class="hljs-comment">% 9 7 7 8];</span><br><span class="hljs-comment">% in=[40 45 55 60];</span><br><span class="hljs-comment">% out=[55 70 75];</span><br><br><span class="hljs-comment">%N:运价表   out:每个产地产量(按行输入)   in:每个销地销量(按行输入)</span><br><span class="hljs-comment">%x:最优运输方案</span><br>in=input(<span class="hljs-string">&#x27;请输入每个销地销量（按行输入）：&#x27;</span>);<br>out=input(<span class="hljs-string">&#x27;请输入每个产地产量（按行输入）：&#x27;</span>);<br>N = input(<span class="hljs-string">&#x27;请输入运价表（矩阵）：&#x27;</span>);<br><br><br>sum_out=sum(out);<br>sum_in=sum(in);<br><br><span class="hljs-keyword">if</span> sum_out&gt;sum_in          <span class="hljs-comment">%产大于销的情况，转换为产销平衡问题</span><br>    [old_row,old_col]=<span class="hljs-built_in">size</span>(N);<br>    new=<span class="hljs-built_in">zeros</span>(old_row,<span class="hljs-number">1</span>);<br>    N=[N,new];<br>    in=[in,sum_out-sum_in];<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&quot;该问题产大于销,方案最后一列为虚拟销地&quot;</span>)<br><span class="hljs-keyword">elseif</span> sum_in&gt;sum_out     <span class="hljs-comment">%销大于产的情况，转换为产销平衡问题</span><br>    [old_row1,old_col1]=<span class="hljs-built_in">size</span>(N);<br>    new1=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,old_col1);<br>    N=[N;new1];<br>    out=[out,sum_in-sum_out];<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&quot;该问题销大于产,方案最后一行为虚拟产地&quot;</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&quot;该问题为产销平衡问题&quot;</span>)<br><span class="hljs-keyword">end</span><br><br>[row,col]=<span class="hljs-built_in">size</span>(N);<br>sigma=<span class="hljs-built_in">zeros</span>(row,col);<span class="hljs-comment">%定义检验数表</span><br>x=-<span class="hljs-built_in">ones</span>(row,col);<span class="hljs-comment">%定义初始运输表</span><br>ui=<span class="hljs-built_in">zeros</span>(row,<span class="hljs-number">1</span>);<span class="hljs-comment">%定义ui</span><br>vj=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,col);<span class="hljs-comment">%定义vj</span><br>out1=out;    <span class="hljs-comment">%求初始方案的运算过程的产量out1</span><br>in1=in;       <span class="hljs-comment">%求初始方案的运算过程的销量in1</span><br><br><span class="hljs-comment">%求初始方案(西北角法)</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>        <span class="hljs-keyword">if</span> out1(<span class="hljs-built_in">i</span>)==<span class="hljs-number">0</span><br>            out1(<span class="hljs-built_in">i</span>)=<span class="hljs-number">-1</span>;<span class="hljs-comment">%若该产地产量为0，则置为-1，即划掉该行</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">if</span> in1(<span class="hljs-built_in">j</span>)==<span class="hljs-number">0</span><br>            in1(<span class="hljs-built_in">j</span>)=<span class="hljs-number">-1</span>; <span class="hljs-comment">%若该销地销量为0，则置为-1，即划掉该列</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">if</span> out1(<span class="hljs-built_in">i</span>)&gt;<span class="hljs-number">0</span>&amp;&amp;in1(<span class="hljs-built_in">j</span>)&gt;<span class="hljs-number">0</span><br>          <span class="hljs-keyword">if</span> out1(<span class="hljs-built_in">i</span>)&gt;in1(<span class="hljs-built_in">j</span>)        <br>            x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=in1(<span class="hljs-built_in">j</span>);           <span class="hljs-comment">%若产量大于销量，则该销地销量填入方案</span><br>            out1(<span class="hljs-built_in">i</span>)=out1(<span class="hljs-built_in">i</span>)-x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>);  <span class="hljs-comment">%该产地剩余的产量</span><br>            in1(<span class="hljs-built_in">j</span>)=in1(<span class="hljs-built_in">j</span>)-x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>);    <span class="hljs-comment">%该销地剩余的销量</span><br>          <span class="hljs-keyword">else</span>                       <br>            x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=out1(<span class="hljs-built_in">i</span>);          <span class="hljs-comment">%若销量大于产量，则直接将产地产量填入方案</span><br>            in1(<span class="hljs-built_in">j</span>)=in1(<span class="hljs-built_in">j</span>)-x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>);    <span class="hljs-comment">%该产地剩余的产量</span><br>            out1(<span class="hljs-built_in">i</span>)=out1(<span class="hljs-built_in">i</span>)-x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>);   <span class="hljs-comment">%该销地剩余的销量</span><br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%迭代过程</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span><br><span class="hljs-comment">%求检验数(位势法)</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>:row  <span class="hljs-comment">%初始化ui，除了第一个元素为0，其他所有ui元素变为inf</span><br>    ui(<span class="hljs-built_in">i</span>)=<span class="hljs-built_in">inf</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:col  <span class="hljs-comment">%初始化vj,所有vj元素变为inf</span><br>   vj(<span class="hljs-built_in">i</span>)=<span class="hljs-built_in">inf</span>; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>    <span class="hljs-comment">%求ui,vj</span><br>    checku=<span class="hljs-built_in">find</span>(ui==<span class="hljs-built_in">inf</span>);<br>    checkv=<span class="hljs-built_in">find</span>(vj==<span class="hljs-built_in">inf</span>);<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(checku)&amp;&amp;<span class="hljs-built_in">isempty</span>(checkv)  <span class="hljs-comment">%当ui,vj都不为inf时,ui和vj计算完成,跳出循环</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>       <span class="hljs-keyword">if</span> x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)~=<span class="hljs-number">-1</span><br>          <span class="hljs-keyword">if</span> ui(<span class="hljs-built_in">i</span>)==<span class="hljs-built_in">inf</span>&amp;&amp;vj(<span class="hljs-built_in">j</span>)==<span class="hljs-built_in">inf</span><span class="hljs-comment">%若ui,vj全为inf,则先跳过计算</span><br>              <span class="hljs-keyword">continue</span>;<br>          <span class="hljs-keyword">elseif</span> vj(<span class="hljs-built_in">j</span>)==<span class="hljs-built_in">inf</span><br>             vj(<span class="hljs-built_in">j</span>)=N(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-ui(<span class="hljs-built_in">i</span>);<span class="hljs-comment">%若vj为inf,ui不为inf,计算vj</span><br>          <span class="hljs-keyword">else</span><br>              ui(<span class="hljs-built_in">i</span>)=N(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-vj(<span class="hljs-built_in">j</span>);<span class="hljs-comment">%若ui为inf,vj不为inf,计算ui</span><br>          <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>    <br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row  <span class="hljs-comment">%初始化检验数表，所有元素变为inf</span><br>   <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>      sigma(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-built_in">inf</span>; <br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row  <span class="hljs-comment">%计算检验数表</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>        <span class="hljs-keyword">if</span> x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)==<span class="hljs-number">-1</span><br>            sigma(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=N(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-ui(<span class="hljs-built_in">i</span>)-vj(<span class="hljs-built_in">j</span>);          <br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">%判断是否得到最优方案</span><br><span class="hljs-keyword">if</span> sigma&gt;<span class="hljs-number">0</span>   <br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&quot;有唯一最优方案,最优方案为(表中-1表示空格):&quot;</span>)<br>    x<br>    sum_min=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row   <span class="hljs-comment">%计算最小运价</span><br>       <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>           <span class="hljs-keyword">if</span> x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)~=<span class="hljs-number">-1</span><br>              sum_min=sum_min+x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)*N(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>);<br>           <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&quot;最小运价为：&quot;</span>)<br>    sum_min<br>     <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">elseif</span> sigma&gt;=<span class="hljs-number">0</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&quot;最优方案不唯一,其中一个为(表中-1表示空格):&quot;</span>)<br>     x<br>     sum_min=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row  <span class="hljs-comment">%计算最小运价</span><br>       <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>          <span class="hljs-keyword">if</span> x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)~=<span class="hljs-number">-1</span><br>              sum_min=sum_min+x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)*N(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>);<br>          <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&quot;最小运价为：&quot;</span>)<br>    sum_min<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%闭回路调整法</span><br>visit=x;    <br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row        <span class="hljs-comment">%初始化访问表,可以被访问的点标为0</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>        <span class="hljs-keyword">if</span> visit(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)~=<span class="hljs-number">-1</span><br>            visit(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>m=<span class="hljs-built_in">min</span>(sigma(sigma&lt;<span class="hljs-number">0</span>));<span class="hljs-comment">%找到小于零的最小检验数m</span><br>[r2,c2]=<span class="hljs-built_in">find</span>(sigma==m);<span class="hljs-comment">%找到m的位置</span><br><br><span class="hljs-comment">%记录m的行标和列标,由于可能出现检验数相同的情况,我们取其中第一个</span><br>r=r2(<span class="hljs-number">1</span>);<br>c=c2(<span class="hljs-number">1</span>);<br>r1=r2(<span class="hljs-number">1</span>);          <br>c1=c2(<span class="hljs-number">1</span>); <br><br>visit(r,c)=<span class="hljs-number">2</span>;  <span class="hljs-comment">%标记m已被访问,记为2   </span><br>circle=-<span class="hljs-built_in">ones</span>(row+col+<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);  <span class="hljs-comment">%定义闭回路路径表</span><br><span class="hljs-comment">%circle表的结构:[行标  列标  运量]</span><br><br><span class="hljs-comment">%将起点(m点)填入路径表</span><br>circle(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=r1;<br>circle(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)=c1;<br>p=<span class="hljs-number">2</span>;<br><br><span class="hljs-comment">%找闭回路</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>  <br>   <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row         <span class="hljs-comment">%找第c列中有无未被访问的点</span><br>      <span class="hljs-keyword">if</span> visit(<span class="hljs-built_in">i</span>,c)==<span class="hljs-number">0</span>  <span class="hljs-comment">%若该点未被访问,则访问该点,进行标记并存入路径表</span><br>         visit(<span class="hljs-built_in">i</span>,c)=<span class="hljs-number">1</span>;<br>         r=<span class="hljs-built_in">i</span>;           <span class="hljs-comment">%记录该点行标</span><br>         circle(p,<span class="hljs-number">1</span>)=<span class="hljs-built_in">i</span>; <br>         circle(p,<span class="hljs-number">2</span>)=c;<br>         circle(p,<span class="hljs-number">3</span>)=x(<span class="hljs-built_in">i</span>,c);<br>         p=p+<span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">end</span><br>   <br>   <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col         <span class="hljs-comment">%找第r行中有无未被访问的点</span><br>      <span class="hljs-keyword">if</span> visit(r,<span class="hljs-built_in">j</span>)==<span class="hljs-number">0</span> <span class="hljs-comment">%若该点未被访问,则访问该点,进行标记并存入路径表</span><br>         visit(r,<span class="hljs-built_in">j</span>)=<span class="hljs-number">1</span>;<br>         c=<span class="hljs-built_in">j</span>;          <span class="hljs-comment">%记录该点列标</span><br>         circle(p,<span class="hljs-number">1</span>)=r;<br>         circle(p,<span class="hljs-number">2</span>)=<span class="hljs-built_in">j</span>;<br>         circle(p,<span class="hljs-number">3</span>)=x(r,<span class="hljs-built_in">j</span>);<br>         p=p+<span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">end</span><br>   <br>   a=<span class="hljs-built_in">find</span>(visit(r,:)==<span class="hljs-number">0</span>);<br>   b=<span class="hljs-built_in">find</span>(visit(:,c)==<span class="hljs-number">0</span>);<br>   a1=<span class="hljs-built_in">find</span>(visit(r,:)==<span class="hljs-number">2</span>);<br>   b1=<span class="hljs-built_in">find</span>(visit(:,c)==<span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(a)&amp;&amp;<span class="hljs-built_in">isempty</span>(b)  <span class="hljs-comment">%判断该点所在行和列中有无未被访问的点</span><br>       <span class="hljs-keyword">if</span> ~<span class="hljs-built_in">isempty</span>(a1)||~<span class="hljs-built_in">isempty</span>(b1)  <span class="hljs-comment">%判断最后访问点是否与起始点在同一行或同一列，若是则跳出循环，找到闭回路</span><br>           <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">else</span>           <span class="hljs-comment">%若不是,则将该点置为-1(此路不通,下次循环不走此路),重置访问表和路径表,开始下一次循环</span><br>           visit(r,c)=<span class="hljs-number">-1</span>;<br>           <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row<br>              <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:col<br>                  <span class="hljs-keyword">if</span> visit(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)==<span class="hljs-number">1</span><br>                     visit(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">end</span><br>              <span class="hljs-keyword">end</span><br>           <span class="hljs-keyword">end</span><br>       <br>      r=r1;<br>      c=c1;<br>    <br>      circle=-<span class="hljs-built_in">ones</span>(row+col,<span class="hljs-number">3</span>);<br>      circle(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=r1;<br>      circle(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)=c1;<br>       p=<span class="hljs-number">2</span>;<br>       <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">end</span>   <br><span class="hljs-keyword">end</span><br><br>[rows,cols]=<span class="hljs-built_in">size</span>(circle);<br><span class="hljs-comment">%定义circle表时我们给了足够大的维度,而由于闭回路可能无法包括所有点,现在要将多余行删去</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:rows   <br>    <span class="hljs-keyword">if</span> circle(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)==<span class="hljs-number">-1</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br>circle(<span class="hljs-built_in">i</span>:rows,:)=[];<br><span class="hljs-comment">%开始找闭回路中的顶点表</span><br>add=circle(<span class="hljs-number">1</span>,:);<br>circle=[circle;add];  <span class="hljs-comment">%将起始点填入circle表,形成完整的闭回路</span><br>[row1,col1]=<span class="hljs-built_in">size</span>(circle);<br><span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">%若闭回路中同一行或同一列中有两个以上的点,则删去中间点,只留下顶点</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>             <br>     <span class="hljs-keyword">if</span> <span class="hljs-built_in">i</span>==row1<span class="hljs-number">-1</span><br>       <span class="hljs-keyword">break</span>; <br>     <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (circle(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)==circle(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br>        circle(<span class="hljs-built_in">i</span>,:)=[];<br>        row1=row1<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (circle(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>,<span class="hljs-number">2</span>)==circle(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>        circle(<span class="hljs-built_in">i</span>,:)=[];<br>        row1=row1<span class="hljs-number">-1</span>; <br>        <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%由于起始点在闭回路中出现了两次,因此删去第二次出现的起始点</span><br>k=<span class="hljs-built_in">find</span>(circle(:,<span class="hljs-number">3</span>)==<span class="hljs-number">-1</span>);<br>circle(k(<span class="hljs-number">2</span>),:)=[];<br>[row2,col2]=<span class="hljs-built_in">size</span>(circle);<br><span class="hljs-comment">%将顶点中奇数编号和偶数编号分开</span><br><span class="hljs-comment">%顶点表的结构:[行标  列标  运量]</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">mod</span>(row2,<span class="hljs-number">2</span>)==<span class="hljs-number">0</span>    <span class="hljs-comment">%若顶点总数是偶数</span><br>    single=<span class="hljs-built_in">zeros</span>(row2/<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);  <span class="hljs-comment">%定义奇数编号顶点表</span><br>    double=<span class="hljs-built_in">zeros</span>(row2/<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);  <span class="hljs-comment">%定义偶数编号顶点表</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">mod</span>(row2,<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>    <span class="hljs-comment">%若顶点总数是奇数</span><br>   single=<span class="hljs-built_in">zeros</span>(row2/<span class="hljs-number">2</span>+<span class="hljs-number">0.5</span>,<span class="hljs-number">3</span>);   <span class="hljs-comment">%定义奇数编号顶点表</span><br>   double=<span class="hljs-built_in">zeros</span>(row2/<span class="hljs-number">2</span><span class="hljs-number">-0.5</span>,<span class="hljs-number">3</span>);   <span class="hljs-comment">%定义偶数编号顶点表</span><br><span class="hljs-keyword">end</span><br>j1=<span class="hljs-number">1</span>;<br>j2=<span class="hljs-number">1</span>;<br><span class="hljs-comment">%将闭回路中的点按编号分别存入奇数顶点表和偶数顶点表</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row2<br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">mod</span>(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>)==<span class="hljs-number">1</span><br>       single(j1,:)=circle(<span class="hljs-built_in">i</span>,:);<br>       j1=j1+<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">mod</span>(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>)==<span class="hljs-number">0</span><br>      double(j2,:)=circle(<span class="hljs-built_in">i</span>,:);<br>      j2=j2+<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%更新运量表</span><br>value=double(:,<span class="hljs-number">3</span>);<br>[min_x,index]=<span class="hljs-built_in">min</span>(value(value&gt;=<span class="hljs-number">0</span>));<span class="hljs-comment">%找到偶数顶点的运量最小值及其位置</span><br>x(r1,c1)=min_x;       <span class="hljs-comment">%把该运量最小值填入闭回路起始点的运量</span><br>x(double(index,<span class="hljs-number">1</span>),double(index,<span class="hljs-number">2</span>))=<span class="hljs-number">-1</span>;  <span class="hljs-comment">%把该偶数顶点的运量标记为-1</span><br>double(index,:)=[];    <span class="hljs-comment">%将该偶数顶点从偶数顶点表中删去,以免影响后续计算</span><br><br>[row3,col3]=<span class="hljs-built_in">size</span>(single);<br>[row4,col4]=<span class="hljs-built_in">size</span>(double);<br><span class="hljs-comment">%将奇数编号顶点的运量加上min_x</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>:row3<br>   x(single(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),single(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))=single(<span class="hljs-built_in">i</span>,<span class="hljs-number">3</span>)+min_x;<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%将偶数编号顶点的运量减去min_x</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:row4<br>    x(double(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),double(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))=double(<span class="hljs-built_in">i</span>,<span class="hljs-number">3</span>)-min_x;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>储存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SOCKET编程（比特流模拟）实验设计</title>
    <link href="/2022/11/20/SOCKET%E7%BC%96%E7%A8%8B%EF%BC%88%E6%AF%94%E7%89%B9%E6%B5%81%E6%A8%A1%E6%8B%9F%EF%BC%89%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/11/20/SOCKET%E7%BC%96%E7%A8%8B%EF%BC%88%E6%AF%94%E7%89%B9%E6%B5%81%E6%A8%A1%E6%8B%9F%EF%BC%89%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><strong>四、实验思路</strong></p><p><strong>（1）创建分享文件的过程</strong></p><p>实验使用四台电脑，其中一台电脑作为Tracker服务器，其它三台电脑作为同等peer。当某台peer主机拥有可分享的文件时，将BT种子（按可分享文件生成）、标识符（表示分享）以数据报套接字形式（对应UDP协议）发送给Tracker服务器，Tracker服务器记录分享文件的BT种子和分享的主机IP地址，形成BT种子与分享方主机IP的BT-IP映射表。</p><p><strong>（2）请求文件方获得分享文件方IP地址的过程</strong></p><p>当某台主机需要下载某文件时，以数据报套接字形式（对应UDP协议）不断给Tracker服务器发送BT种子和标识符（表示请求），直到收到响应。</p><p>Tracker服务器按照自己形成的BT-IP映射表按BT种子进行查找，并向请求方以数据报套接字形式（对应UDP协议）发送一定数量的分享方IP地址</p><p><strong>（3）请求方向分享方请求文件</strong></p><p>请求方按收到的分享方IP地址，按请求文件的大小和自己选择的分享方的数量形成不同的txt文件（自定义的.torrent文件），依次向自己选择的分享方IP发请求数据流套接字（对应TCP协议）连接并发送txt文件。</p><p><strong>（4）分享方向请求方传输文件</strong></p><p>分享方按接收到的txt文件向请求方传输指定的部分文件。</p><p><strong>（5）请求方将一次收到的文件局部按追加写，拼接为完整文件。</strong></p><p><strong>（6）至此，一次分享、请求文件和文件传输结束</strong></p><p><strong>五、实验细节</strong></p><p><strong>（1）定义BT种子生成</strong></p><p>BT种子为一个字符串，是文件的唯一标识，此处我们以文件名+文件大小（字节为单位）定义BT种子格式内容。</p><p><strong>（2）定义Tracker服务器</strong></p><p>1.默认所有电脑客户端已知Tracker服务器IP地址；</p><p>2.分享方可以向Tracker服务器发数据报套接字（对应UDP协议），内容包含分享文件的BT种子、标识符（表示分享）；</p><p>3.请求方可以向Tracker服务器发送数据报套接字（对应UDP协议）请求，内容包含请求文件的BT种子、标识符（表示请求），以获取所需文件分享方的IP地址；</p><p><strong>（3）自定义的txt文件</strong></p><p>作用：</p><p>通过自定义的类似.torrent文件的txt文本，确定请求的文件，负责发送的文件局部。</p><p>内容格式为：</p><p>请求文件的BT种子；请求文件起始字节处；请求文件的大小（字节为单位）；</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学着玩</title>
    <link href="/2022/11/12/Python%E5%AD%A6%E7%9D%80%E7%8E%A9/"/>
    <url>/2022/11/12/Python%E5%AD%A6%E7%9D%80%E7%8E%A9/</url>
    
    <content type="html"><![CDATA[<h5 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h5><blockquote><h6 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br></code></pre></td></tr></table></figure><h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#当行</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">多行</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h5><blockquote><h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><p> 转义、换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输出了几个字&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输出了几个字&#x27;</span>*<span class="hljs-number">5</span>)<br><span class="hljs-comment">#格式化字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d*%d=%2d&#x27;</span> %(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>),end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><h6 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">type</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></blockquote><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><blockquote><h6 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#平方</span><br><span class="hljs-number">2</span>**<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h6 id="判断、循环"><a href="#判断、循环" class="headerlink" title="判断、循环"></a>判断、循环</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt; <span class="hljs-number">2</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1小于2&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">1</span>==<span class="hljs-number">2</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1等于2&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>Print(<span class="hljs-string">&#x27;芜湖!&#x27;</span>)<br><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">10</span>:<br>    i+=<span class="hljs-number">1</span><br>    s+=i<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;i&#x27;</span>)<br><span class="hljs-comment">#等于</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>):<span class="hljs-comment">#起始，结束(不包含结束)，间距</span><br>    pring(<span class="hljs-string">&#x27;i&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">continue</span><span class="hljs-comment">#跳过3</span><br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">8</span>:<br>        <span class="hljs-keyword">break</span><span class="hljs-comment">#过8终结循环</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;i&#x27;</span>)<br><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java list的学习</title>
    <link href="/2022/11/10/Java%20List%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/10/Java%20List%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h6 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h6><blockquote><p>ArrayList是List的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p>上面一步我们创建了List对象list，但是list里面还是空，</p><p>不能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.set(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.add(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>，</p><p>，</p></blockquote><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><blockquote><p>.</p><p>提取TList列表中的a属性为一个list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;T&gt; TList=t;<br><span class="hljs-comment">//提取TList列表中的a属性为一个list</span><br>List&lt;Integer&gt; alist = TList.stream().map(T::geta).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><p>.</p><p>.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatisPlus queryWrapper</title>
    <link href="/2022/11/10/MyBatisPlus%20queryWrapper/"/>
    <url>/2022/11/10/MyBatisPlus%20queryWrapper/</url>
    
    <content type="html"><![CDATA[<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p><img src="/..%5Cpostot%5C22-11-10-1.png" alt="1665027727152"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库 myBatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统学习</title>
    <link href="/2022/10/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/10/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-4（前后端交互）</title>
    <link href="/2022/10/08/Vue+SpringBoot-4(%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92)/"/>
    <url>/2022/10/08/Vue+SpringBoot-4(%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92)/</url>
    
    <content type="html"><![CDATA[<h5 id="前端引入ajax"><a href="#前端引入ajax" class="headerlink" title="前端引入ajax"></a>前端引入ajax</h5><blockquote><h6 id="1-下载ajax"><a href="#1-下载ajax" class="headerlink" title="1.下载ajax"></a>1.下载ajax</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install axios -S<br></code></pre></td></tr></table></figure><h6 id="2-在main-js文件中全局引入ajax"><a href="#2-在main-js文件中全局引入ajax" class="headerlink" title="2.在main.js文件中全局引入ajax"></a>2.在main.js文件中全局引入ajax</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入axios,并将axios赋值给Vue的prototype的自定义格式参数$axios,</span><br><span class="hljs-comment">// 这样可以防止在 xx.vue文件中调用axios出现 axios未定义错误,</span><br><span class="hljs-comment">// 调用方法是在&lt;script&gt;中的export default&#123;&#125;的creat()&#123;&#125;函数中使用this.$axios,</span><br><span class="hljs-comment">// 其原理就是全局变量</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span> <span class="hljs-comment">// 从下载在项目中的axios引入,给当前main.js使用</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$axios</span> = axios <span class="hljs-comment">//设置全局变量的格式( Vue.prototype.$自定义变量名 = 值)</span><br></code></pre></td></tr></table></figure><p>3.在vue组件中调用ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:8081/afterend/test/queryAll&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>) &#123;<br>            <span class="hljs-comment">//在此不能直接用 this.test = resp.data，因为此处的this指的不是vue对象，而是回调</span><br>                _this.<span class="hljs-property">test</span> = resp.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br><br>            &#125;)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:8081/afterend/test/queryById?id=20206107&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>) &#123;<br>    _this.<span class="hljs-property">test</span> = resp.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br><span class="hljs-comment">//get方式传一个个参数</span><br>&#125;)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://localhost:8081/afterend/test/addOne&#x27;</span>,_this.<span class="hljs-property">add1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>) &#123;<br><span class="hljs-comment">//pose方式传对象，直接写对象名</span><br><span class="hljs-comment">//get方式传对象，写&#123;t:对象&#125;（也尝试了不知道为什么成功不了）</span><br>&#125;)<br>        &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><blockquote><h6 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h6><p>1.配置好application.yml文件中后端服务端口和数据库；</p><p>2.已经创建编写好crossDomain（跨域配置）、ResultEnum（前后端交互信息）、ResultVo（响应返回的数据实体）；后面两个可以省略，我后面示例用到了</p><p>3.完成数据库的连接，表的创建</p><p>4.完成dto-&gt;mapper-&gt;Service层的一个实例</p><p>（上面前提没有做好请参考上一篇文章Vue+SpringBoot-3（后端））</p><h6 id="在Controller创建testHandler类"><a href="#在Controller创建testHandler类" class="headerlink" title="在Controller创建testHandler类"></a>在Controller创建testHandler类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.Controller;<br><br><span class="hljs-keyword">import</span> com.example.afterend.Service.testServic;<br><span class="hljs-keyword">import</span> com.example.afterend.Vo.ResultVo;<br><span class="hljs-keyword">import</span> com.example.afterend.dto.test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><span class="hljs-comment">//这是一个控制器</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><span class="hljs-comment">//第一层地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testHandler</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    testServic testservic;<br>    <span class="hljs-meta">@RequestMapping(&quot;/queryAll&quot;)</span><span class="hljs-comment">//第二层地址</span><br>    <span class="hljs-keyword">public</span> ResultVo <span class="hljs-title function_">ConQueryAll</span><span class="hljs-params">()</span>&#123;<br>        ResultVo resultVo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVo</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;查询成功&quot;</span>,testservic.queryAll());<br>        <span class="hljs-keyword">return</span>  resultVo;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/queryById&quot;)</span><span class="hljs-comment">//第二层地址</span><br>    <span class="hljs-keyword">public</span> ResultVo <span class="hljs-title function_">ConQueryById</span><span class="hljs-params">(String id)</span>&#123;<br>        ResultVo resultVo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVo</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;查询成功&quot;</span>,testservic.queryById(id));<br>        <span class="hljs-keyword">return</span>  resultVo;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/addOne&quot;,method = RequestMethod.POST)</span><span class="hljs-comment">//第二层地址，注意这里用的post方式传对象</span><br>    <span class="hljs-keyword">public</span> ResultVo <span class="hljs-title function_">ConQueryById</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> test t)</span>&#123;<br>        System.out.println(t);<br>        <span class="hljs-type">int</span> flag=testservic.addOne(t);<br>        ResultVo resultVo=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(flag&gt;<span class="hljs-number">0</span>)<br>            resultVo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVo</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;插入成功&quot;</span>,flag);<br>        <span class="hljs-keyword">else</span><br>            resultVo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVo</span>(<span class="hljs-number">5000</span>,<span class="hljs-string">&quot;插入失败&quot;</span>,flag);<br>        <span class="hljs-keyword">return</span>  resultVo;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-3（后端）</title>
    <link href="/2022/10/06/Vue+SpringBoot-3%EF%BC%88%E5%90%8E%E7%AB%AF%EF%BC%89/"/>
    <url>/2022/10/06/Vue+SpringBoot-3%EF%BC%88%E5%90%8E%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><blockquote><h6 id="创建项目结构文件夹"><a href="#创建项目结构文件夹" class="headerlink" title="创建项目结构文件夹"></a>创建项目结构文件夹</h6><p>dto：实体类，与数据库表映射</p><p>utils：工具类，与数据库表映射</p><p>Vo：用于构建不同数据的综合实体类、前端交互的数据、配置数据等</p><p>Controller： 控制层，接收前端的数据 </p><p>constant： 配置与前端交互返回的数据提示和内容 </p><p>Service：处理接收到的数据，主要用做功能代码</p><p>Mapper：Service-&gt;mapper，实现数据库的增删改查</p><p>config： 配置跨域和redis配置 </p><p>XXXXXXApplication.java: 启动类 （创建项目时存在）</p><p><img src="/..%5Cpostot%5C22-10-06-1.png" alt="1665027727152"></p><h6 id="项目结构之间的关系"><a href="#项目结构之间的关系" class="headerlink" title="项目结构之间的关系"></a>项目结构之间的关系</h6><p>（我们从一次   ”前端请求-后端处理-响应”  来解释）</p><p>1.前端发送请求， controller接受请求接收附带的数据</p><p>2.controller传到service，在service编写功能，处理数据</p><p>3.再从service到mapper，mapper编写数据库增删改查功能</p><p>4.mapper的增删改查功能再通过resource文件夹下的mapper.xml,完成操作数据库的数据 </p><p>5.mapper.xml完成对数据库数据操作后再返回mapper层，返回service，返回controller，返回前端</p></blockquote><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><blockquote><h6 id="1-启动类配置-已经存在，不用管"><a href="#1-启动类配置-已经存在，不用管" class="headerlink" title="1.启动类配置(已经存在，不用管)"></a>1.启动类配置(已经存在，不用管)</h6><p> 想启动项目，必须要有一个入口文件 ，就是我们的XXXXXXApplicationTests（我这里是AfterEndApplicationTests创建项目时已经创建，不需要我们新建或者改写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterEndApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(AfterEndApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-跨域访问配置（这里我们不用redis，简化的配置）"><a href="#2-跨域访问配置（这里我们不用redis，简化的配置）" class="headerlink" title="2.跨域访问配置（这里我们不用redis，简化的配置）"></a>2.跨域访问配置（这里我们不用redis，简化的配置）</h6><p>为了可以接受到前端的数据请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.Config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 跨域访问配置</span><br><span class="hljs-comment">* 22-10-06</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-comment">//声明一个类为配置类，用于取代bean.xml配置文件注册bean对象。</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//继承WebMvcConfigurer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">crossDomain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>  &#123;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//重写父类方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//设置允许跨域</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">//设置允许跨域请求的域名</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">//设置允许的方法</span><br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="3-数据库配置"><a href="#3-数据库配置" class="headerlink" title="3.数据库配置"></a>3.数据库配置</h6><p> resources-&gt;application.properties改为application.yml</p><p>在application.yml 文件配置数据库和服务器的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-comment">#项目的路径，配置如下之后，路径为http:locahost:8080/afterend</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/afterend</span><br>    <span class="hljs-comment">#数据库</span><br><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mydb</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h6 id="4-数据交互配置（可以简化忽略）"><a href="#4-数据交互配置（可以简化忽略）" class="headerlink" title="4.数据交互配置（可以简化忽略）"></a>4.数据交互配置（可以简化忽略）</h6><p> 主要有两个文件，ResutEnum和ResutVo，用于与前端数据交互 </p><p>在constant文件夹创建ResultEnum类，定义前端请求后返回的代号和提示信息（其中OK和Error方法暂时注释，还没搞懂）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.constant;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultEnum</span> &#123;<br>    Integer code;<br>    String message;<br><span class="hljs-comment">//    OK(2000,&quot;成功&quot;),</span><br><span class="hljs-comment">//    Error(5000,&quot;失败&quot;);</span><br>    ResultEnum(Integer code, String message)&#123;<br>        <span class="hljs-built_in">this</span>.code=code;<br>        <span class="hljs-built_in">this</span>.message=message;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在Vo文件夹中创建ResultVo类，用于返回前端请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.Vo;<br><br><span class="hljs-keyword">import</span> com.example.afterend.constant.ResultEnum;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultVo</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T data;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultVo</span><span class="hljs-params">(ResultEnum resultEnum)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code=resultEnum.getCode();<br>        <span class="hljs-built_in">this</span>.message= resultEnum.getMessage();<br>        data=<span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultVo</span><span class="hljs-params">(ResultEnum resultEnum,T data)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code=resultEnum.getCode();<br>        <span class="hljs-built_in">this</span>.message= resultEnum.getMessage();<br>        <span class="hljs-built_in">this</span>.data=data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultVo</span><span class="hljs-params">(Integer code,String message,T data)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code=code;<br>        <span class="hljs-built_in">this</span>.message= message;<br>        <span class="hljs-built_in">this</span>.data=data;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></blockquote><h5 id="测试（测试后端通过mybatis-pulse操作数据库）"><a href="#测试（测试后端通过mybatis-pulse操作数据库）" class="headerlink" title="测试（测试后端通过mybatis-pulse操作数据库）"></a>测试（测试后端通过mybatis-pulse操作数据库）</h5><blockquote><p>前提：pom.xml依赖和application.yml数据库配置完成</p><h5 id="1-创建数据库表，插入适当数据"><a href="#1-创建数据库表，插入适当数据" class="headerlink" title="1.创建数据库表，插入适当数据"></a>1.创建数据库表，插入适当数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE airplane;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test (<br> id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>),<br> name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span> (<span class="hljs-number">20206105</span>,<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span> (<span class="hljs-number">20206107</span>,<span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span> (<span class="hljs-number">20206108</span>,<span class="hljs-string">&#x27;3&#x27;</span>);<br></code></pre></td></tr></table></figure><h6 id="2-dto层创建实体类test"><a href="#2-dto层创建实体类test" class="headerlink" title="2.dto层创建实体类test"></a>2.dto层创建实体类test</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.dto;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Builder;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><span class="hljs-comment">//为类生成相对略微复杂的构建器 API（不太懂）</span><br><span class="hljs-meta">@TableName(value = &quot;test&quot;)</span><span class="hljs-comment">//指定表名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br> <span class="hljs-keyword">private</span> Integer id;<br> <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="3-Mapper层创建继承接口testMapper"><a href="#3-Mapper层创建继承接口testMapper" class="headerlink" title="3.Mapper层创建继承接口testMapper"></a>3.Mapper层创建继承接口testMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.Mapper;<br><br><span class="hljs-keyword">import</span> com.example.afterend.dto.test;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-comment">//表明是一个mapper接口</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-comment">//引入test类</span><br><span class="hljs-comment">//Mapper 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">testMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;test&gt; &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="4-Service层创建testServic编写方法"><a href="#4-Service层创建testServic编写方法" class="headerlink" title="4.Service层创建testServic编写方法"></a>4.Service层创建testServic编写方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.Service;<br><br><span class="hljs-keyword">import</span> com.example.afterend.Mapper.testMapper;<br><span class="hljs-keyword">import</span> com.example.afterend.dto.test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testServic</span> &#123;<br> <span class="hljs-meta">@Autowired</span><span class="hljs-comment">//通过依赖注入（DI），完成IOC容器中各个组件依赖的关系赋值</span><br> testMapper testmapper;<br> <span class="hljs-comment">//查询全部</span><br> <span class="hljs-keyword">public</span> List&lt;test&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-keyword">return</span> testmapper.selectList(<span class="hljs-literal">null</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mybatis-pulse的其它数据库操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过id查询</span><br>    <span class="hljs-keyword">public</span> test <span class="hljs-title function_">queryById</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> testmapper.selectById(id);<br>    &#125;<br>    <span class="hljs-comment">//名字模糊查询</span><br>    <span class="hljs-keyword">public</span> List&lt;test&gt; <span class="hljs-title function_">queryByName</span><span class="hljs-params">(String name)</span> &#123;<br>        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        testQueryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, name); <span class="hljs-comment">//参数为表中的列名，要查询的条件 相当于 WHERE name LIKE%name%</span><br>        <span class="hljs-keyword">return</span> testmapper.selectList(testQueryWrapper);<br>    &#125;<br>    <span class="hljs-comment">//名字精确查询(通过map)</span><br>    <span class="hljs-keyword">public</span> List&lt;test&gt; <span class="hljs-title function_">queryByNameMap</span><span class="hljs-params">(String name)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, name);<br>        <span class="hljs-keyword">return</span> testmapper.selectByMap(map);<br>    &#125;<br>    <span class="hljs-comment">//计数    (注：也可以和上面的一样加入各种条件)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span> &#123;<br>        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-keyword">return</span> testmapper.selectCount(testQueryWrapper);<br>    &#125;<br><br>    <span class="hljs-comment">//通过id删除</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> testmapper.deleteById(id);<br>    &#125;<br>    <span class="hljs-comment">//通过条件删除???</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBy</span><span class="hljs-params">(String column, Object val)</span> &#123;<br>        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        testQueryWrapper.eq(column, val);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> testmapper.delete(testQueryWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + num);<br>    &#125;<br>    <span class="hljs-comment">//通过条件删除(map)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        testmapper.deleteByMap(map);<br>    &#125;<br><br>    <span class="hljs-comment">// 根据条件更新???</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeBy</span><span class="hljs-params">(test t, String column, Object val)</span> &#123;<br>        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        testQueryWrapper.eq(column, val);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> testmapper.update(t, testQueryWrapper);<br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + num);<br>    &#125;<br><br>    <span class="hljs-comment">// 通过ID修改信息???</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeUserById</span><span class="hljs-params">(test t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> testmapper.updateById(t);<br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + num);<br>    &#125;<br><br>    <span class="hljs-comment">//添加一条数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addOne</span><span class="hljs-params">(test t)</span> &#123;<br>        <span class="hljs-keyword">return</span> testmapper.insert(t);<br>    &#125;<br>    <span class="hljs-comment">//添加多条数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(List&lt;test&gt; ts)</span> &#123;<br>        <span class="hljs-keyword">for</span> (test t : ts) &#123;<br>            addOne(t);<br>        &#125;<br></code></pre></td></tr></table></figure><h6 id="5-test文件夹下创建测试类（测试操作是否成功，可以不测试）"><a href="#5-test文件夹下创建测试类（测试操作是否成功，可以不测试）" class="headerlink" title="5.test文件夹下创建测试类（测试操作是否成功，可以不测试）"></a>5.test文件夹下创建测试类（测试操作是否成功，可以不测试）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.afterend.test1;<br><br><br><span class="hljs-keyword">import</span> com.example.afterend.Service.testServic;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><span class="hljs-comment">//测试注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span> &#123;<br> <span class="hljs-meta">@Autowired</span><br> testServic testservic;<br><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quaeyAll</span><span class="hljs-params">()</span>&#123;<br>     testservic.queryAll().forEach(System.out::println);<br> &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h6><p><img src="/..%5Cpostot%5C22-10-06-2.png" alt="1665027727152"></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-2（前端）</title>
    <link href="/2022/10/05/Vue+SpringBoot-2%EF%BC%88%E5%89%8D%E7%AB%AF%EF%BC%89/"/>
    <url>/2022/10/05/Vue+SpringBoot-2%EF%BC%88%E5%89%8D%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><blockquote><p>这里直接用csdn一位博主（积极向上的十六）的内容了</p><p><a href="https://blog.csdn.net/weixin_44872023/article/details/107114823?ops_request_misc=%7B%22request_id%22:%22166513639316782427470260%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166513639316782427470260&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-107114823-null-null.142%5Ev51%5Epc_rank_34_2,201%5Ev3%5Eadd_ask&utm_term=vue2">vue cli2 vuecli2目录结构</a></p><p><img src="/.%5Cpostot%5C22-10-05-1.png" alt="1665027727152"></p><h6 id="重点部分"><a href="#重点部分" class="headerlink" title="重点部分"></a>重点部分</h6><ol><li><p>index.html——[主页]<br>index.html如其他html一样，但一般只定义一个空的根节点，在main.js里面定义的实例将挂载在根节点下，内容都通过vue组件来填充</p></li><li><p>App.vue——[根组件]<br>一个vue页面通常由三部分组成:模板(template)、js(script)、样式(style)</p></li><li><p>main.js——[入口文件]<br>main.js主要是引入vue框架，根组件及路由设置，并且定义vue实例</p></li><li><p>router——[路由配置]<br>router文件夹下，有一个index.js，即为路由配置文件</p></li></ol><h6 id="其它细分的文件结构（简单的项目很少用到）"><a href="#其它细分的文件结构（简单的项目很少用到）" class="headerlink" title="其它细分的文件结构（简单的项目很少用到）"></a>其它细分的文件结构（简单的项目很少用到）</h6><p>build文件主要是webpack的配置，主要启动文件是dev-server.js，当我们输入npm run dev首先启动的就是dev-server.js，它会去检查<a href="https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020">node</a>及npm版本，加载配置文件，启动服务。 </p><p><img src="/.%5Cpostot%5C22-10-05-2.png" alt="1665027727152"></p><p>config文件主要是项目相关配置，我们常用的就是当端口冲突时配置监听端口，打包输出路径及命名等 </p><p><img src="/.%5Cpostot%5C22-10-05-3.png" alt="1665027727152"></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-1（准备）</title>
    <link href="/2022/10/03/Vue+SpringBoot-1%EF%BC%88%E5%87%86%E5%A4%87%EF%BC%89/"/>
    <url>/2022/10/03/Vue+SpringBoot-1%EF%BC%88%E5%87%86%E5%A4%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><blockquote><h6 id="HBuilder-X写前端"><a href="#HBuilder-X写前端" class="headerlink" title="HBuilder X写前端:"></a>HBuilder X写前端:</h6><p>Veu2（2.6.10）</p><h6 id="IDEA写后端："><a href="#IDEA写后端：" class="headerlink" title="IDEA写后端："></a>IDEA写后端：</h6><p>JDK1.8；Java8</p><p>SpringBoot（2.7.4）</p><p>mybatisplus</p><h6 id="IDEA创建SpringBoot项目时添加依赖："><a href="#IDEA创建SpringBoot项目时添加依赖：" class="headerlink" title="IDEA创建SpringBoot项目时添加依赖："></a>IDEA创建SpringBoot项目时添加依赖：</h6><p>SpringWeb</p><p>JDBC API</p><p>MyBatis Framework</p><p>MySQL Driver</p><p>Thymeleaf</p></blockquote><h5 id="尝试运行创建的前端"><a href="#尝试运行创建的前端" class="headerlink" title="尝试运行创建的前端"></a>尝试运行创建的前端</h5><blockquote><h6 id="报错：（没记录到报错语句）"><a href="#报错：（没记录到报错语句）" class="headerlink" title="报错：（没记录到报错语句）"></a>报错：（没记录到报错语句）</h6><p>通过查询，node版本和Vue需要考虑兼容，通过将node替换为较为稳定的16.15.1版本解决了该报错，使初建前端项目可以直接运行</p><p>（推荐可以了解一下nvm，很方便的管理node版本和npm）</p></blockquote><h5 id="尝试运行创建的后端（报错，依赖没下载全面）"><a href="#尝试运行创建的后端（报错，依赖没下载全面）" class="headerlink" title="尝试运行创建的后端（报错，依赖没下载全面）"></a>尝试运行创建的后端（报错，依赖没下载全面）</h5><h5 id="Maven改阿里镜像-避免Maven有些包需要外网下载不了"><a href="#Maven改阿里镜像-避免Maven有些包需要外网下载不了" class="headerlink" title="Maven改阿里镜像(避免Maven有些包需要外网下载不了)"></a>Maven改阿里镜像(避免Maven有些包需要外网下载不了)</h5><blockquote><h6 id="1-下载Maven"><a href="#1-下载Maven" class="headerlink" title="1.下载Maven"></a>1.下载Maven</h6><p> Maven是一个项目管理工具，它包含了一个对象模型。一组标准集合集合，一个依赖管理系统。和用来运行定义在生命周期阶段中插件目标和逻辑。 核心功能Maven的核心功能是合理叙述项目间的依赖关系，通俗点就是通过pom.xml文件的配置获取jar包不用手动的去添加jar包。其本质就是通过配置pom.xml来获取jar包，当然这是在该项目必须是maven项目的前提下。 </p><p><a href="https://maven.apache.org/">Maven官网地址</a></p><p><img src="/..%5Cpostot%5C22-10-03-1.png" alt="1665027727152"></p><p><img src="/..%5Cpostot%5C22-10-03-2.png" alt="1665027727152"></p><h6 id="2-修改settings-xml文件"><a href="#2-修改settings-xml文件" class="headerlink" title="2.修改settings.xml文件"></a>2.修改settings.xml文件</h6><p>解压完成在Maven中找到：conf-&gt;<strong>settings.xml</strong><br>搜索&lt;<strong>mirrors</strong>节点，注释之前内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;mirror&gt;<br>      &lt;id&gt;maven-<span class="hljs-keyword">default</span>-http-blocker&lt;/id&gt;<br>      &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;<br>      &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;<br>      &lt;url&gt;http:<span class="hljs-comment">//0.0.0.0/&lt;/url&gt;</span><br>      &lt;blocked&gt;<span class="hljs-literal">true</span>&lt;/blocked&gt;<br>    &lt;/mirror&gt;<br></code></pre></td></tr></table></figure><p>在该节点添加以下内容 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;mirror&gt;<br>      &lt;id&gt;alimaven&lt;/id&gt;<br>      &lt;name&gt;aliyun maven&lt;/name&gt;<br>      &lt;url&gt;http:<span class="hljs-comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br>      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>   &lt;/mirror&gt;<br></code></pre></td></tr></table></figure><h6 id="3-修改IDEA内设置"><a href="#3-修改IDEA内设置" class="headerlink" title="3.修改IDEA内设置"></a>3.修改IDEA内设置</h6><p> file-&gt;settings-&gt;Build…-&gt;Build Tools-&gt;Maven </p><p><img src="/..%5Cpostot%5C22-10-03-3.png" alt="1665027727152"></p></blockquote><h5 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h5><blockquote><p>pom.xml是配置maven配置的文件，下面是刚创建好项目时（注释自己添加的）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>afterEnd<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>afterEnd<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>afterEnd<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--        spring-boot--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mybatis--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mysql--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    打包配置--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-lombok依赖"><a href="#1-lombok依赖" class="headerlink" title="1.lombok依赖"></a>1.lombok依赖</h6><pre><code class="hljs">    是一个在Java开发过程中用注解的方式，简化了 JavaBean 的编写，避免了冗余和样板式代码而出现的插件，让编写的类更加简洁 </code></pre><p>（1）Idea中File→Setting→Plugins中，下载lombok 插件</p><p>新版找不到lombok 插件可以参考下文解决</p><p><a href="https://blog.csdn.net/weixin_47381872/article/details/123036333?ops_request_misc=%7B%22request_id%22:%22166503957416782412513583%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166503957416782412513583&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_v39-2-123036333-null-null.142%5Ev51%5Epc_rank_34_2,201%5Ev3%5Eadd_ask&utm_term=idea%E6%90%9C%E4%B8%8D%E5%88%B0lombok%E6%8F%92%E4%BB%B6&spm=1018.2226.3001.4187"> 最新版IDEA Lombok插件安装</a> </p><p>（2）在工程的pom.xml文件中引入lombok依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在工程的pom.xml文件中引入lombok依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;1.18.8&lt;/version&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-mybatisplus依赖"><a href="#2-mybatisplus依赖" class="headerlink" title="2.mybatisplus依赖"></a>2.mybatisplus依赖</h6><p>mybatis-plus 是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生 。</p><p> 将springboot依赖中自带的mybatisplus依赖注释，加入mybatisplus依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--        mybatis--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;2.2.2&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="3-测试单元依赖（根据需要添加）"><a href="#3-测试单元依赖（根据需要添加）" class="headerlink" title="3.测试单元依赖（根据需要添加）"></a>3.测试单元依赖（根据需要添加）</h6><p> 用于单元测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--测试--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-处理excel数据</title>
    <link href="/2022/09/29/matlab%20%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/09/29/matlab%20%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h5 id="导入excel表格"><a href="#导入excel表格" class="headerlink" title="导入excel表格"></a>导入excel表格</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">[NUM,TXT,RAW]=xlsread(<span class="hljs-string">&#x27;相对路径或绝对路径\neam.xlsx&#x27;</span>,sheet_n);<br></code></pre></td></tr></table></figure><p>其中NUM为读取的数字；TXT为读取的文本；RAW为全部信息（未被处理未被处理的信息）</p><p>sheet_n可以为下面附表名称，也可以用1，2，3代表第几个附表</p><p>获得的NUM,TXT,RAW都是元胞数组，形式如下</p><p>[</p><p>{1} {‘aaa’} {‘aaaa’};</p><p>{2} {‘bbb’} {‘bbbb’}</p><p>]</p></blockquote><h5 id="对元胞数组的一些处理"><a href="#对元胞数组的一些处理" class="headerlink" title="对元胞数组的一些处理"></a>对元胞数组的一些处理</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">Rn1_2=<span class="hljs-built_in">size</span>(RAW1_2,<span class="hljs-number">1</span>);<span class="hljs-comment">%获取行数</span><br>Rm1_2=<span class="hljs-built_in">size</span>(RAW1_2,<span class="hljs-number">2</span>);<span class="hljs-comment">%获取列数</span><br></code></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">RAW&#123;<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>&#125;<span class="hljs-comment">%取元胞数组RAW第i行第j列的元胞内容</span><br>RAW(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)<span class="hljs-comment">%取元胞数组RAW第i行第j列的元胞</span><br>RAW(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>:<span class="hljs-number">5</span>))<span class="hljs-comment">%取元胞数组RAW第i行1~5列的元胞</span><br></code></pre></td></tr></table></figure><p>例如：对于元胞数组</p><p>[</p><p>{1} {‘aaa’} {‘aaaa’};</p><p>{2} {‘bbb’} {‘bbbb’}</p><p>]</p><p>RAW{2,2}&#x3D;》bbb</p><p>RAW(2,2)&#x3D;》{‘bbb’}</p><p>RAW(1,1:3))&#x3D;》{1} {‘aaa’} {‘aaaa’}&lt;—注意这里是多个数据，不能直接赋值给变量或数组</p></blockquote><h5 id="构造元胞数组的一些技巧"><a href="#构造元胞数组的一些技巧" class="headerlink" title="构造元胞数组的一些技巧"></a>构造元胞数组的一些技巧</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">chem1=<span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,RAW(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>:<span class="hljs-number">5</span>));<span class="hljs-comment">%取RAW元胞数组第i行的1~5列的五个元胞数据，组成行元胞数组；2代表行，1代表列</span><br>chem2=<span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,RAW(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>:Rm));<br>chem=[chem,chem1,chem2];<span class="hljs-comment">%数组的串联</span><br>data=[data;chem];<span class="hljs-comment">%数组的并联</span><br></code></pre></td></tr></table></figure><p>cat(1,5 8 ‘a’ 10 ‘b’)</p><p>将多个数据组成得到一个列数组：</p><p>[5;</p><p>8;</p><p>‘a’;</p><p>10;</p><p>‘b’;</p><p>]</p><p>1</p></blockquote><h5 id="写入excel表格"><a href="#写入excel表格" class="headerlink" title="写入excel表格"></a>写入excel表格</h5><blockquote>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">xlswrite(<span class="hljs-string">&#x27;excel名称.xlsx&#x27;</span>, tiltle, <span class="hljs-string">&#x27;Sheet4&#x27;</span>);<br>xlswrite(<span class="hljs-string">&#x27;excel名称.xlsx&#x27;</span>, data, <span class="hljs-string">&#x27;Sheet4&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>);<br></code></pre></td></tr></table></figure><p>一般分别写入表头和表内数据</p><p>tiltle为表头（1*m的元胞数组）</p><p>data为表内数据（n*m的元胞数组）</p><p>sheet4表示写在sheet4附表内；A2表示从A2单元格开始写入</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-线性规划</title>
    <link href="/2022/09/28/matlab%20%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
    <url>/2022/09/28/matlab%20%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h4 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h4><p>注意需要化为公式的标准格式（目标函数最小值、表达式约束&lt;形式等，详情见下）</p><h5 id="一、线性规划公式：linprog-f-a-b-aeq-beq-lb-ub"><a href="#一、线性规划公式：linprog-f-a-b-aeq-beq-lb-ub" class="headerlink" title="一、线性规划公式：linprog(f,a,b,aeq,beq,lb,ub)"></a>一、线性规划公式：linprog(f,a,b,aeq,beq,lb,ub)</h5><blockquote><p>f为目标函数系数（注意是最小值，求最大则在下面函数的f前和最终输出结果前加一个负号）<br>a为约束不等式未知数的系数，多个不等式用封号隔开（注意是系数1<em>未知数1+…&lt;&#x3D;常数，&gt;&#x3D;的需要两边添加负号变换过来）<br>b为约束不等式另一边的常数，多个不等式用封号隔开<br>aeq和beq分别是约束等式的系数和常数，没有就用[]代替，不能省略<br>zeros(6,1)产生6</em>1的0矩阵，lb用于约束未知数的最小值，下面例子中表示所有未知数大于0<br>ub约束未知数最大值，没有则用[]代替，可以省略</p><p>例1：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs matlab">f=[<span class="hljs-number">0.4</span>,<span class="hljs-number">0.28</span>,<span class="hljs-number">0.32</span>,<span class="hljs-number">0.72</span>,<span class="hljs-number">0.64</span>,<span class="hljs-number">0.6</span>];<br>a=[<span class="hljs-number">0.01</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.03</span>;<br>    <span class="hljs-number">0.02</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>    <span class="hljs-number">0</span>,<span class="hljs-number">0.02</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>,<span class="hljs-number">0</span>;<br>    <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.08</span>];<br>b=[<span class="hljs-number">850</span>,<span class="hljs-number">700</span>,<span class="hljs-number">100</span>,<span class="hljs-number">900</span>];<br>aeq=[];<br>beq=[];<br>[x,y]=linprog(-f,a,b,aeq,beq,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">6</span>,<span class="hljs-number">1</span>),[]) fprintf(<span class="hljs-string">&#x27;x1=%.2f,x2=%.2f,x3=%.2f,x4=%.2f,x5=%.2f,x6=%.2f,\nz=%.2f\n&#x27;</span>,x,-y);<br></code></pre></td></tr></table></figure></blockquote><h5 id="二、整数或0-1规划公式：intlinprog-f-ic，a-b-aeq-beq-lb-ub"><a href="#二、整数或0-1规划公式：intlinprog-f-ic，a-b-aeq-beq-lb-ub" class="headerlink" title="二、整数或0-1规划公式：intlinprog(f,ic，a,b,aeq,beq,lb,ub);"></a>二、整数或0-1规划公式：intlinprog(f,ic，a,b,aeq,beq,lb,ub);</h5><blockquote><p>其他同线性规划公式，多出一个变量ic既intcon<br>intcon意义为整数约束变量的位置。例x1和x2都要是整数，ic值为[1,2]<br>这个位置是按照目标函数和约束条件中变量位置来排列的。如果仅有x2为整数约束，那么ic的值为2<br> 0-1规划只要在整数规划的基础上约束未知数上限为1既可</p><p>例2：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab">f=[<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.613</span>,<span class="hljs-number">0.72</span>,<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.64</span>,<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.613</span>,<span class="hljs-number">0.72</span>,<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.64</span>];<br>ic=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>];<br>a=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br>     <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>;<br>     <span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.613</span>,<span class="hljs-number">0.72</span>,<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.64</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.613</span>,<span class="hljs-number">0.72</span>,<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.64</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.64</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">487</span>,<span class="hljs-number">0.52</span>,<span class="hljs-number">0.64</span>];<br> b=[<span class="hljs-number">8</span>;<span class="hljs-number">7</span>;<span class="hljs-number">9</span>;<span class="hljs-number">6</span>;<span class="hljs-number">6</span>;<span class="hljs-number">4</span>;<span class="hljs-number">8</span>;<span class="hljs-number">40</span>;<span class="hljs-number">40</span>;<span class="hljs-number">10.2</span>;<span class="hljs-number">10.2</span>;<span class="hljs-number">3.027</span>;<span class="hljs-number">3.027</span>];<br> aeq=[];<br> beq=[];<br> [x,y]=intlinprog(-f,ic,a,b,aeq,beq,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">14</span>,<span class="hljs-number">1</span>),[]);<br> fprintf(<span class="hljs-string">&#x27;x11=%d,x12=%d,x13=%d,x14=%d,x15=%d,x16=%d,x17=%d,x21=%.2f,x22=%.2f,x23=%.2f,x24=%.2f,x25=%.2f,x26=%.2f,x27=%.2f\n\nz:%.2f\n&#x27;</span>,x,-y);<br></code></pre></td></tr></table></figure><p>例3：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab">f=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br>ic=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>a=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<br>b=[<span class="hljs-number">20</span>;<span class="hljs-number">-5</span>];<br>aeq=[];<br>beq=[];<br>[x,y]=intlinprog(-f,ic,a,b,aeq,beq,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),[]);<br>fprintf(<span class="hljs-string">&#x27;x1=%.0f,x2=%.0f,x3=%.0f\nz=%.0f\n&#x27;</span>,x,-y);<br></code></pre></td></tr></table></figure><p> 注：该例解为4，2，0或5，0，1，看到最前面，该公式求解线性规划得到一个解既停，如果有多个最优解则会遗漏！</p></blockquote><h5 id="三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文"><a href="#三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文" class="headerlink" title="三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文"></a>三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文</h5>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-基础</title>
    <link href="/2022/09/27/matlab%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/27/matlab%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h5 id="matlab-语法"><a href="#matlab-语法" class="headerlink" title="matlab 语法"></a>matlab 语法</h5><blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md基本语法</title>
    <link href="/2022/09/26/md%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/09/26/md%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h5 id="标题-一级标题-二级标题"><a href="#标题-一级标题-二级标题" class="headerlink" title="标题# 一级标题## 二级标题"></a>标题# 一级标题## 二级标题</h5><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h5 id="无序列表-a-a-a（可嵌套）"><a href="#无序列表-a-a-a（可嵌套）" class="headerlink" title="无序列表+ a- a* a（可嵌套）"></a>无序列表+ a- a* a（可嵌套）</h5><blockquote><ul><li><p>a</p><ul><li>b<ul><li>c</li></ul></li></ul></li><li><p>aa</p></li><li><p>aaa</p></li></ul></blockquote><h5 id="有序列表2-a（可嵌套）"><a href="#有序列表2-a（可嵌套）" class="headerlink" title="有序列表2. a（可嵌套）"></a>有序列表2. a（可嵌套）</h5><blockquote><ol start="2"><li>a</li><li>b</li><li>g</li></ol></blockquote><h5 id="区块-gt-一层区块（可嵌套）"><a href="#区块-gt-一层区块（可嵌套）" class="headerlink" title="区块&gt; 一层区块（可嵌套）"></a>区块&gt; 一层区块（可嵌套）</h5><blockquote><p>一层区块</p><blockquote><p>二层区块</p><blockquote><p>三层区块</p><p>……</p><p>（可以嵌套到六层）</p></blockquote></blockquote></blockquote><h5 id="代码块-单行代码-多行代码"><a href="#代码块-单行代码-多行代码" class="headerlink" title="代码块` 单行代码 ```` 多行代码 ```"></a>代码块` 单行代码 ```` 多行代码 ```</h5><blockquote><h6 id="单行代码块用‘"><a href="#单行代码块用‘" class="headerlink" title="单行代码块用‘"></a>单行代码块用‘</h6><p><code> int a =0;</code></p><h6 id="多行代码用-96-96-96"><a href="#多行代码用-96-96-96" class="headerlink" title="多行代码用&#96;&#96;&#96;"></a>多行代码用&#96;&#96;&#96;</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c=c;<br></code></pre></td></tr></table></figure></blockquote><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><blockquote><h6 id="行内式-文字-链接-quot-标题-quot"><a href="#行内式-文字-链接-quot-标题-quot" class="headerlink" title="行内式[文字](链接 &quot;标题&quot; )"></a>行内式[文字](链接 &quot;标题&quot; )</h6><p><a href="https://bumingsuooyi.github.io/" title="欢迎来到我的博客">博客</a></p><h6 id="参数式-文字-…-quot-标题-quot"><a href="#参数式-文字-…-quot-标题-quot" class="headerlink" title="参数式[文字]: …. &quot;标题&quot;"></a>参数式[文字]: …. &quot;标题&quot;</h6></blockquote><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><blockquote><h6 id="行内式-图片名称-链接-quot-quot"><a href="#行内式-图片名称-链接-quot-quot" class="headerlink" title="行内式![图片名称](链接 &quot;&quot;)"></a>行内式![图片名称](链接 &quot;&quot;)</h6><p><img src="https://img-home.csdnimg.cn/images/20201124032511.png" alt="图片名字" title="标题:CSDN"></p><p>参数式[图片名称]:链接 &quot;标题&quot;</p></blockquote><h5 id="分割线—-——"><a href="#分割线—-——" class="headerlink" title="分割线—- - - ——**** * *******____ _ _______"></a>分割线—- - - ——**** * *******____ _ _______</h5><blockquote><h6 id="—"><a href="#—" class="headerlink" title="(—)"></a>(—)</h6><hr><h6 id=""><a href="#" class="headerlink" title="(- - -)"></a>(- - -)</h6><hr><h6 id="——"><a href="#——" class="headerlink" title="(——)"></a>(——)</h6><hr></blockquote><h5 id="表格-123-234-345"><a href="#表格-123-234-345" class="headerlink" title="表格(|123|234|345|)"></a>表格(|123|234|345|)</h5><blockquote><p>&#x2F;&#x2F;例子一</p><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">&#x2F;&#x2F;例子二</td><td align="center"></td><td align="right"></td></tr><tr><td align="left">123</td><td align="center">234</td><td align="right">345</td></tr><tr><td align="left">:—</td><td align="center">:–:</td><td align="right">—:</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table></blockquote><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><blockquote><h6 id="强调字体（-1-、-2-）-1-、-2"><a href="#强调字体（-1-、-2-）-1-、-2" class="headerlink" title="强调字体（*1*、**2**）(_1_、__2__)"></a>强调字体（*1*、**2**）(_1_、__2__)</h6><p><em>被强调1</em></p><p><strong>被强调2</strong></p><p><em>被强调1</em></p><p><strong>被强调2</strong></p><h6 id="删除线（-删除-）"><a href="#删除线（-删除-）" class="headerlink" title="删除线（~~删除~~）"></a>删除线（~~删除~~）</h6><p><del>删除</del></p><h6 id="转义（-加-96-）"><a href="#转义（-加-96-）" class="headerlink" title="转义（\加*+-&#96;_）"></a>转义（\加*+-&#96;_）</h6><p>(\\)</p><p>\</p><p>(\*)</p><ul><li></li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/01/hello-world/"/>
    <url>/2022/09/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
