<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring家族-1-笔记</title>
    <link href="/2023/06/06/Spring%E5%AE%B6%E6%97%8F-1-%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/06/Spring%E5%AE%B6%E6%97%8F-1-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>Spring是轻量级的Java开发基础框架，提供了各种功能和组件来帮助开发Java应用程序，需要手动配置和管理各种组件和依赖关系</p><p>核心是IoC（控制反转）和AOP（面向切面编程），还提供了数据访问、事务管理、安全性、集成等。</p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>Spring MVC是Spring框架的一个模块，用于构建基于MVC（模型-视图-控制器）设计模式的Web应用程序，基于Servlet技术，通过DispatcherServlet来处理请求分发和控制流程，需要手动配置和管理Spring MVC的各种组件，如控制器、视图解析器、处理器映射等。</p><p>提供了注解和组件，用来定义控制器、处理请求、渲染视图等。</p><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><p>Spring Boot则为了简化Spring应用程序的开发和部署，是Spring框架的扩展，</p><p>提供了约定优于配置的方式，通过自动配置和默认值来减少配置工作。</p><p>Spring Boot包含了内嵌服务器、自动配置、外部化配置、起步依赖等功能和技术。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说Spring是框架核心，提供了IoC和AOP等功能。</p><p>Spring MVC是Spring框架的一部分，用来构建Web应用程序，提供注解和组件来构建MVC设计模式。</p><p>Spring Boot则是Spring框架的扩展，为了简化Spring应用程序的开发和部署；可以与Spring MVC结合在一起，通过自动配置和约定优于配置的方式简化Web应用程序的开发。</p><h2 id="概念学习"><a href="#概念学习" class="headerlink" title="概念学习"></a>概念学习</h2><h3 id="Spring的核心特性"><a href="#Spring的核心特性" class="headerlink" title="Spring的核心特性"></a>Spring的核心特性</h3><p>IoC（控制反转）和AOP（面向切面编程）</p><h4 id="IoC（控制反转）"><a href="#IoC（控制反转）" class="headerlink" title="IoC（控制反转）"></a>IoC（控制反转）</h4><p>编程过程中，往往许多类之间产生依赖关系，比如班级类中有老师类，负责上课；</p><p>传统做法：在班级类中创建老师类，调用老师类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Claxx</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attendClaxx</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 使用Teacher类的方法</span><br>        teather.work();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Spring的做法：在容器中创建学生类，并在班级类的<strong>构造方法</strong>或<strong>Set方法</strong>中将容器创建的学生类注入到班级类中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在配置文件（如XML配置文件或使用注解）中定义ProductService的bean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.Teacher&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Claxx</span> &#123;<br>    <span class="hljs-keyword">private</span> Teacher teacher;<br><br>    <span class="hljs-comment">// 使用构造函数注入依赖</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Claxx</span><span class="hljs-params">(Teacher teacher)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacher = teacher;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attendClaxx</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 使用Teacher类的方法</span><br>        teather.work();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由上，引出概念：</p><p><strong>依赖注入：</strong> 在创建对象时，将其所依赖的其他对象直接注入到对象中，而不是通过对象自身去创建或查找依赖的对象。好处是降低了对象之间的耦合度，使得对象更加独立和可重用。 </p><p><strong>IoC（控制反转）:</strong> 核心是通过依赖注入实现，将对象的创建和依赖关系的管理转移到了容器中，由容器负责创建对象并在需要时将它们注入到其他对象中，控制权从应用程序代码中反转到了容器中。 </p><p><strong>容器（ 应用上下文 ）：</strong> 负责管理应用程序中对象实例和处理它们之间的依赖关系 。常见的IoC容器有 ClassPathXmlApplicationContext、AnnotationConfigApplicationContext和GenericApplicationContext等 。</p><p>容器负责以下任务：</p><ol><li>对象的创建：创建应用程序中所需的对象实例。通过配置文件（如XML配置文件）或注解，容器可以了解对象的定义，并根据需要实例化对象。</li><li>对象的生命周期管理：管理对象的生命周期。在对象创建时初始化对象，不需要时销毁。我们可以在对象的初始化和销毁阶段执行特定的逻辑。</li><li>对象的依赖注入：责解析对象之间的依赖关系，将依赖的对象注入到需要它们的对象中。通过容器自动完成注入，对象无需关心它们的依赖对象是如何创建的。</li><li>配置的加载和管理：加载和管理应用程序的配置。配置可以是XML文件、注解或者Java配置类。容器通过读取配置信息来了解应用程序的对象定义、依赖关系和其他配置选项。</li></ol><h5 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h5><p>学习到这里的时候，我想到了工厂模式，我觉得可以将IoC理解为工厂模式的运用，将对象的创建过程封装在工厂类中。但相比于普通的工厂类，IoC还承担了对象生命周期的管理和依赖注入等附加功能</p><h4 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h4><p>编程过程中许多功能往往重复出现在许多不同的类中，比如日志记录、安全性检查、各种工具类等。</p><p>传统的做法：在涉及到的类都创建或引用重复功能的类或者运用单例模式将重复功能的类作为全局对象，供其它类调用。 而重复创建或引用会导致代码的重复和散乱，全局对象容易引发其它隐患。</p><p>Spring的做法：将重复出现的功能作为横切<strong>关注点</strong>抽离出来，定义为切面 ，实现代码模块化和复用。在需要用到该功能（关注点）的位置（切点）<strong>织入</strong>切面的逻辑（通知）。</p><p>由上，引出概念：</p><p> <strong>切面：</strong>切面是横切关注点的模块化实现，将相同横切关注点的逻辑封装起来，可以包括一个或多个通知。 </p><p><strong>切点：</strong>切点定义了在哪些位置应用通知，一般通过表达式或者注解将切点指定在连接点 上，连接点是程序执行过程中的特定点，例如方法的调用、方法的执行、异常的抛出等。</p><p><strong>通知：</strong>通知定义了在切点上执行的逻辑（具体操作）和时机，例如在方法调用前执行某个逻辑、在方法执行后执行某个逻辑等。常见的通知类型包括前置通知、后置通知、异常通知、最终通知和环绕通知。</p><p><strong>织入：</strong>织入是将切面与目标对象关联起来 。通过织入，切面逻辑被插入到切点上，实现切面逻辑和业务逻辑的组合。Spring提供两种织入方式：编译时织入和运行时织入。在大多数情况下，Spring使用运行时织入，通过动态代理或字节码增强来实现织入。</p><p>示例：无</p><h5 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h5><p>切面是在多个对象中重复出现的业务的综合，切点是需要用到切面的地方，通知是要用到切面里的方法和用方法的时机，织入是将切点和通知进行关联。</p><p>最开始感觉到了装饰者模式的影子，相当于在目标对象上装饰（追加功能），虽然在一些方面装饰者模式和AOP（面向切面编程）有共同点（增强或追加功能），但是在实现方法和目标上有差异。</p><p>装饰者模式通过对象的组合和继承，将额外的功能包装在装饰器对象上实现对目标对象的装饰。</p><p>AOP通过将复用功能（横切关注点）抽象成为切面，使用切点定位，将通知织入切点，实现对目标对象的增强。</p><p>有时候还感觉像是单例模式的运用，但经过查阅资料发现，织入切点的通知和全局调用的单例不一样。单例是作为全局对象一直存在的，而织入是在编译、加载或运行时进行的，相当于就是将你写在切面的代码抄了一份在切点的位置，这比单例更灵活和精确并节省资源。</p><h3 id="Spring-Boot的核心特性"><a href="#Spring-Boot的核心特性" class="headerlink" title="Spring Boot的核心特性"></a>Spring Boot的核心特性</h3><p> 自动配置、起步依赖、外部化配置、内嵌服务器</p><h4 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h4><p>自动配置的核心思想是”约定优于配置”，自动配置对项目的类路径和依赖进行扫描，基于<strong>约定</strong>自动配置应用程序所需的组件和功能，减少了繁琐的配置，可以更快速地启动和构建应用程序。</p><p> 约定是基于一致性和默认行为的规范，常见约定和对应的配置：</p><ol><li>默认的目录结构约定：<ul><li><code>src/main/java</code>：Java源代码文件的根目录。</li><li><code>src/main/resources</code>：应用程序的资源文件根目录，如配置文件、静态资源等。</li></ul></li><li>默认的命名约定：<ul><li><code>Application</code>：Spring Boot应用程序的入口类，默认为名为<code>Application</code>的类。</li><li><code>application.properties</code>或<code>application.yml</code>：默认的应用程序配置文件名，存放在<code>src/main/resources</code>目录下。</li></ul></li><li>默认的依赖约定：<ul><li><code>spring-boot-starter-*</code>：Spring Boot提供的一系列”Starter”依赖，例如<code>spring-boot-starter-web</code>用于构建Web应用程序，<code>spring-boot-starter-data-jpa</code>用于使用Spring Data JPA访问数据库等。这些依赖包含了常用的配置和默认的功能集合。</li></ul></li><li>自动配置约定：<ul><li>Spring Boot根据项目的依赖和配置信息，自动配置一些常见的组件和功能，例如数据源、Web服务器、模板引擎等。开发人员可以根据需要进行覆盖或自定义配置。</li></ul></li><li>配置属性约定：<ul><li>Spring Boot提供了一套统一的配置属性命名规则，可以在配置文件中进行设置。例如，以<code>spring.datasource.url</code>的方式配置数据源的URL，以<code>server.port</code>的方式配置应用程序的端口号等。</li></ul></li></ol><h5 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h5><p>联想到Maven项目的依赖管理，在配置pom.xml文件的基础上加入了约定俗成的约定（可以理解为习惯）作为配置的依据。</p><h4 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h4><p>方便的依赖管理机制，能够简化和规范化Spring Boot项目的依赖配置。起步依赖是一组预配置的依赖项集合，用来快速引入常见功能模块或技术栈，同时处理了依赖版本冲突和兼容性等问题。 </p><p>比如，Spring Boot Web的起步依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Spring Boot Web的起步依赖包含了 Spring MVC、Tomcat作为嵌入式Web服务器、自动配置的JSON转换器、默认的静态资源处理器等 </p><h5 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h5><p>感觉是模板（框架）的意思，好像没什么特别的。</p><h4 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h4><p>在不修改代码的情况下，通过外部配置文件或环境变量配置应用程序的行为的机制。这种机制允许我们在不同的环境下轻松地调整应用程序的配置，而不用重新打包和部署应用程序。 </p><h5 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h5><p> 外部化配置是将许多设置写进了文件，通过替换文件，可以改变系统许多设置，不用重新编码部署。</p><p>像一种特殊的配置文件，不止可以配置一些设置选项，甚至对象也可以写入配置文件，方便随时替换，有种回到了以前没有数据库用文件存储的感觉？不知道理解的是否准确</p><h4 id="内嵌服务器"><a href="#内嵌服务器" class="headerlink" title="内嵌服务器"></a>内嵌服务器</h4><p>允许在应用程序中直接嵌入一个Web服务器，不用单独安装和配置外部的Web服务器，让开发、测试和部署Web应用程序更简单、便捷。</p><p>Spring Boot支持包括Tomcat、Jetty和Undertow等多种内嵌服务器，这些服务器都经过优化和集成，可以通过简单的配置启动和运行。</p><h5 id="思考-5"><a href="#思考-5" class="headerlink" title="思考"></a>思考</h5><p>回想起写不用任何框架的JSP页面的时，还需要下载Tomcat服务器才能在浏览器运行自己的web项目，这就方便了这一点吧</p><h3 id="Spring-MVC的核心特性"><a href="#Spring-MVC的核心特性" class="headerlink" title="Spring MVC的核心特性"></a>Spring MVC的核心特性</h3><p>略</p><p>Spring MVC是基于MVC设计模式的Web框架，适用于传统的服务器端渲染页面的Web应用程序（具有复杂业务逻辑、需要生成HTML页面的后端API，或者有传统的Web应用程序的需求）。</p><p>传统Web应用程序的需求一般包括：</p><p>用户认证和授权、页面路由和导航、表单提交和数据处理、数据展示和查询、数据存储和管理、文件上传和下载、安全性和数据保护、错误处理和异常处理、日志记录和监控、邮件通知和消息推送、定时任务和调度、性能优化和缓存、邮件通知和消息推送、定时任务和调度、性能优化和缓存</p><p><strong>注意：</strong>并不意味着现在的web应用没有这些需求了，只是现在流行前后端分离的web应用，很多需求被前端分担了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaStript-2-纠错笔记</title>
    <link href="/2023/06/04/JavaScript-2-%E7%BA%A0%E9%94%99%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/04/JavaScript-2-%E7%BA%A0%E9%94%99%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="某模块缺失"><a href="#某模块缺失" class="headerlink" title="某模块缺失"></a>某模块缺失</h3><p>报错：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/modules/cjs/loader:<span class="hljs-number">936</span> <br>throw err;<br></code></pre></td></tr></table></figure><p>说明：</p><p>我是用在unit1文件夹下打开控制台通过node my.js运行下面js文件夹下的my.js文件的报错</p><p>解决：</p><p>在js文件夹下打开控制台，解决；其实就是node找不到你要运行的my.js文件，所以报错模块缺失</p><h3 id="函数找不到"><a href="#函数找不到" class="headerlink" title="函数找不到"></a>函数找不到</h3><p>报错：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">[某函数名] <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> a <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><p>说明：</p><p>最容易想到的就是没写这个函数，这样低级的失误很难出现。检查了确保自己确实写了一个函数。</p><p>再想到变量声明和方法声明的顺序问题，如果方法中用到的某个变量没有被声明是不是会报这样的错误？</p><p>解决：</p><p>最后发现是原先的Object对象在后面覆写了，没有带上这个方法，所以导致方法不存在了。js中var声明的变量在后面一不小心就会重新覆盖，可能这也是多用let和contis的原因吧</p><p>此外：</p><p>探究一下说明中的提问，测试了一下，调用方法（方法中用到的没有声明的属性，会直接被创建，并加入到对象的属性中被管理），测试代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//测试1：</span><br><span class="hljs-keyword">var</span> person=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Lai&quot;</span>,<br><span class="hljs-attr">city</span>:<span class="hljs-string">&quot;GZ&quot;</span>,<br><span class="hljs-attr">changeAge</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newAge</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=newAge;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//调用对象中自己编写的方法修改属性</span><br>person.<span class="hljs-title function_">changeAge</span>(<span class="hljs-number">21</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br><br><span class="hljs-comment">/*输出</span><br><span class="hljs-comment">&#123; name: &#x27;Lai&#x27;, city: &#x27;GZ&#x27;, changeAge: [Function: changeAge], age: 21 &#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//测试2</span><br><span class="hljs-keyword">var</span> person=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Lai&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<br><span class="hljs-attr">city</span>:<span class="hljs-string">&quot;GZ&quot;</span>,<br><br><span class="hljs-attr">changeAge</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newAge</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=newAge;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//删除对象属性</span><br><span class="hljs-keyword">delete</span> person.<span class="hljs-property">age</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br><span class="hljs-comment">//调用对象中自己编写的方法修改属性</span><br>person.<span class="hljs-title function_">changeAge</span>(<span class="hljs-number">21</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>);<br><span class="hljs-comment">/*输出</span><br><span class="hljs-comment">&#123; name: &#x27;Lai&#x27;, city: &#x27;GZ&#x27;, changeAge: [Function: changeAge], age: 21 &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaStript-1-笔记</title>
    <link href="/2023/06/03/JavaStript-1-%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/03/JavaStript-1-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript概述"><a href="#JavaScript概述" class="headerlink" title="JavaScript概述"></a>JavaScript概述</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>JavaScript是一种高级、解释型的脚本语言，不需要预编译，在浏览器中直接执行。主要用于在网页上实现交互和动态内容。</p><p>JavaScript最初是为了在网页上添加简单的交互功能而创建的，随着时间的推移，它发展成了一门功能强大的语言，可用于开发各种类型的应用，包括网页前端开发、后端服务器开发、移动应用开发、游戏开发等。</p><p>JavaScript特点：</p><ol><li>客户端脚本语言：JavaScript主要在浏览器环境中运行，用于处理网页的交互和动态内容。通过JavaScript，可以操作HTML元素、处理用户输入、执行动画效果、发送网络请求等。</li><li>动态性：JavaScript是一种动态语言，可以在运行时修改和调整代码。这意味着可以根据不同的情况进行灵活的编程，对代码的修改和调试更加方便。</li><li>事件驱动：JavaScript通过事件处理机制实现交互和响应用户操作。可以监听和处理鼠标点击、键盘输入、页面加载完成等事件，根据事件触发执行相应的操作。</li><li>跨平台：JavaScript可以在不同的操作系统和设备上运行，包括Windows、Mac、Linux等，也可以在移动设备和嵌入式系统中运行。</li><li>基于对象：JavaScript是一种基于对象的语言，几乎所有的东西都是对象。可以创建和操作对象，包括原生对象（如数组、日期、正则表达式）和自定义对象。</li><li>第三方库和框架：JavaScript拥有丰富的第三方库和框架，如jQuery、React、Angular等，可以加快开发速度并提供更高级的功能和抽象。</li></ol><h3 id="在哪运行"><a href="#在哪运行" class="headerlink" title="在哪运行"></a>在哪运行</h3><p>最开始JavaScript在浏览器中借助JavaScript引擎运行，比如：</p><p>FireFox：SpiderMonkey </p><p>Chrome：V8</p><p>后来程序员RyunDahl将V8抽离出来，并基于C++包装成了Node，使得JavaScript可以在任何下载了Node.js程序的地方运行。</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>工具：VSCode、SublineText、Atom等</p><p>安装node.js，node可以用于运行js代码和安装第三方工具，可以用nvm管理node版本</p><p>在VSCode中下载LiveServer(轻量级Web服务器)就可以在计算机本地默认浏览器运行VSCode编写的js了</p><h4 id="Web中使用js"><a href="#Web中使用js" class="headerlink" title="Web中使用js"></a>Web中使用js</h4><ol><li><p>可以在html的<code>&lt;body&gt;</code>末尾引入<code>&lt;script&gt;  &lt;/script&gt;</code>代码块（末尾引入的两个好处，优先解析页面，给用户好的体验；js操控一些UI组件需要先渲染出来，JS才能控制）</p></li><li><p>将JS分离出来成为独立的.js文件，在html中通过<code>&lt;script src=&#39;....js&#39;/&gt;</code>引入独立的.js文件</p></li></ol><h2 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>var：</p><ol><li>在早期版本的JavaScript中，var是唯一的变量声明关键字。</li><li>具有函数作用域，也称为函数级作用域，既函数内部声明的变量在函数外部不可访问，而在函数内部任何位置都可访问。</li><li>var声明的变量可以被重复声明。</li></ol></li><li><p>let：</p><ol><li>在ES6（ECMAScript 2015）中引入的关键字。</li><li>具有块级作用域，指在if语句、循环语句、函数等花括号（{}）内部定义的变量，仅限于该块内部。</li><li>块级作用域，它不会被提升到所在作用域的顶部，并且不能被重复声明。</li></ol></li><li><p>const：</p><ol><li>在ES6中引入的关键字，用于声明常量，即一旦被赋值后就不能再改变的变量。</li><li>具有块级作用域，并且不能被重复声明或重新赋值。</li><li>const声明常量必须在声明时进行初始化赋值，而且对于复杂数据类型（如对象和数组），const只保证变量的引用不可改变，但其内部属性的值仍然可以修改。</li></ol></li></ul><h3 id="原生数据类型"><a href="#原生数据类型" class="headerlink" title="原生数据类型"></a>原生数据类型</h3><p><strong>注意：</strong></p><p>JavaScript是一种动态类型的语言，变量的数据类型是在运行时确定的。同一个变量可以在不同的时候存储不同类型的值。</p><p>例如，一个变量可以先存储数字，然后存储字符串。这种灵活性是JavaScript的一个特点，所以需要注意类型的转换和判断，确保代码的正确性 。</p><p>下面是常见数据：</p><ol><li>Boolean：布尔值，true&#x2F;false</li><li>Number：数字，可以整数或浮点数</li><li>String：字符串，双引号包裹，如：”Hello World”</li><li>undefined：未定义的值，当声明变量但未给其赋值时，变量的默认值为undefined，变量没有被定义</li><li>null：空值或不存在的对象，特殊的关键字，表示变量已经声明且定义了，但不引用任何对象</li><li>Object：对象，由属性和方法组成；对象可以是自定义的，也可以是内置的对象；用{}包裹</li><li>Symbol：在ES6中引入的一种新的数据类型，表示唯一的、不可修改的值；Symbol通常用作对象的属性键，以确保属性的唯一性</li></ol><p>除了上述的原生数据类型，JavaScript还有两个特殊的类型：</p><ol><li>Function：函数，一种特殊的对象，可以执行特定的操作并返回值。</li><li>Array：数组，一种特殊的对象，存储和操作多个值；可以包含任意类型的数据，并且使用数字索引来访问和操作数组元素</li></ol><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="拼接字符串："><a href="#拼接字符串：" class="headerlink" title="拼接字符串："></a>拼接字符串：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str1=<span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-keyword">let</span> str2=<span class="hljs-string">&quot;World&quot;</span>;<br><br><span class="hljs-comment">//+操作符拼接</span><br><span class="hljs-keyword">let</span> result=str1+<span class="hljs-string">&quot; &quot;</span>+str2;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><br><span class="hljs-comment">//模板字符串</span><br>result=<span class="hljs-string">`<span class="hljs-subst">$&#123;str1&#125;</span> <span class="hljs-subst">$&#123;str2&#125;</span>`</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><br><span class="hljs-comment">//concat()方法</span><br>result=str1.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot; &quot;</span>,str2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><br><span class="hljs-comment">//用数组的join方法</span><br><span class="hljs-keyword">let</span> strArray=[<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;World&quot;</span>];<br>result=strArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br></code></pre></td></tr></table></figure><h5 id="内置属性和方法"><a href="#内置属性和方法" class="headerlink" title="内置属性和方法"></a>内置属性和方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str=<span class="hljs-string">&quot;Hello Word!&quot;</span><br><br><span class="hljs-comment">//字符串长度</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>);<br><br><span class="hljs-comment">//子串首次出现位置的索引</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;or&quot;</span>));<br><br><span class="hljs-comment">//子串最后出现位置</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;o&quot;</span>));<br><br><span class="hljs-comment">//提取指定位置的子串，6-10，不包括11</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">6</span>,<span class="hljs-number">11</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">6</span>,<span class="hljs-number">11</span>));<br><br><span class="hljs-comment">/*str.slice()和str.substring()方法的主要区别有两点：</span><br><span class="hljs-comment">1. 对负数参数的处理方式</span><br><span class="hljs-comment">str.slice()：负数参数被视为从字符串末尾开始的位置，例如，-1表示最后一个字符。</span><br><span class="hljs-comment">str.substring()：负数参数被视为0，即负数参数会被转换为0。</span><br><span class="hljs-comment">2. 对参数交换的处理方式</span><br><span class="hljs-comment">str.slice()：如果start大于end，则返回一个空字符串。</span><br><span class="hljs-comment">str.substring()：如果start大于end，则自动交换这两个参数的位置</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//提取指定位置的子串，起始位置6，字串长度5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">6</span>,<span class="hljs-number">5</span>));<br><br><span class="hljs-comment">//替换原串中的子串</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;Word&quot;</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>));<br><br><span class="hljs-comment">//将字符串按指定字符分割为数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>));<span class="hljs-comment">//按每个字符划分</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>));<span class="hljs-comment">//按空格划分</span><br><br><span class="hljs-comment">//转化大小写</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">toUpperCase</span>());<span class="hljs-comment">//转化为大写</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">toLowerCase</span>());<span class="hljs-comment">//转化为小写</span><br></code></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="创建、访问、赋值"><a href="#创建、访问、赋值" class="headerlink" title="创建、访问、赋值"></a>创建、访问、赋值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数组构造函数创建</span><br><span class="hljs-keyword">const</span> num=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br><span class="hljs-comment">//简约中括号创建</span><br><span class="hljs-keyword">const</span> s=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 访问/修改数组元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num[<span class="hljs-number">0</span>]);<br>num[<span class="hljs-number">0</span>]=-<span class="hljs-number">1.1</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><h5 id="内置属性和方法-1"><a href="#内置属性和方法-1" class="headerlink" title="内置属性和方法"></a>内置属性和方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">//长度</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>);<br><br><span class="hljs-comment">//在数组末尾添加一个或多个元素，并返回数组长度</span><br><span class="hljs-keyword">let</span> len=arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr+<span class="hljs-string">&quot; 长度：&quot;</span>+len);<br><span class="hljs-comment">//在数组开头添加一个或多个元素，并返回数组长度</span><br>len=arr.<span class="hljs-title function_">unshift</span>(-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr+<span class="hljs-string">&quot; 长度：&quot;</span>+len);<br><br><br><span class="hljs-comment">//删除并返回最后一个元素</span><br><span class="hljs-keyword">let</span> lastE=arr.<span class="hljs-title function_">pop</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除元素：&quot;</span>+lastE+<span class="hljs-string">&quot;，数组：&quot;</span>+arr);<br><span class="hljs-comment">//删除并返回第一个元素</span><br>lastE=arr.<span class="hljs-title function_">shift</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除元素：&quot;</span>+lastE+<span class="hljs-string">&quot;，数组：&quot;</span>+arr);<br><br><span class="hljs-comment">//多个数组合并成一个数组</span><br><span class="hljs-keyword">let</span> arr1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> arr2=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> newArr=arr1.<span class="hljs-title function_">concat</span>(arr2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br><br><span class="hljs-comment">//获取指定位置的子数组 1-3,不包括4</span><br><span class="hljs-keyword">let</span> subArr=newArr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(subArr);<br><br><span class="hljs-comment">//在数组中按指定位置 删除、替换、插入元素，并返回被删除元素组成的数组</span><br><span class="hljs-comment">//将newArr中的第1-3三个元素替换为6，7两个元素</span><br><span class="hljs-keyword">let</span> removeE=newArr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(removeE);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br><br><span class="hljs-comment">//返回元素在数组中首次出现的位置</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">3</span>));<br><span class="hljs-comment">//返回元素在数组中最后出现的位置</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="创建、访问、赋值-1"><a href="#创建、访问、赋值-1" class="headerlink" title="创建、访问、赋值"></a>创建、访问、赋值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Object构造函数创建对象</span><br><span class="hljs-keyword">var</span> person=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>person.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Lai&quot;</span>;<br>person.<span class="hljs-property">age</span>=<span class="hljs-number">23</span>;<br>person.<span class="hljs-property">city</span>=<span class="hljs-string">&quot;GZ&quot;</span>;<br><br><span class="hljs-comment">//字面量方式创建对象：</span><br><span class="hljs-keyword">var</span> person=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Lai&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<br><span class="hljs-attr">city</span>:<span class="hljs-string">&quot;GZ&quot;</span>,<br><br><span class="hljs-attr">changeAge</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newAge</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=newAge;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//对象的属性赋值/修改和访问</span><br>person.<span class="hljs-property">age</span>=<span class="hljs-number">22</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>);<br><span class="hljs-comment">//调用对象中自己编写的方法修改属性</span><br>person.<span class="hljs-title function_">changeAge</span>(<span class="hljs-number">21</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>);<br></code></pre></td></tr></table></figure><h5 id="内置属性和方法-2"><a href="#内置属性和方法-2" class="headerlink" title="内置属性和方法"></a>内置属性和方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Lai&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<br><span class="hljs-attr">city</span>:[<span class="hljs-string">&quot;gz&quot;</span>,<span class="hljs-string">&quot;nc&quot;</span>],<br>&#125;<br><br><span class="hljs-comment">//返回由对象自身可枚举 属性 组成的数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(person));<br><span class="hljs-comment">//返回由对象自身可枚举 属性的值 组成的数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(person));<br><span class="hljs-comment">//返回由对象自身可枚举 属性的键值对 组成的数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(person));<br><br><span class="hljs-comment">//将一个或多个源对象的属性复制到目标对象，并返回目标对象</span><br><span class="hljs-keyword">var</span> contactWay=&#123;<br><span class="hljs-attr">number</span>:<span class="hljs-number">12345678912</span>,<br><span class="hljs-attr">email</span>:<span class="hljs-string">&quot;123@123.email&quot;</span>,<br>&#125;<br><span class="hljs-keyword">var</span> personNew=<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(person,contactWay);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(personNew);<br><br><span class="hljs-comment">//比较两个值是否严格相等</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;5&quot;</span>));<span class="hljs-comment">//flase</span><br><br><span class="hljs-comment">//删除对象属性</span><br><span class="hljs-keyword">delete</span> person.<span class="hljs-property">city</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br><br><span class="hljs-comment">//封闭对象，使属性不可添加和删除，但属性值可以修改</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(person);<br>person.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;BMSY&quot;</span>;<br>person.<span class="hljs-property">new</span>=<span class="hljs-string">&quot;newAdd&quot;</span>;<span class="hljs-comment">//无效操作，无法添加新属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br><br><span class="hljs-comment">//冻结对象，使属性不可修改、删除、添加</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(person);<br>person.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;Lai&quot;</span>;<span class="hljs-comment">//无效操作，不会修改属性值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git-1-笔记</title>
    <link href="/2023/05/22/Git-1-%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/22/Git-1-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>版本控制工具，分为本地版本控制、集中版本控制和分布版本控制。</p><p>常见版本控制工具：</p><p>Git、SVN、CVS、VSS、TFS、Visual Studio Online等</p><h4 id="SVN（集中）"><a href="#SVN（集中）" class="headerlink" title="SVN（集中）"></a>SVN（集中）</h4><h4 id="Git（分布）"><a href="#Git（分布）" class="headerlink" title="Git（分布）"></a>Git（分布）</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>速度</p><p>简单设计</p><p>允许并行开发的分支</p><p>完全分布式</p><p>有能力高效管理</p><h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><p>安装和常用工具</p><p>Git GUI：图形化界面工具</p><p>Git Bash：Git提供的命令行工具</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h4><p>Git配置文件都在安装目录下的\etc\gitconfig</p><ol><li><p>配置提交人信息</p><ul><li>设置用户信息</li></ul><p><code>git config --global user.name &quot;Ming&quot;</code></p><p><code>git config --global user.email &quot;123@Ming.email&quot;</code></p><ul><li>查看配置信息</li></ul><p><code>git config --global user.name</code></p><p><code>git config --global user.email</code></p></li><li><p>为常用命令配置别名，用alias命令（配置了没用…）</p><p>在用户目录创建.bashrc文件，内容如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#用于输出git提交日志</span><br><span class="hljs-keyword">alias</span> git-log=&#x27;git log <span class="hljs-params">--pretty=oneline</span> <span class="hljs-params">--all</span> <span class="hljs-params">--graph</span> <span class="hljs-params">--abbrev-commit</span>&#x27;<br><span class="hljs-comment">#用于输出当前目录所有文件及基本信息</span><br><span class="hljs-keyword">alias</span> ll=&#x27;<span class="hljs-keyword">ls</span> -al&#x27;<br></code></pre></td></tr></table></figure></li><li><p>解决Git中文乱码问题</p><ul><li><p>在git执行</p><p><code>git config --global core.quotepath false</code></p><p>（ 设置Git在显示文件路径时不对路径中的非ASCII字符进行转义显示 ）</p></li><li><p>在${git_home}&#x2F;etc&#x2F;bash.bashrc文件最后两行加入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LANG</span>=<span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LC_ALL</span>=<span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaFX-3-练习</title>
    <link href="/2023/05/13/JavaFX-3-%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/05/13/JavaFX-3-%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="B-x2F-C体系结构-模拟实时公交"><a href="#B-x2F-C体系结构-模拟实时公交" class="headerlink" title="B&#x2F;C体系结构 模拟实时公交"></a>B&#x2F;C体系结构 模拟实时公交</h3><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/..%5Cpostot%5C23-05-13-1.gif" alt="公交管理中心"></p><h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p>顺序图</p><p><img src="/..%5Cpostot%5C23-05-13-2.png" alt="1684389779649"></p><p>此处重点是B&#x2F;C体系结构和JavaFX运用练习，为方便开发，公交路线数据静态写入后端，未建立数据库，且仅运用TCP网络通讯简单传输，未加密。</p><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><h5 id="BusStop类（数据类）"><a href="#BusStop类（数据类）" class="headerlink" title="BusStop类（数据类）"></a>BusStop类（数据类）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-comment">//公交站台</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusStop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    String stopName;<br>    <span class="hljs-type">int</span> stop_x;<br>    <span class="hljs-type">int</span> stop_y;<br><br>    BusStop(String stopName,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>        <span class="hljs-built_in">this</span>.stopName=stopName;<br>        <span class="hljs-built_in">this</span>.stop_x=x;<br>        <span class="hljs-built_in">this</span>.stop_y=y;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="BusPath类（数据类）"><a href="#BusPath类（数据类）" class="headerlink" title="BusPath类（数据类）"></a>BusPath类（数据类）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">//公交路线</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusPath</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    String busName;<br>    List&lt;BusStop&gt; busStops;<br>    BusPath(String busName)&#123;<br>        <span class="hljs-built_in">this</span>.busName=busName;<br>        <span class="hljs-built_in">this</span>.busStops=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br>    <span class="hljs-comment">//添加沿途公交站</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBuStops</span><span class="hljs-params">(String stopName,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br>        BusStop busStop=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BusStop</span>(stopName,x,y);<br>        <span class="hljs-built_in">this</span>.busStops.add(busStop);<br>    &#125;<br><br>    <span class="hljs-comment">//输出线路沿途公交站</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(busName+<span class="hljs-string">&quot;：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (BusStop busStop : busStops) &#123;<br>            System.out.println(busStop.stopName);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="TCPClient类（网络通讯类）"><a href="#TCPClient类（网络通讯类）" class="headerlink" title="TCPClient类（网络通讯类）"></a>TCPClient类（网络通讯类）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPClient</span> &#123;<br>    List&lt;BusPath&gt; busPaths;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">con</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9001</span>);<br>            <span class="hljs-comment">//向服务端请求数据</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            <span class="hljs-comment">//从缓冲区获取数据</span><br>            busPaths= (List&lt;BusPath&gt;) in.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;连接不到本地端口&quot;</span>);<br>            System.exit(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;无法连接到本地端口的I/O&quot;</span>);<br>            System.exit(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (socket != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    socket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    System.err.println(<span class="hljs-string">&quot;无法关闭TCP&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="App类（客户端UI类）"><a href="#App类（客户端UI类）" class="headerlink" title="App类（客户端UI类）"></a>App类（客户端UI类）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> javafx.animation.AnimationTimer;<br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.geometry.Insets;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.canvas.*;<br><span class="hljs-keyword">import</span> javafx.scene.control.Label;<br><span class="hljs-keyword">import</span> javafx.scene.layout.*;<br><span class="hljs-keyword">import</span> javafx.scene.paint.Color;<br><span class="hljs-keyword">import</span> javafx.scene.text.Font;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-type">int</span> mapScale=<span class="hljs-number">70</span>;<span class="hljs-comment">//地图比例尺</span><br>    <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(<span class="hljs-number">500</span>, <span class="hljs-number">400</span>);<span class="hljs-comment">//路线画布</span><br>    <span class="hljs-type">GraphicsContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> canvas.getGraphicsContext2D();<span class="hljs-comment">//画布2d绘画工具</span><br>    <span class="hljs-type">int</span> bus_115=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前115公交位置</span><br>    <span class="hljs-type">VBox</span> <span class="hljs-variable">guideBoard115</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();<span class="hljs-comment">//115路牌</span><br>    <span class="hljs-type">int</span> bus_24=<span class="hljs-number">3</span>;<span class="hljs-comment">//当前24公交位置</span><br>    <span class="hljs-type">VBox</span> <span class="hljs-variable">guideBoard24</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();<span class="hljs-comment">//24路牌</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage stage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        TCPClient tcpClient=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPClient</span>();<br>        tcpClient.con();<br><br>        <span class="hljs-comment">//画地图</span><br><span class="hljs-comment">//        paintMap();</span><br>        <span class="hljs-comment">//画公交站</span><br>        painPath(tcpClient.busPaths);<br>        <span class="hljs-comment">//制作公交站牌</span><br>        guideBoard(tcpClient.busPaths);<br>        <span class="hljs-comment">//循环计算115、24位置</span><br>        Thread115(tcpClient.busPaths.get(<span class="hljs-number">0</span>).busStops.size());<br>        Thread24(tcpClient.busPaths.get(<span class="hljs-number">1</span>).busStops.size());<br>        <span class="hljs-comment">//提供的刷新画布的类</span><br>        <span class="hljs-type">AnimationTimer</span> <span class="hljs-variable">animationTimer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnimationTimer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">long</span> l)</span> &#123;<br>                <span class="hljs-comment">//画前清除</span><br>                context.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">500</span>,<span class="hljs-number">400</span>);<br>                <span class="hljs-comment">//画公交站</span><br>                painPath(tcpClient.busPaths);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//开启刷新</span><br>        animationTimer.start();<br>        <span class="hljs-comment">//根节点</span><br>        HBox root=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        <span class="hljs-comment">//添加公交路线画布</span><br>        root.getChildren().add(canvas);<br>        <span class="hljs-comment">//添加公交站牌</span><br>        root.getChildren().add(guideBoard115);<br>        root.getChildren().add(guideBoard24);<br><br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root, <span class="hljs-number">800</span>, <span class="hljs-number">500</span>);<br><span class="hljs-comment">//        //敲击键盘事件，场景</span><br><span class="hljs-comment">//        scene.setOnKeyPressed(e -&gt; &#123;</span><br><span class="hljs-comment">//            KeyCode keyCode = e.getCode();</span><br><span class="hljs-comment">//            switch (keyCode) &#123;</span><br><span class="hljs-comment">//                case UP:</span><br><span class="hljs-comment">//                    ry = ry - 10;</span><br><span class="hljs-comment">//                    System.out.println(ry);</span><br><span class="hljs-comment">//                    break;</span><br><span class="hljs-comment">//                case DOWN:</span><br><span class="hljs-comment">//                    ry = ry + 10;</span><br><span class="hljs-comment">//                    System.out.println(ry);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">////            context.drawImage(r,rx,ry);</span><br><span class="hljs-comment">//        &#125;);</span><br>        stage.setTitle(<span class="hljs-string">&quot;公交管理中心&quot;</span>);<br>        stage.setScene(scene);<br>        stage.show();<br>    &#125;<br><br>    <span class="hljs-comment">//画格子</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">paintMap</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>            context.strokeLine(mapScale, mapScale*i, <span class="hljs-number">500</span>, mapScale*i);<br>            context.strokeLine(mapScale*i, mapScale, mapScale*i, <span class="hljs-number">500</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//画公交路线</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">painPath</span><span class="hljs-params">(List&lt;BusPath&gt; busPaths)</span>&#123;<br>        <span class="hljs-comment">//第1条路线</span><br>        BusPath busPath=busPaths.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//每条公交站</span><br>        context.setStroke(Color.RED);<span class="hljs-comment">//红色</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;busPath.busStops.size();i++)&#123;<br>                BusStop busStop=busPath.busStops.get(i);<br>                <span class="hljs-comment">// 圆站点</span><br>                context.strokeOval(mapScale*busStop.stop_x-<span class="hljs-number">10</span>, mapScale* busStop.stop_y-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>*<span class="hljs-number">2</span> , <span class="hljs-number">10</span>*<span class="hljs-number">2</span>);<br>                context.setFill(Color.RED);<br>                context.fillText(busStop.stopName, mapScale*busStop.stop_x, mapScale*busStop.stop_y+<span class="hljs-number">10</span>);<br>                <span class="hljs-comment">//画路线</span><br>                <span class="hljs-keyword">if</span> (i&lt;busPath.busStops.size()-<span class="hljs-number">1</span>)&#123;<br>                    BusStop nextBusStop=busPath.busStops.get(i+<span class="hljs-number">1</span>);<br>                    context.strokeLine(mapScale*busStop.stop_x, mapScale* busStop.stop_y ,mapScale*nextBusStop.stop_x, mapScale* nextBusStop.stop_y);<br>                &#125;<br>            &#125;<br>        <span class="hljs-comment">//填充图形表示115实时位置</span><br>        BusStop fill_115=busPaths.get(<span class="hljs-number">0</span>).busStops.get(bus_115);<br>        context.fillOval(mapScale*fill_115.stop_x-<span class="hljs-number">10</span>, mapScale*fill_115.stop_y-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>*<span class="hljs-number">2</span> , <span class="hljs-number">10</span>*<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//第2条路线</span><br>        busPath=busPaths.get(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//每条公交站</span><br>        context.setStroke(Color.GREEN);<span class="hljs-comment">//绿色</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;busPath.busStops.size();i++)&#123;<br>            BusStop busStop=busPath.busStops.get(i);<br>            <span class="hljs-comment">// 方站点</span><br>            context.strokeRect(mapScale*busStop.stop_x-<span class="hljs-number">10</span>, mapScale* busStop.stop_y-<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>            context.setFill(Color.GREEN);<br>            context.fillText(busStop.stopName, mapScale*busStop.stop_x, mapScale*busStop.stop_y-<span class="hljs-number">10</span>);<br>            <span class="hljs-comment">//画路线</span><br>            <span class="hljs-keyword">if</span> (i&lt;busPath.busStops.size()-<span class="hljs-number">1</span>)&#123;<br>                BusStop nextBusStop=busPath.busStops.get(i+<span class="hljs-number">1</span>);<br>                context.strokeLine(mapScale*busStop.stop_x, mapScale* busStop.stop_y ,mapScale*nextBusStop.stop_x, mapScale* nextBusStop.stop_y);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//填充图形表示24实时位置</span><br>        BusStop fill_24=busPaths.get(<span class="hljs-number">1</span>).busStops.get(bus_24);<br>        context.fillRect(mapScale*fill_24.stop_x-<span class="hljs-number">10</span>, mapScale* fill_24.stop_y-<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//路牌</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">guideBoard</span><span class="hljs-params">(List&lt;BusPath&gt; busPaths)</span>&#123;<br>        <span class="hljs-comment">//115路牌规格</span><br>        guideBoard115.setPadding(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Insets</span>(<span class="hljs-number">10</span>));<br>        guideBoard115.setSpacing(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 创建一个标题标签</span><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">title155</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;115公交牌&quot;</span>);<br>        title155.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-number">24</span>));<br>        BusPath busPath=busPaths.get(<span class="hljs-number">0</span>);<br>        guideBoard115.getChildren().add(title155);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;busPath.busStops.size();i++)&#123;<br>            BusStop busStop=busPath.busStops.get(i);<br>            <span class="hljs-comment">// 创建站名标签和站点编号标签</span><br>            <span class="hljs-type">Label</span> <span class="hljs-variable">nameLable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;○：&quot;</span>+busStop.stopName);<br>            <span class="hljs-comment">// 将标签添加到垂直布局中</span><br>            guideBoard115.getChildren().add( nameLable);<br>        &#125;<br><br>        <span class="hljs-comment">//24路牌规格</span><br>        guideBoard24.setPadding(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Insets</span>(<span class="hljs-number">10</span>));<br>        guideBoard24.setSpacing(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 创建一个标题标签</span><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">title24</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;24公交牌&quot;</span>);<br>        title24.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-number">24</span>));<br>        busPath=busPaths.get(<span class="hljs-number">1</span>);<br>        guideBoard24.getChildren().add(title24);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;busPath.busStops.size();i++)&#123;<br>            BusStop busStop=busPath.busStops.get(i);<br>            <span class="hljs-comment">// 创建站名标签和站点编号标签</span><br>            <span class="hljs-type">Label</span> <span class="hljs-variable">nameLable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;▢：&quot;</span>+busStop.stopName);<br>            <span class="hljs-comment">// 将标签添加到垂直布局中</span><br>            guideBoard24.getChildren().add( nameLable);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Thread115</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-comment">//公交车随机速度</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">v115</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> + <span class="hljs-number">20</span> * Math.random(); <span class="hljs-comment">// 115随机车速</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//循环计算115位置</span><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-type">int</span> s= (<span class="hljs-type">int</span>) (mapScale/v115)*<span class="hljs-number">1000</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(s);<br>                        bus_115=(bus_115+<span class="hljs-number">1</span>)%num;<br>                        <span class="hljs-comment">//每次随机速度</span><br>                        v115 = <span class="hljs-number">10</span> + <span class="hljs-number">20</span> * Math.random();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        thread.start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Thread24</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-comment">//公交车随机速度</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">v24</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> + <span class="hljs-number">20</span> * Math.random(); <span class="hljs-comment">// 24随机车速</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//循环计算115位置</span><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-type">int</span> s= (<span class="hljs-type">int</span>) (mapScale/v24)*<span class="hljs-number">1000</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(s);<br>                        bus_24=(bus_24+<span class="hljs-number">1</span>)%num;<br>                        <span class="hljs-comment">//每次随机速度</span><br>                        v24 = <span class="hljs-number">10</span> + <span class="hljs-number">20</span> * Math.random(); <span class="hljs-comment">// 24随机车速</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        thread.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="Main类（主类、人口类）"><a href="#Main类（主类、人口类）" class="headerlink" title="Main类（主类、人口类）"></a>Main类（主类、人口类）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        App.main(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><h5 id="数据类同客户端"><a href="#数据类同客户端" class="headerlink" title="数据类同客户端"></a>数据类同客户端</h5><h5 id="Main类（主类、入口类）"><a href="#Main类（主类、入口类）" class="headerlink" title="Main类（主类、入口类）"></a>Main类（主类、入口类）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        BusPath path_115=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BusPath</span>(<span class="hljs-string">&quot;115路公交线&quot;</span>);<br>        path_115.addBuStops(<span class="hljs-string">&quot;公交起始站&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        path_115.addBuStops(<span class="hljs-string">&quot;兮湖&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        path_115.addBuStops(<span class="hljs-string">&quot;北路&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>        path_115.addBuStops(<span class="hljs-string">&quot;万象城&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br>        path_115.addBuStops(<span class="hljs-string">&quot;市政中心&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>        path_115.addBuStops(<span class="hljs-string">&quot;火车站&quot;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>);<br>        path_115.addBuStops(<span class="hljs-string">&quot;公交终点站&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>);<br><br>        BusPath path_24=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BusPath</span>(<span class="hljs-string">&quot;24路公交线&quot;</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;公交起始站&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;鹿路&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;中央西道&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;中央大道&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;市政中心&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;中央东道&quot;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;火车站&quot;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>);<br>        path_24.addBuStops(<span class="hljs-string">&quot;公交终点站&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>);<br><br>        List&lt;BusPath&gt; busPaths=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        busPaths.add(path_115);<br>        busPaths.add(path_24);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9001</span>);<br>            System.out.println(<span class="hljs-string">&quot;服务端监听端口中...&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;无法监听端口&quot;</span>);<br>            System.exit(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">clientSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                clientSocket = serverSocket.accept();<br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(clientSocket.getOutputStream());<br>                out.writeObject(busPaths);<br>                out.flush();<br>                System.out.println(<span class="hljs-string">&quot;向客户端发送：&quot;</span>+<span class="hljs-string">&quot;115和24路线&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                System.err.println(<span class="hljs-string">&quot;发送失败&quot;</span>);<br>                System.exit(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (clientSocket != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        clientSocket.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        System.err.println(<span class="hljs-string">&quot;无法关闭TCP连接&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaFX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaFX-2-纠错笔记</title>
    <link href="/2023/05/08/javaFX-2-%E7%BA%A0%E9%94%99%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/08/javaFX-2-%E7%BA%A0%E9%94%99%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="JDK-17-Maven-JavaFX-13"><a href="#JDK-17-Maven-JavaFX-13" class="headerlink" title="JDK_17+Maven +JavaFX_13"></a>JDK_17+Maven +JavaFX_13</h3><h4 id="构建项目，启动时"><a href="#构建项目，启动时" class="headerlink" title="构建项目，启动时"></a>构建项目，启动时</h4><h5 id="缺少-JavaFX-运行时组件-需要使用该组件来运行此应用程序"><a href="#缺少-JavaFX-运行时组件-需要使用该组件来运行此应用程序" class="headerlink" title="缺少 JavaFX 运行时组件, 需要使用该组件来运行此应用程序"></a>缺少 JavaFX 运行时组件, 需要使用该组件来运行此应用程序</h5><blockquote><p>解决方法：在启动类内写的JavaFX代码不能直接运行，需要在Java下创建继承自Application的App类，创建启动方法，在Main类下启动运行App类内的启动方法：</p><p>App类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage stage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       Parent root;<br>        <span class="hljs-comment">//省略创建根节点，创建子节点，加入根节点</span><br>        <br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br><br>        stage.setTitle(<span class="hljs-string">&quot;Login&quot;</span>);<br>        stage.setScene(scene);<br>        stage.show();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Main类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        App.main(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="Location-is-required-读取不到fxml路径-，成功读取后警告"><a href="#Location-is-required-读取不到fxml路径-，成功读取后警告" class="headerlink" title="Location is required(读取不到fxml路径)，成功读取后警告"></a>Location is required(读取不到fxml路径)，成功读取后警告</h5><blockquote><p>解决方法：在Maven项目中，fxml文件得放置在java目录下的resources资源目录下才能被读取</p><p>读取方式：</p><p><code>Parent root = FXMLLoader.load(getClass().getResource(&quot;/root1.fxml&quot;));</code></p><p>其中<code>&quot;/root1.fxml&quot;</code>是相对resources资源目录的相对路径</p><p>获取资源(某文件&#x2F;文件夹)路径通用方式：</p><p><code>String basePath=getClass().getResource(&quot;/img/direction&quot;).toExternalForm();</code></p><p>其中<code>&quot;/img/direction&quot;</code>是相对resources资源目录的相对路径，既resources目录下img目录下的direction文件夹路径</p><p>成功读取后小插曲： Loading FXML document with JavaFX API of version 13 by JavaFX runtime of version 10 </p><p>原因： 简单来说是maven配置的javafx版本和fxml文件声明的版本不一致</p><p>解决：</p><p>将fxml文件中<code>xmlns=&quot;http://javafx.com/javafx/10</code></p><p>修改为<code>xmlns=&quot;http://javafx.com/javafx/13</code>和maven配置的javafx版本一致</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>JavaFX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaFX</title>
    <link href="/2023/05/07/JavaFX-1-%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/05/07/JavaFX-1-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><blockquote><ol><li><p>舞台</p><p>应用的窗口</p></li><li><p>幕布</p><p>窗口中的内容，可以放置树形结构的节点</p></li><li><p>组件</p><p>内容中放置的节点，比如按钮、图片、文本框等</p></li></ol><p>三层结构</p><p><em>注意</em>：在Java11之后，javafx不在jdk中，需要单独下载或者用maven项目引入。引入时参考文章： <a href="https://www.cnblogs.com/tomato190/articles/12353426.html">用maven创建javafx项目 解决“错误: 缺少 JavaFX 运行时组件, 需要使用该组件来运行此应用程序” - 小甲点点 - 博客园 (cnblogs.com)</a> </p></blockquote><h4 id="stage-舞台"><a href="#stage-舞台" class="headerlink" title="stage(舞台)"></a>stage(舞台)</h4><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setTitle</span><span class="hljs-params">(String title)</span></span>：设置窗口标题。<br><br><span class="hljs-function"><span class="hljs-title">setWidth</span><span class="hljs-params">(double width)</span></span> 和 <span class="hljs-built_in">setHeight</span>(double <span class="hljs-attribute">height</span>)：设置窗口的宽度和高度。<br><br><span class="hljs-function"><span class="hljs-title">setResizable</span><span class="hljs-params">(boolean resizable)</span></span>：设置窗口是否可以调整大小。<br><br><span class="hljs-function"><span class="hljs-title">setFullScreen</span><span class="hljs-params">(boolean value)</span></span>：设置窗口是否全屏显示。<br><br><span class="hljs-function"><span class="hljs-title">setIconified</span><span class="hljs-params">(boolean value)</span></span>：最小化窗口。<br><br><span class="hljs-function"><span class="hljs-title">centerOnScreen</span><span class="hljs-params">()</span></span>：将窗口居中显示在屏幕上。<br><br><span class="hljs-function"><span class="hljs-title">initStyle</span><span class="hljs-params">(StageStyle style)</span></span>：设置窗口的样式。<br><br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">()</span></span>：显示窗口。<br><br><span class="hljs-function"><span class="hljs-title">close</span><span class="hljs-params">()</span></span>：关闭窗口。<br><br><span class="hljs-function"><span class="hljs-title">setScene</span><span class="hljs-params">(Scene scene)</span></span>：设置窗口的场景。<br><br><span class="hljs-function"><span class="hljs-title">setOnCloseRequest</span><span class="hljs-params">(EventHandler&lt;WindowEvent&gt; eventHandler)</span></span>：设置窗口关闭时的事件处理程序。<br><br><span class="hljs-attribute">icon</span>:设置图标<br>x,y:设置窗口出现坐标<br></code></pre></td></tr></table></figure><h5 id="stage样式"><a href="#stage样式" class="headerlink" title="stage样式"></a>stage样式</h5><p>用<code>stage.initStyle(StageStyle.DECORATED);</code>设置舞台样式，参数包含</p><blockquote><ol><li>StageStyle.Decorated：默认的舞台样式，包含标题栏和窗口边框。</li><li>StageStyle.Undecorated：没有标题栏和窗口边框的简单舞台样式，可以自定义舞台的外观和行为</li><li>StageStyle.Transparent：透明舞台样式，不包含背景和装饰，可以用于创建特殊效果。</li><li>StageStyle.Unified：在Mac OS X上可用的专有舞台样式，与操作系统的主题风格相匹配，具有平滑过渡效果。</li></ol></blockquote><h5 id="stage模态"><a href="#stage模态" class="headerlink" title="stage模态"></a>stage模态</h5><p> 在JavaFX中，<code>Stage</code>的模态性定义了该窗口的行为方式。简单来说，它控制了是否允许用户与应用程序的其他部分进行交互，确保该窗口总是处于前台</p><p>可以使用<code>stage.initModality(Modality.APPLICATION_MODAL);</code>来设置模态性，共有下面四种模态性：</p><blockquote><ol><li><code>Modality.NONE</code>：默认值。该<code>Stage</code>不是模态的，允许用户与应用程序的其他部分进行交互。</li><li><code>Modality.WINDOW_MODAL</code>：窗口模态，用户只可以和该窗口以及父窗口进行交互，不能与其及其父级窗口之外的应用程序部分进行交互。用户必须首先关闭<code>Stage</code>，才能转到应用程序的其他部分。</li><li><code>Modality.APPLICATION_MODAL</code>：应用程序模态，用户只可以和该窗口进行交互，完全阻止与应用程序的所有部分进行交互，除非<code>Stage</code>被关闭。通常用于显示对话框和警告框。</li><li><code>Modality.TOOLKIT_MODAL</code>：工具包模态的，阻止用户与整个操作系统的其他部分进行交互。通常在希望在应用程序之上显示屏幕保护程序或任务管理器时使用。</li></ol></blockquote><h5 id="常用窗口事件"><a href="#常用窗口事件" class="headerlink" title="常用窗口事件"></a>常用窗口事件</h5><p>Stage类提供很多窗口事件，这些事件处理窗口的打开、关闭、最小化和最大化等操作，以下是一些常用的窗口事件：</p><blockquote><ol><li>setOnCloseRequest：关闭窗口时触发的事件。</li><li>setOnHiding：隐藏窗口时触发的事件。</li><li>setOnHidden：窗口被完全隐藏时触发的事件。</li><li>setOnShowing：窗口显示时触发的事件。</li><li>setOnShown：窗口完全显示时触发的事件。</li><li>setOnMinimized：窗口最小化时触发的事件。</li><li>setOnMaximized：窗口最大化时触发的事件。</li></ol></blockquote><p>这些事件可以通过添加回调函数来处理相应的窗口事件。例如，可以用setOnCloseRequest方法添加一个回调函数，在用户点击关闭按钮或使用快捷键Alt+F4关闭窗口时调用回调函数进行想要的操作。</p><h4 id="Scene-场景"><a href="#Scene-场景" class="headerlink" title="Scene(场景)"></a>Scene(场景)</h4><p>放置在舞台上的场景，舞台通过切换场景来切换不同UI内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个场景</span><br> <span class="hljs-type">BorderPane</span> <span class="hljs-variable">root2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderPane</span>();<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">label</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;This is Scene 2&quot;</span>);<br>        root2.setCenter(label);<br>        scene2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root2, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br></code></pre></td></tr></table></figure><p>可以该在场景内改变鼠标光标图案：</p><p>通过<code> scene.setCursor(new ImageCursor(new Image(&quot;custom-cursor.png&quot;))); 来自定义鼠标光标图案</code> </p><h4 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node(节点)"></a>Node(节点)</h4><p>是一个不可实例化的抽象类，所以具体的控件都继承自Node</p><p>节点分为Parent和UI控件</p><h5 id="Parent（布局或容器）"><a href="#Parent（布局或容器）" class="headerlink" title="Parent（布局或容器）"></a>Parent（布局或容器）</h5><ol><li><p>布局类，方便获得所需的布局，主要按照特定方式排列节点（例如水平或垂直）。布局类通常被用来实现包含多个控件的表单、工具栏、菜单等简单的UI组件。</p><ul><li>常见布局：</li></ul><blockquote><ol><li>Pane ：基本容器，用 setPrefWidth() 和 setPrefHeight() 方法来设置宽度和高度。</li><li>VBox和HBox：分别代表垂直和水平方向。将所有子节点顺序排列在一个单行或单列中，可以通过设置对齐方式来调整子节点的位置。</li><li>BorderPane：基于边框的布局类，可以放置位于布局的顶部、底部、左侧、右侧和中心的五个子节点。使用BorderPane时，中心节点通常会伸填充剩余的空间，而其他节点保持原始大小。</li><li>GridPane：网格布局类，子节点可以按行和列进行组织。每子节点占据一个或多个单元格，可以设置单元格间的间隔和对齐方式。</li><li>FlowPane：流式布局类，子节点按照添加的顺序流动。当子节点所在的一行或一列中无法容纳时，将自动换行。可以设置每个子节点之间的间距和对齐方式。</li><li>StackPane：堆叠布局类，所有子节点都在相同的空间内层叠。最后添加的子节点在最上面，可以用偏移量来控制每个子节点的位置。</li></ol></blockquote></li><li><p>容器类，通常用于更复杂的UI场景，例如实现有多层次布局结构的应用程序。容器类提供比布局类更高级的功能，如允许子节点重叠、放置在不同的层、滚动等，还可以与其他UI组件（如菜单、对话框等）结合使用，实现更丰富和复杂的用户界面。</p><ul><li><p>常见容器：</p><blockquote><ol><li>ScrollPane：ScrollPane：带滚动条的容器，子元素太多或者超出容器边界时可以滚动查看内容，可以设置滚动条的样式和位置。</li><li>SplitPane：SplitPane：可以将场景分成两个或多个可调整大小的部分，通过拖拽分隔条来调整各部分大小，可以包含其他容器或控件，可以垂直或水平分割。</li><li>AnchorPane：AnchorPane：锚点布局的容器，可以用 setAnchor() 方法设置子元素相对于容器四个角的距离。适合子元素紧贴在容器四周的情况。</li></ol></blockquote></li></ul></li><li><p>属性和常用方法</p><blockquote><ol><li>children 属性：获取该容器中所有的子元素节点，通过 <code>getChildren()</code> 方法来获取。</li><li>layoutX 和 layoutY 属性：表示该节点在父容器中的 X、Y 坐标。它们可以通过 <code>setLayoutX(double x)</code> 和 <code>setLayoutY(double y)</code> 方法进行设置。</li><li>prefWidth 和 prefHeight 属性：表示该节点的首选宽度和高度。它们可以通过 <code>setPrefWidth(double width)</code> 和 <code>setPrefHeight(double height)</code> 方法进行设置。</li><li>minWidth 和 minHeight 属性：表示该节点的最小宽度和高度。它们可以通过 <code>setMinWidth(double width)</code> 和 <code>setMinHeight(double height)</code> 方法进行设置。</li><li>maxWidth 和 maxHeight 属性：表示该节点的最大宽度和高度。它们可以通过 <code>setMaxWidth(double width)</code> 和 <code>setMaxHeight(double height)</code> 方法进行设置。<ol><li><code>setSpacing(double value)</code>：设置子节点之间的间距。</li><li><code>setPadding(Insets insets)</code>：设置布局区域的内边距。</li><li><code>getChildren()</code>：获取该布局容器中的子节点集合。</li><li><code>setAlignment(Pos value)</code>：设置子节点的对齐方式。</li><li><code>setPrefSize(double width, double height)</code>：设置布局容器的首选宽度和高度。</li><li><code>setMaxSize(double width, double height)</code>：设置布局容器的最大宽度和高度。</li><li><code>setMinSize(double width, double height)</code>：设置布局容器的最小宽度和高度。</li><li><code>getPrefWidth()</code>和<code>getPrefHeight()</code>：获取布局容器的首选宽度和高度。</li><li><code>setStyle(String style)</code>：设置布局容器的CSS样式。</li><li><code>setLayoutX(double value)</code>和<code>setLayoutY(double value)</code>：设置布局容器在其父容器中的坐标位置。</li></ol></li></ol></blockquote></li></ol><h5 id="UI控件"><a href="#UI控件" class="headerlink" title="UI控件"></a>UI控件</h5><ol><li><p>类型：</p><blockquote><p>1.<br>   Button（按钮）：用于触发事件或执行操作。</p><ol start="2"><li>Label（标签）：用于显示文本。</li><li>TextField（文本框）：用于接收用户输入的文本。</li><li>PasswordField（密码框）：与TextField类似，但输入内容会被隐藏。</li><li>TextArea（文本域）：用于接收多行文本输入。</li><li>CheckBox（复选框）：用于允许用户选择多个选项。</li><li>RadioButton（单选按钮）：用于允许用户从多个选项中选择一个。</li><li>ToggleButton（切换按钮）：可以像开关一样切换状态的按钮。</li><li>ComboBox（组合框）：允许用户从下拉列表中选择一个选项。</li><li>ListView（列表视图）：显示列表数据和元素。</li><li>TreeView（树形视图）：显示树形结构的数据和元素。</li><li>TableView（表格视图）：以表格形式显示数据。</li></ol></blockquote></li><li><p>常用UI控件的属性和方法：</p></li></ol><blockquote><ol><li>layoutX和layoutY：表示节点在父容器中的布局位置。可以通过setLayoutX和setLayoutY方法来设置。</li><li>translateX和translateY：表示节点相对于布局位置的偏移量。可以通过</li><li>setTranslateX和setTranslateY方法来设置。（可以添加线程使其动态偏移）</li><li>minWidth、minHeight、prefWidth、prefHeight、maxWidth和maxHeight：分别表示节点的最小、首选和最大宽度和高度。可以通过相应的get和set方法进行设置和获取。</li><li>opacity：表示节点的透明度，范围为0到1之间。可以通过setOpacity方法进行设置。</li><li>visible：表示节点是否可见。可以通过setVisible方法进行设置。</li><li>managed：表示节点是否受布局管理器控制。默认情况下，所有节点都受布局管理器控制，但是可以通过setManaged方法将某个节点设置为不受控制状态。</li><li>id：表示节点的唯一标识符。可以通过setId和getId方法进行设置和获取。</li><li>style：表示节点的CSS样式。可以通过setStyle方法进行设置。</li><li>getChildren()：返回节点的子节点列表。可以通过addChild和removeChild方法来添加或删除子节点。</li><li>getBoundsInParent()和getBoundsInLocal()：分别返回节点在父容器坐标系和本地坐标系中的边界框。</li></ol></blockquote><h4 id="UI控件属性绑定和监听"><a href="#UI控件属性绑定和监听" class="headerlink" title="UI控件属性绑定和监听"></a>UI控件属性绑定和监听</h4><p>UI控件属性绑定和监听通过ProPerty接口实现，UI中的属性的类型不是我们平常Java中的数据类型int、double、boolean等，而是实现了Property接口的数据类型，以实现UI属性的绑定和监听。</p><p>实现了ProPerty的UI控件属性有下面一些方法：</p><blockquote><ol><li><p>bind()方法：用于建立单向绑定关系。</p><p><code>void bind(ObservableValue&lt;? extends T&gt; observable);</code></p></li><li><p>addBidirectionalBinding()方法：用于建立双向绑定关系。</p><p><code>void addBidirectionalBinding(Property&lt;T&gt; other);</code></p></li><li><p>unbind()方法：用于解除属性的绑定关系。</p><p><code>void unbind();</code></p></li><li><p>isBound()方法：用于检查属性是否被绑定。</p><p><code>boolean isBound();</code></p></li><li><p>addListener()方法：用于向属性添加一个ChangeListener，当属性的值发生变化时会调用ChangeListener的changed()方法。（也就是监听）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">(ChangeListener&lt;? <span class="hljs-built_in">super</span> T&gt; listener)</span>;<br><br><span class="hljs-comment">//使用：</span><br>UI控件.某属性.addListener( <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;()&#123;<br><span class="hljs-comment">//监听到变化后需要执行的操作</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>removeListener()方法：用于从属性中移除一个ChangeListener。</p><p><code>void removeListener(ChangeListener&lt;? super T&gt; listener);</code></p></li><li><p>asObject()方法：将属性转换为一个ObservableValue对象。</p><p><code>ObservableValue&lt;T&gt; asObject();</code></p></li></ol></blockquote><h4 id="事件启动编程"><a href="#事件启动编程" class="headerlink" title="事件启动编程"></a>事件启动编程</h4><p>事件源：事件后需要作用的控件</p><p>事件处理器：触发事件后，交由其处理，完成后续操作</p><p>事件：发生的事件</p><ul><li>通用事件：一般为鼠标、键盘等操作等</li><li>功能性事件：UI的功能事件，如按钮的点击、单选多选的选择、滚轮等</li></ul><p>一个文本框读取拖拽文件路径的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路：</span><br><span class="hljs-comment">            创建一个文本框 TextField，设置为只读。</span><br><span class="hljs-comment">            给文本框添加拖拽事件监听器 setOnDragOver 和 setOnDragDropped，响应用户将文件拖拽到文本框的操作。</span><br><span class="hljs-comment">            在 setOnDragOver 中，如果拖拽进来的是文件，就允许将文件放置到文本框中。</span><br><span class="hljs-comment">            在 setOnDragDropped 中，首先获取所有拖拽进来的文件列表，然后取出第一个文件，将其路径设置为文本框的内容。</span><br><span class="hljs-comment">            最后，将创建的文本框加入一个 VBox 容器中，并将该容器作为根节点，创建一个 Scene 对象。将 Scene 对象设置到舞台上并显示出来。</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">// 创建一个文本框</span><br>        <span class="hljs-type">TextField</span> <span class="hljs-variable">textField</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextField</span>();<br>        <span class="hljs-comment">// 设置文本框为只读</span><br>        textField.setEditable(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 文本框拖拽事件发生时，检查拖拽的对象是否是文件，并将接受的事件类型设置为 COPY_OR_MOVE</span><br>        textField.setOnDragOver((DragEvent event) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (event.getGestureSource() != textField &amp;&amp; event.getDragboard().hasFiles()) &#123;<br>                <span class="hljs-comment">// 允许放置</span><br>                event.acceptTransferModes(TransferMode.COPY_OR_MOVE);<br>            &#125;<br>            event.consume();<br>        &#125;);<br><br>        <span class="hljs-comment">// 文本框拖拽事件结束时，获取拖拽板中的第一个文件路径，并将其显示在文本框中</span><br>        textField.setOnDragDropped((DragEvent event) -&gt; &#123;<br>            <span class="hljs-type">Dragboard</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> event.getDragboard();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (db.hasFiles()) &#123;<br>                <span class="hljs-comment">// 获取所有拖拽进来的文件列表</span><br>                List&lt;File&gt; files = db.getFiles();<br>                <span class="hljs-comment">// 获取第一个文件的路径</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> files.get(<span class="hljs-number">0</span>).getPath();<br>                <span class="hljs-comment">// 将文件路径设置为文本框的内容</span><br>                textField.setText(filePath);<br>                success = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">// 拖拽完成</span><br>            event.setDropCompleted(success);<br><br>            event.consume();<br>        &#125;);<br><br>        <span class="hljs-type">VBox</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();<br>        root.getChildren().add(textField);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root, <span class="hljs-number">300</span>, <span class="hljs-number">250</span>);<br><br>        stage.setTitle(<span class="hljs-string">&quot;Drag And Drop Example&quot;</span>);<br>        stage.setScene(scene);<br>        stage.show();<br></code></pre></td></tr></table></figure><h4 id="颜色、主题、图片等"><a href="#颜色、主题、图片等" class="headerlink" title="颜色、主题、图片等"></a>颜色、主题、图片等</h4><h5 id="颜色Color"><a href="#颜色Color" class="headerlink" title="颜色Color"></a>颜色Color</h5><p> <code>Color(red,green,blue,透明度);</code>分量范围0-255</p><p><code>Color.rgb(red,green,blue);</code></p><p><code>Color.web(&quot;#ADD8E6&quot;);</code>#开头的十六进制参数，代表红绿蓝三个分量</p><h5 id="字体Font"><a href="#字体Font" class="headerlink" title="字体Font"></a>字体Font</h5><p>可以直接引用系统自带字体，也可以下载字体到工程目录再引用</p><p>示例，引用系统某字体<code>Font.font(&quot;系统字体&quot;, FontWeight.BOLD,大小)</code> FontWeight.BOLD参数为粗体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">AnchorPane root=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        Label label=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;JavaFX，你好！&quot;</span>);<br>        label.setFont(Font.font(<span class="hljs-string">&quot;华文隶属 常规&quot;</span>, FontWeight.BOLD,<span class="hljs-number">30</span>));<br><br>        root.getChildren().add(label);<br>        Scene scene=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        stage.setScene(scene);<br>        stage.show();<br></code></pre></td></tr></table></figure><p>一些常用属性和方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个新的字体对象</span><br>        <span class="hljs-type">Font</span> <span class="hljs-variable">font</span> <span class="hljs-operator">=</span> Font.font(<span class="hljs-string">&quot;Arial&quot;</span>, FontWeight.BOLD, FontPosture.REGULAR, <span class="hljs-number">16</span>);<br><br>        <span class="hljs-comment">// 获取字体属性</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fontFamily</span> <span class="hljs-operator">=</span> font.getFamily();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">fontSize</span> <span class="hljs-operator">=</span> font.getSize();<br>        <span class="hljs-type">FontWeight</span> <span class="hljs-variable">fontWeight</span> <span class="hljs-operator">=</span> font.getWeight();<br>        <span class="hljs-type">FontPosture</span> <span class="hljs-variable">fontPosture</span> <span class="hljs-operator">=</span> font.getPosture();<br><br>        <span class="hljs-comment">// 输出字体属性</span><br>        System.out.println(<span class="hljs-string">&quot;Font Family: &quot;</span> + fontFamily);<br>        System.out.println(<span class="hljs-string">&quot;Font Size: &quot;</span> + fontSize);<br>        System.out.println(<span class="hljs-string">&quot;Font Weight: &quot;</span> + fontWeight);<br>        System.out.println(<span class="hljs-string">&quot;Font Posture: &quot;</span> + fontPosture);<br><br>        <span class="hljs-comment">// 获取字符串宽度和高度</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">strWidth</span> <span class="hljs-operator">=</span> font.width(str);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">strHeight</span> <span class="hljs-operator">=</span> font.height(str);<br><br>        <span class="hljs-comment">// 输出字符串宽度和高度</span><br>        System.out.println(<span class="hljs-string">&quot;String Width: &quot;</span> + strWidth);<br>        System.out.println(<span class="hljs-string">&quot;String Height: &quot;</span> + strHeight);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="图片Image"><a href="#图片Image" class="headerlink" title="图片Image"></a>图片Image</h5><p>支持格式：BMP GIF JPEG PNG</p><p>图片放置在ImageView中展示</p><h4 id="FXML-布局文件的使用"><a href="#FXML-布局文件的使用" class="headerlink" title="FXML 布局文件的使用"></a>FXML 布局文件的使用</h4><h5 id="运用："><a href="#运用：" class="headerlink" title="运用："></a>运用：</h5><ul><li><p>fxml布局文件</p></li><li><p>controll控制器</p></li><li><p>启动类java代码</p></li></ul><p>很好的将视图、控制器、Java代码分离，更好做维护等，并且可以使用javaFX官网的Scene Builder以可视化自动生成布局的xml文件</p><p>一个登录界面的示例：</p><ol><li><p>创建fxml文件，内容可以用Scence Buider生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br><br>&lt;?<span class="hljs-keyword">import</span> javafx.scene.control.*?&gt;<br>&lt;?<span class="hljs-keyword">import</span> javafx.scene.layout.*?&gt;<br><br>&lt;BorderPane maxHeight=<span class="hljs-string">&quot;-Infinity&quot;</span> maxWidth=<span class="hljs-string">&quot;-Infinity&quot;</span><br>            minHeight=<span class="hljs-string">&quot;-Infinity&quot;</span> minWidth=<span class="hljs-string">&quot;-Infinity&quot;</span><br>            prefHeight=<span class="hljs-string">&quot;400.0&quot;</span> prefWidth=<span class="hljs-string">&quot;600.0&quot;</span><br>            xmlns=<span class="hljs-string">&quot;http://javafx.com/javafx/13.0.0&quot;</span> xmlns:fx=<span class="hljs-string">&quot;http://javafx.com/fxml/1&quot;</span><br>            fx:controller=<span class="hljs-string">&quot;org.example.controller.LoginController&quot;</span>&gt;<br>    &lt;center&gt;<br>        &lt;VBox alignment=<span class="hljs-string">&quot;CENTER&quot;</span> spacing=<span class="hljs-string">&quot;20.0&quot;</span>&gt;<br>            &lt;Label text=<span class="hljs-string">&quot;Welcome to My App!&quot;</span> /&gt;<br>            &lt;Separator /&gt;<br>            &lt;VBox alignment=<span class="hljs-string">&quot;CENTER_LEFT&quot;</span> spacing=<span class="hljs-string">&quot;10.0&quot;</span>&gt;<br>                &lt;Label text=<span class="hljs-string">&quot;Username:&quot;</span> /&gt;<br>                &lt;TextField fx:id=<span class="hljs-string">&quot;usernameField&quot;</span> /&gt;<br>                &lt;Label fx:id=<span class="hljs-string">&quot;usernameHint&quot;</span> text=<span class="hljs-string">&quot;账户不存在&quot;</span> visible=<span class="hljs-string">&quot;false&quot;</span> opacity=<span class="hljs-string">&quot;0.5&quot;</span>/&gt;<br>                &lt;Label text=<span class="hljs-string">&quot;Password:&quot;</span> /&gt;<br>                &lt;PasswordField fx:id=<span class="hljs-string">&quot;passwordField&quot;</span> /&gt;<br>                &lt;Label fx:id=<span class="hljs-string">&quot;PasswordHint&quot;</span> text=<span class="hljs-string">&quot;密码错误&quot;</span> visible=<span class="hljs-string">&quot;false&quot;</span> opacity=<span class="hljs-string">&quot;0.5&quot;</span>/&gt;<br>                &lt;Button fx:id=<span class="hljs-string">&quot;loginButton&quot;</span> text=<span class="hljs-string">&quot;Login&quot;</span> onAction=<span class="hljs-string">&quot;#handleLogin&quot;</span>/&gt;<br>            &lt;/VBox&gt;<br>        &lt;/VBox&gt;<br>    &lt;/center&gt;<br>&lt;/BorderPane&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>创建视图控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.fxml.FXML;<br><span class="hljs-keyword">import</span> javafx.scene.control.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">private</span> TextField usernameField;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">private</span> PasswordField passwordField;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">private</span> Button loginButton;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">private</span> Label usernameHint;<br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">private</span> Label passwordHint;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLogin</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> usernameField.getText();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordField.getText();<br><br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>)) &#123;<br>            <span class="hljs-comment">// Credentials are valid, do something here</span><br>            System.out.println(<span class="hljs-string">&quot;假装登录，连接后端登录服务&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;账户密码错误&quot;</span>);<br>            usernameHint.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//初始化函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//用于数据初始化，在上面@FXMLvoid handleLogin之后加载，可以覆盖按钮绑定等</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建JavaFX启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.fxml.FXMLLoader;<br><span class="hljs-keyword">import</span> javafx.scene.Parent;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage stage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">this</span>.stage=stage;<br>        <span class="hljs-type">Parent</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> FXMLLoader.load(getClass().getResource(<span class="hljs-string">&quot;/vo/Login.fxml&quot;</span>));<br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br><br>        stage.setTitle(<span class="hljs-string">&quot;Login&quot;</span>);<br>        stage.setScene(scene);<br>        stage.show();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>在Main中启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        App.main(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="在Applicatin中操作controll控制器"><a href="#在Applicatin中操作controll控制器" class="headerlink" title="在Applicatin中操作controll控制器"></a>在Applicatin中操作controll控制器</h5><p>可以通过FXMLloader对象拿到fxml对应的控制器，从而控制控制器中的UI控件</p><p><strong>注意：</strong> 控制器获取必须在new Scene(loadFXML(“fxml”))之后，即加载fxml文件之后还要还要创建场景，创建完场景才可以把控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">FXMLLoader fxmlLoader=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FXMLLoader</span>();<br>fxmlLoader.setLocation(getClass().getResource(<span class="hljs-string">&quot;/vo/Login.fxml&quot;</span>));<br>Control control=fxmlLoader.getController();<br></code></pre></td></tr></table></figure><h5 id="Platform-run-gt-方法"><a href="#Platform-run-gt-方法" class="headerlink" title="Platform.run(()-&gt;{})方法"></a>Platform.run(()-&gt;{})方法</h5><p>用于更新JavaFX的布局，因为JavaFX不允许在start方法中多线程，所以使用Platform.run(()-&gt;{})方法</p><p><em>注：</em>我在JavaFX13的start中测试可以用按钮点击事件启动线程，对上面不允许多线程的说法存疑。</p><h4 id="Canvas画布"><a href="#Canvas画布" class="headerlink" title="Canvas画布"></a>Canvas画布</h4><h5 id="属性和基本方法"><a href="#属性和基本方法" class="headerlink" title="属性和基本方法"></a>属性和基本方法</h5><blockquote><p>width和height属性：Canvas画布的宽度和高度，可以使用setWidth()和setHeight()方法进行设置。<br>graphicsContext2D属性：Canvas画布的GraphicsContext对象，用于绘制图形、文本等。<br>setOnMouseClicked()、setOnMouseDragged()等事件处理方法：Canvas画布可以响应鼠标事件，通过这些方法可以添加事件处理程序来实现交互效果。<br>setFill()、setStroke()等方法：设置填充颜色和轮廓颜色。<br>clearRect()方法：清除指定矩形区域的内容。<br>fillRect()、strokeRect()等方法：绘制矩形，并填充或描边。<br>moveTo()、lineTo()、quadraticCurveTo()等路径方法：用于绘制路径。<br>setFont()、fillText()等文本方法：设置字体样式和内容，并绘制文本。</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br><span class="hljs-type">GraphicsContext</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> canvas.getGraphicsContext2D();<br>gc.setFill(Color.GREEN);<br>gc.setStroke(Color.BLUE);<br>gc.fillRect(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>gc.strokeRect(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>gc.setFill(Color.RED);<br>gc.fillOval(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>gc.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;Arial&quot;</span>, <span class="hljs-number">20</span>));<br>gc.fillText(<span class="hljs-string">&quot;Hello, World!&quot;</span>, <span class="hljs-number">150</span>, <span class="hljs-number">150</span>);<br>canvas.setOnMouseClicked(e -&gt; &#123;<br>    gc.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.getWidth(), canvas.getHeight());<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="快照的应用"><a href="#快照的应用" class="headerlink" title="快照的应用"></a>快照的应用</h5><blockquote><ol><li>使用<code>Scene</code>对象的<code>snapshot</code>方法保存<code>Node</code>或<code>Parent</code>的快照。例如：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Copy</span> CodeWritableImage <span class="hljs-keyword">snapshot</span> = scene.<span class="hljs-keyword">snapshot</span>(<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>这将创建一个包含场景快照的 <code>WritableImage</code> 对象。</p><ol start="2"><li>创建一个新的 <code>ImageView</code> 对象来显示该快照。例如：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Copy</span> CodeImageView imageView = <span class="hljs-built_in">new</span> ImageView(<span class="hljs-keyword">snapshot</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>将 <code>ImageView</code> 添加到 <code>Parent</code> 容器中。例如：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Copy</span> CodeparentContainer.getChildren().<span class="hljs-keyword">add</span>(imageView);<br></code></pre></td></tr></table></figure><p>这样可以将快照添加到场景中，以图片的形式显示出来,还可以结合画布，在画布中画出快照</p><ol start="4"><li>如果需要在之后再次绘制该快照，只需将 <code>ImageView</code> 从容器中移除即可。例如：</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Copy <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CodeparentContainer</span>.</span></span>get<span class="hljs-constructor">Children()</span>.remove(imageView);<br></code></pre></td></tr></table></figure></blockquote><h5 id="AnimationTimer类，刷新画布"><a href="#AnimationTimer类，刷新画布" class="headerlink" title="AnimationTimer类，刷新画布"></a>AnimationTimer类，刷新画布</h5><p>内置handle()方法，用于每次画布更新时调用</p><p>a.start开启刷新</p><p>示例：按键盘重画素材实现角色移动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-type">double</span> rx=<span class="hljs-number">250</span>; <span class="hljs-type">double</span> ry=<span class="hljs-number">250</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage stage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Canvas canvas=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        GraphicsContext context= canvas.getGraphicsContext2D();<br><br>        Image r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-string">&quot;/img/1.png&quot;</span>);<br><br>        context.strokeLine(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        context.drawImage(r,rx,ry);<br><br>        <span class="hljs-comment">//提供的刷新画布的类</span><br>        AnimationTimer animationTimer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnimationTimer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">long</span> l)</span> &#123;<br>                context.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>                context.drawImage(r,rx,ry);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//开启刷新</span><br>        animationTimer.start();<br><br>        AnchorPane parent=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        parent.getChildren().add(canvas);<br><br>        Scene scene=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(parent,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        <span class="hljs-comment">//敲击键盘事件，场景</span><br>        scene.setOnKeyPressed(e-&gt;&#123;<br>            KeyCode keyCode=e.getCode();<br>            <span class="hljs-keyword">switch</span> (keyCode)&#123;<br>                <span class="hljs-keyword">case</span> UP :<br>                    ry=ry-<span class="hljs-number">10</span>;<br>                    System.out.println(ry);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> DOWN:<br>                    ry=ry+<span class="hljs-number">10</span>;<br>                    System.out.println(ry);<br>            &#125;<br><span class="hljs-comment">//            context.drawImage(r,rx,ry);</span><br>        &#125;);<br>        stage.setScene(scene);<br>        stage.show();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaFX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven-1-基础</title>
    <link href="/2023/05/04/Maven-1-%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/05/04/Maven-1-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="Maven-简介"><a href="#Maven-简介" class="headerlink" title="Maven 简介"></a>Maven 简介</h3><h5 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h5><p>蓝色部分是Mave，一个项目管理工具。</p><p>将项目视作对象来管理，并赋予构建生命周期，在生命周期的不同阶段通过插件来完成不同的事，有些插件会产生产物。</p><p>管理项目的依赖资源，可以配置仓库路径来下载、拉取、更新等操作来管理依赖。</p><p><img src="/..%5Cpostot%5C23-05-04-1.png" alt="1665027727152"></p><h5 id="解决了什么"><a href="#解决了什么" class="headerlink" title="解决了什么"></a>解决了什么</h5><p>统一了Java项目的目录结构；</p><p>方便了项目的编写、编译、测试、打包等</p><p>解决了jar包冲突等问题；</p><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载地址： <a href="https://maven.apache.org/download.cgi">Maven – Download Apache Maven</a> </p><p>点击<code>Download</code> 在<code>Link</code>一列中选择Window版下载，解压既可</p><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h3 id="创建Maven项目！"><a href="#创建Maven项目！" class="headerlink" title="创建Maven项目！"></a>创建Maven项目！</h3><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h3 id="生命周期和插件"><a href="#生命周期和插件" class="headerlink" title="生命周期和插件"></a>生命周期和插件</h3>]]></content>
    
    
    
    <tags>
      
      <tag>JavaMaven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记</title>
    <link href="/2023/04/29/Linux%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/29/Linux%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="Linux-概述"><a href="#Linux-概述" class="headerlink" title="Linux 概述"></a>Linux 概述</h4><h5 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h5><p>给Linux系统提供主要内容，如硬件调度管理能力</p><p>Linux内核是免费开源的，任何人都可以查看和修改内核源码</p><h5 id="Linux系统发行版"><a href="#Linux系统发行版" class="headerlink" title="Linux系统发行版"></a>Linux系统发行版</h5><p>在内核之上封装系统级应用程序，组合起来就称为Linux发行版，比较常用的linux发行版有：ubunty、CentOS</p><h5 id="图形化和命令行的操作"><a href="#图形化和命令行的操作" class="headerlink" title="图形化和命令行的操作"></a>图形化和命令行的操作</h5><p>操作系统一般提供图形化和命令行形式来操作电脑，在window中图形化是主流，在Linux系统中命令行是主流，所以学习Linux操作系统以命令行方式为主</p><p>Linux操作系统以命令行为主是因为，在该操作系统中命令行形式更稳定，且占用资源更少。</p><h5 id="使用Linux系统的方式——虚拟机"><a href="#使用Linux系统的方式——虚拟机" class="headerlink" title="使用Linux系统的方式——虚拟机"></a>使用Linux系统的方式——虚拟机</h5><p>虚拟机：</p><p>通过虚拟计算机硬件，再给虚拟的硬件装上操作系统，就得到了一台虚拟的电脑，称为虚拟机。</p><p>因为在Linux系统中很多日常学习和工作难以完成，所以采用虚拟机在保持原操作系统的基础上可以体验Linux操作系统</p><ol><li>VMware Workstation：</li></ol><p>安装完成后，检查虚拟网卡是否存在VMnet1和VMnet8，保证虚拟机可以上网（没有就卸载重装）。</p><ol start="2"><li>下载Linux操作系统：</li></ol><p>选择下载CentOS-7-x86-DVD.ios</p><ol start="3"><li>在VMware中创建新的虚拟机：</li></ol><p>选择典型（简单），找到下载的Linux系统光盘镜像</p><p><strong>拓展</strong>：WSL（Windows Subsystem for Linux）：</p><p>windows10新特性，用于Windows系统之上的Linux子系统，可以在Windows系统中获得Linux系统环境，并直连接计算机硬件，连接的是真实的计算机硬件。（比虚拟机更方便且性能更高）</p><ol><li>在windows10计算机中开启适用Windows的Linux子系统功能</li><li>windows应用商店中安装Ubuntu</li><li>打开Ubuntu软件，输入用户名创建一个用户，输入两次密码确认后可以得到一个Ubuntu的Linux操作系统环境</li><li>Windows Terminal是微软提供的，更方便操作WSL下Linux的软件，可以在windo应用商店中下载。</li></ol><h5 id="远程连接Linux操作系统的电脑"><a href="#远程连接Linux操作系统的电脑" class="headerlink" title="远程连接Linux操作系统的电脑"></a>远程连接Linux操作系统的电脑</h5><p>我们是在window计算机中创建虚拟机操作Linxu计算机，一般是在window计算机中下载一些文件发送到Linxu操作系统中，所以涉及到window计算机到Linux计算机间文件传输等跨越，所以我们需要一个连接window计算机和Linux计算机的桥梁。可以选择FinalShell、Xshell等软件远程连接Linux计算机。</p><p>简单来说，VMware Workstation让我们相当于拥有了Linux计算机。FinalShell、Xshell等软件让我们可以远程连接操作我们的Linux计算机，比通过虚拟机操作Linux计算机方便。</p><h5 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h5><p>快照保存当下Linux系统中的状态，可以理解为游戏的存档。用于任何时候将当前的Linux系统恢复到快照时的状态</p><p>在VMware Workstation中可以自己制作某时刻Linux系统的快照</p><h4 id="Linux命令行"><a href="#Linux命令行" class="headerlink" title="Linux命令行"></a>Linux命令行</h4><h5 id="了解目录结构"><a href="#了解目录结构" class="headerlink" title="了解目录结构"></a>了解目录结构</h5><p>根目录 <code>/</code>，下面挂着一些子目录</p><ul><li><code>/bin</code>: 存放基本的命令，如ls、cp等。</li><li><code>/boot</code>: 存放启动Linux时使用的核心文件和引导程序。</li><li><code>/dev</code>: 存放设备文件，如键盘、鼠标等。</li><li><code>/etc</code>: 存放系统配置文件。</li><li><code>/home</code>: 存放用户主目录。</li><li><code>/lib</code>: 存放共享库文件（相当于Windows中的DLL）。</li><li><code>/mnt</code>: 用于挂载临时文件系统或其他设备。</li><li><code>/opt</code>: 存放大型第三方软件包。</li><li><code>/proc</code>: 存放进程相关信息。</li><li><code>/root</code>: 超级用户 root 的主目录。</li><li><code>/sbin</code>: 存放系统管理员使用的命令，如shutdown、reboot等。</li><li><code>/tmp</code>: 存放临时文件。</li><li><code>/usr</code>: 存放用户安装软件的地方，其中 <code>/usr/bin</code> 存放二进制文件， <code>/usr/lib</code> 存放共享库文件。</li><li><code>/var</code>: 存放系统日志和状态文件。</li></ul><p>和windos操作系统的不同：</p><ol><li>windos有盘符<code>C:</code>、<code>D:</code>这样的，相当于多颗树</li></ol><p>Linux没有盘符，以<code>/</code>为根目录，只有一棵树</p><ol start="2"><li>windos用<code>\</code>分割层级结构，Linux用<code>/</code>分割层级结构</li></ol><p>例如：windos：<code>C:file\1.txt</code>，Linux：<code>/file/1.txt</code></p><h5 id="路径："><a href="#路径：" class="headerlink" title="路径："></a>路径：</h5><p>假设现在在HOME目录下（<code>/hmoe/user</code>），要打开该目录下的<code>Desktop</code>目录</p><p>绝对路径：<code>cd /hmoe/user/Desktop</code></p><p>相对路径：<code>cd Desktop</code></p><p>一些特殊路径符：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-string">&quot;/&quot;</span> 根目录：Linux文件系统的最高层次。<br><br><span class="hljs-string">&quot;~&quot;</span> HOME目录：当前用户的主目录。<br><br><span class="hljs-string">&quot;.&quot;</span> 当前目录：<span class="hljs-string">&quot;./file.txt&quot;</span>表示当前目录下的<span class="hljs-built_in">file</span>.txt文件。<br><br><span class="hljs-string">&quot;..&quot;</span> 上级目录：<span class="hljs-string">&quot;../file.txt&quot;</span>表示上级目录中的<span class="hljs-built_in">file</span>.txt文件。<br><br><span class="hljs-string">&quot;*&quot;</span> 通配符：表示任意字符，常用于搜索或匹配文件名。<br><br><span class="hljs-string">&quot;?&quot;</span> 单个字符通配符：表示匹配单个字符，也常用于搜索或匹配文件名。<br><br><span class="hljs-string">&quot;-&quot;</span> 上一个工作目录：用于快速返回上一个工作目录，相当于<span class="hljs-string">&quot;cd -&quot;</span>命令。<br><br><span class="hljs-string">&quot;变量名&quot;</span> 变量引用：用于在命令行中引用变量值，例如<span class="hljs-string">&quot;HOME&quot;</span>表示当前用户的主目录。<br><br><span class="hljs-string">&quot;!&quot;</span> 感叹号：用于执行历史命令，<span class="hljs-string">&quot;!ls&quot;</span>表示执行最近使用的以<span class="hljs-string">&quot;ls&quot;</span>开头的命令。<br></code></pre></td></tr></table></figure><h5 id="命令行、命令"><a href="#命令行、命令" class="headerlink" title="命令行、命令"></a>命令行、命令</h5><p>命令行：既Linux终端，用于输入Linux命令</p><p>命令：既Linux的可执行程序</p><p>Linux命令的通用格式通常如下：</p><p><code>command [options] [arguments]</code></p><p><code>command</code> 表示要执行的命令名称</p><p><code>options</code> 是可选的命令选项，用于修改命令行为</p><p><code>arguments</code> 是传递给命令的参数，用于指定具体操作对象或操作方式。</p><p>例：<code>ls -l /home/itheima</code></p><p><code>ls</code> 是要执行的命令，<code>-l</code> 是一个选项，用于告诉 <code>ls</code> 显示详细的列表信息，而没有指定 <code>arguments</code> 参数表示操作的是&#x2F;home&#x2F;itheima目录内的内容（没有 <code>arguments</code> 参数默认操作当前目录）</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs prolog">ls：<br>平铺形式列出当前工作目录下的内容（当前工作目录：启动命令行时，终端默认加载当前登录用户的<span class="hljs-symbol">Home</span>目录：/home/[用户名]）<br>ls [-a -l -h] [路径]:<br>-a(all)：全部目录（包括隐藏文件，既“.文件名”）<br>-l(list)：显示横向平铺变成纵向列表，并多了权限、用户组、创建时间、大小等更详细的信息<br>-h：必须和l一起使用，显示文件大小（带上单位kb、mb、gb）<br><br>cd [路径]：<br>切换[路径]目录，不带[linux路径]则回到<span class="hljs-symbol">HOME</span>目录<br><br>pwd：<br>打印当前工作目录（print work directory），一般用于查看当前工作目录，无参数<br><br>mkdir -p [路径]：<br>创建新目录（make directory）<br>-p（可选项），可以创建多层级的目录<br>[路径]（必填），可以用相对/绝对/特殊路径符<br><br>touch [路径]:<br>创建文件<br>[路径]（必填）<br><br>cat [路径]：<br>查看文件内容<br><br>more [路径]:<br>分页查看文件内容，空格翻页，p退出查看<br><br>cp [-r] [路径<span class="hljs-number">1</span>] [路径<span class="hljs-number">2</span>]：<br>复制[路径<span class="hljs-number">1</span>]路径的文件\文件夹到[路径<span class="hljs-number">2</span>]路径下并重命名<br>-r（可选项）:复制文件夹时使用，表示递归 <br><br>mv [路径<span class="hljs-number">1</span>] [路径<span class="hljs-number">2</span>]：<br>移动/重命 [路径<span class="hljs-number">1</span>]下的文件/目录 到[路径<span class="hljs-number">2</span>]；也可以用来改名操作<br><br>rm [-r -f] [路径<span class="hljs-number">1</span> 路径<span class="hljs-number">2</span> 路径<span class="hljs-number">3</span> ...]：<br>删除文件或目录（remove）<br>-r:删除文件夹时使用<br>-f:强制删除（不会弹出确认信息）<br>多路径：路径之间用空格隔开（更方便的方法可以通配符*等批量删除）<br><br>which [要查找的命令]：<br>我们输入的指令都是一个个二进制程序，可以用该命令查找到命令程序文件在哪里<br><br>find [起始路径] -name [被查找文件名]：<br>find [起始路径] -size [+|-nkMG]：<br>查找指定文件<br>[起始路径]：表示从哪里开始查找<br>-name：以文件名形式查找<br>[被查找文件名]：可以用通配符模糊匹配<br>-size:以大小形式查找<br>[+|-nkMG]：-表示小于，+表示大于，n是数字，kMG表示kb、<span class="hljs-symbol">Mb</span>、<span class="hljs-symbol">Gb</span>单位<br><br>grep [-n] [关键字] [路径]：<br>过滤查找文件中的关键字符串<br>[-n]（可选）：在结果中显示匹配的行号<br>[关键字]：如果包含空格等，建议养成习惯用<span class="hljs-string">&quot;&quot;</span>包裹<br>[路径]：文件路径，要过滤的文件，可作为内容输入端口<br><br>wc [-l -w -c -m] [路径]：<br>统计文件，选项什么都不加则显示行数、单词数、字节数<br>-l：统计行数<br>-w：统计单词数<br>-c：统计bytes数<br>-m：统计字符数<br>[路径]：文件路径，被统计的文件，可作为内容输入端口<br><br>echo [输出内容]：<br>相当于print函数，在终端输出内容，建议养成习惯，输出的内容用<span class="hljs-string">&quot;&quot;</span>包裹<br>注：可以用<span class="hljs-string">&#x27;&#x27;</span>包裹命令，结果打印命令执行的结果，如：echo <span class="hljs-string">&#x27;pwd&#x27;</span>，打印了工作目录和pwd命令效果一样<br><br>tail [-f -num] [路径]：<br>查看文件末尾num行<br>-f：持续跟踪对文件的修改<br>-num：显示最后num行<br><br><br>top：显示当前系统的进程信息<br><br>ps：显示当前用户的进程信息<br><br>kill：终止指定进程<br><br>chmod：修改文件或目录的权限<br><br>chown：修改文件或目录的所有者<br><br>ping：测试网络连接<br><br>ifconfig：显示网络接口配置信息<br><br>ssh：远程登录到另一个计算机<br><br>scp：将文件从本地计算机复制到远程计算机（或相反）<br><br>tar：打包和压缩文件和目录<br></code></pre></td></tr></table></figure><h5 id="一些-命令符"><a href="#一些-命令符" class="headerlink" title="一些 命令符"></a>一些 命令符</h5><ol><li>管道符：|</li></ol><p>命令1 | 命令2，将命令1的结果做命令2的输入使用，可以嵌套</p><p>将&#x2F;user&#x2F;blog文件按列显示，结果交给 wc统计行数；</p><p>效果：统计blog文件夹下的文件数</p><p><code>ls -l /user/blog | wc -l</code></p><p>在1.text中过滤带”name”的行，过滤的结果再交给grep过滤带”BuMingSuooYi”的行，再交给wc统计行数；</p><p>效果：统计1.txt中有多少行同时带有”name”和”BuMingSuooYi’’关键字</p><p><code>grep &quot;name&quot; 1.txt | grep &quot;BuMingSuooYi&quot; | wc -l</code></p><ol start="2"><li>重定向符：&gt;和&gt;&gt;</li></ol><p><code>echo &quot;hello&quot; &gt; 1.txt</code>，表示将echo打印的”hello”覆盖写入到1.txt文件内</p><p><code>ls -l / &gt;&gt; 1.txt</code>，表示将&#x2F;根目录下的文件名追加写入到1.txt文件内</p><ol start="3"><li>反引号’’</li></ol><p>用<code>&#39;&#39;</code>包裹的内容会当作命令来执行，如：echo ‘pwd’，打印了工作目录和pwd命令效果一样，而不是打印“pwd”字符串</p><h5 id="Linux自带文本编辑器-vi或vim"><a href="#Linux自带文本编辑器-vi或vim" class="headerlink" title="Linux自带文本编辑器 vi或vim"></a>Linux自带文本编辑器 vi或vim</h5><p>vim是vi的加强版，是为便于文本编辑的Linux系统自带软件，通过vi或vim命令指定文件打开</p><p><img src="/..%5Cpostot%5C23-04-29-1.png" alt="1665027727152"></p><p>命令模式下一些快捷键</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">i</span>：进入插入模式<br>:：进入底线命令模式<br><span class="hljs-selector-tag">esc</span>：从插入模式返回到命令模式<br><span class="hljs-selector-tag">w</span>：保存当前文件<br><span class="hljs-selector-tag">q</span>：退出<span class="hljs-selector-tag">vim</span>编辑器<br><span class="hljs-selector-tag">q</span>!：强制退出<span class="hljs-selector-tag">vim</span>编辑器，不保存修改过的文件<br><span class="hljs-selector-tag">yy</span>：复制当前行<br><span class="hljs-selector-tag">p</span>：粘贴已经复制的内容<br><span class="hljs-selector-tag">dd</span>：删除当前行<br>/搜索内容：向下查找指定内容<br>?搜索内容：向上查找指定内容<br><span class="hljs-selector-tag">s</span>/旧字串/新字串/<span class="hljs-selector-tag">g</span>：替换当前行中所有出现的旧字串为新字串<br><span class="hljs-selector-tag">gg</span>：跳到文件开头<br><span class="hljs-selector-tag">G</span>：跳到文件末尾<br><span class="hljs-selector-tag">set</span> <span class="hljs-selector-tag">nu</span>：显示行号<br><span class="hljs-selector-tag">set</span> <span class="hljs-selector-tag">nonu</span>：取消显示行号<br></code></pre></td></tr></table></figure><h4 id="Liunx用户"><a href="#Liunx用户" class="headerlink" title="Liunx用户"></a>Liunx用户</h4><h5 id="超级用户root与普通用户"><a href="#超级用户root与普通用户" class="headerlink" title="超级用户root与普通用户"></a>超级用户root与普通用户</h5><p>超级用户root拥有所有权限，可以自由切换到普通用户</p><p>普通用户只在自己的home目录下有全部用户，切换到root用户需要密码</p><ol><li><p>创建用户</p><p><code>useradd [-g -d] [用户名]</code></p><p>-g：指定用户的组，不指定则默认创建和用户名同名的组并加入</p><p>-d：指定用户HOME目录。不指定则默认在：&#x2F;home&#x2F;用户名</p><p><code>passwd [用户名]</code></p><p>修改用户密码</p></li><li><p>删除用户</p><p><code>userdel [-r] 用户名</code></p><p>-r：删除用户HOME目录，不使用-r则只删除用户，HOME目录保留</p></li><li><p>切换用户</p><p>可以用<code>su - [用户名]</code>来切换用户，其中<code>-</code>为选项，表示同时加载用户的环境变量，建议都带上</p></li><li><p>临时root权限</p><p>普通用户可以使用<code>sudo 其它命令</code>来临时获取超级用户root的权限，但是需要root用户执行visudo命令，在最后添加普通用户有sudo命令权限。</p><p>例：</p><p><code>visudo</code>打开sudo配置文件进行配置</p><p>在最后添加<code>[用户名] ALL=(ALL)     NOPASSWD:ALL</code></p></li></ol><h5 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h5><ol><li><p>查看用户所属组<code>id [用户名]</code> </p></li><li><p>将用户加入组</p><p><code>usermod -aG [用户组] [用户名]</code></p><p>注：一个用户可以有多个组</p></li><li><p>创建用户组<code>groupadd 用户组名</code></p></li><li><p>删除用户组<code>groupdel 用户组名</code></p></li><li><p>查看全部用户<code>getent passwd</code></p><p>查出的信息分别是：</p><p>用户名:密码(x):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash)</p><p>例如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">www:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/home/www</span><span class="hljs-symbol">:/sbin/nologin</span><br></code></pre></td></tr></table></figure></li><li><p>查看全部组<code>getent group</code></p><p>查出的信息分别是：</p><p>组名称:组认证(x):组ID</p></li></ol><h5 id="查看权限控制信息"><a href="#查看权限控制信息" class="headerlink" title="查看权限控制信息"></a>查看权限控制信息</h5><ol><li><p><code>ll - al</code>可以列出权限信息，下面以部分根目录为例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lrwxrwxrwx</span>.   <span class="hljs-number">1</span> root root     <span class="hljs-number">7</span> Sep <span class="hljs-number">14</span>  <span class="hljs-number">2020</span> bin -&gt; usr/bin<br><span class="hljs-attribute">dr</span>-xr-xr-x.   <span class="hljs-number">5</span> root root  <span class="hljs-number">4096</span> Nov <span class="hljs-number">30</span>  <span class="hljs-number">2021</span> boot<br><span class="hljs-attribute">drwxr</span>-xr-x   <span class="hljs-number">19</span> root root  <span class="hljs-number">3000</span> Apr <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">56</span> dev<br><span class="hljs-attribute">drwxr</span>-xr-x.  <span class="hljs-number">80</span> root root  <span class="hljs-number">4096</span> Apr <span class="hljs-number">29</span> <span class="hljs-number">17</span>:<span class="hljs-number">07</span> etc<br><span class="hljs-attribute">drwxr</span>-xr-x.   <span class="hljs-number">3</span> root root  <span class="hljs-number">4096</span> Apr <span class="hljs-number">30</span> <span class="hljs-number">15</span>:<span class="hljs-number">48</span> home<br><span class="hljs-attribute">lrwxrwxrwx</span>.   <span class="hljs-number">1</span> root root     <span class="hljs-number">7</span> Sep <span class="hljs-number">14</span>  <span class="hljs-number">2020</span> lib -&gt; usr/lib<br><span class="hljs-attribute">lrwxrwxrwx</span>.   <span class="hljs-number">1</span> root root     <span class="hljs-number">9</span> Sep <span class="hljs-number">14</span>  <span class="hljs-number">2020</span> lib64 -&gt; usr/lib64<br><span class="hljs-attribute">drwx</span>------.   <span class="hljs-number">2</span> root root <span class="hljs-number">16384</span> Sep <span class="hljs-number">14</span>  <span class="hljs-number">2020</span> lost+found<br><span class="hljs-attribute">drwxr</span>-xr-x.   <span class="hljs-number">2</span> root root  <span class="hljs-number">4096</span> Apr <span class="hljs-number">11</span>  <span class="hljs-number">2018</span> media<br><span class="hljs-attribute">drwxr</span>-xr-x.   <span class="hljs-number">2</span> root root  <span class="hljs-number">4096</span> Apr <span class="hljs-number">11</span>  <span class="hljs-number">2018</span> mnt<br><span class="hljs-attribute">drwxr</span>-xr-x.   <span class="hljs-number">3</span> root root  <span class="hljs-number">4096</span> Apr <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">56</span> opt<br><span class="hljs-attribute">drwxr</span>-xr-x    <span class="hljs-number">2</span> root root  <span class="hljs-number">4096</span> Apr <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">23</span> patch<br><span class="hljs-attribute">dr</span>-xr-xr-x  <span class="hljs-number">105</span> root root     <span class="hljs-number">0</span> Apr <span class="hljs-number">27</span> <span class="hljs-number">23</span>:<span class="hljs-number">06</span> proc<br><span class="hljs-attribute">dr</span>-xr-x---.   <span class="hljs-number">6</span> root root  <span class="hljs-number">4096</span> Apr <span class="hljs-number">30</span> <span class="hljs-number">14</span>:<span class="hljs-number">55</span> root<br></code></pre></td></tr></table></figure></li><li><p>第一部分10位，分别表示：</p><p>文件类型(1)    所属用户权限(3)    组权限(3)    其它用户权限(3)</p><p>文件类型：l软链接、d文件夹、-文件</p><p>权限：3位按rwx顺序-表示没有对应的权限；r可读、w可写、x可执行(cd进入、执行该文件程序等)</p></li><li><p>第二部分3个词，分别表示：</p><p>不知道    所属用户    所属用户组</p></li></ol><h5 id="修改文件权限信息"><a href="#修改文件权限信息" class="headerlink" title="修改文件权限信息"></a>修改文件权限信息</h5><ol><li><p>修改第一部分 权限</p><p>注：只有文件所属用户和root用户可以修改该文件权限</p><p><code>chmod [-R] [权限] [路径]</code></p><p>-R：注意大写，用于文件夹，指对文件夹内所有内容应用相同操作</p><p>[权限] ：如用<code>u=rwx,g=rx,o=x</code>表示rwxr-x–x</p><p>[权限]：也能简写用数字表示，如用<code>751</code>表示rwxr-x–x（按二进制记忆）</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">0</span>：<span class="hljs-comment">---</span><br><span class="hljs-number">1</span>：<span class="hljs-comment">--x</span><br><span class="hljs-number">2</span>：-w-<br><span class="hljs-number">3</span>：-wx<br><span class="hljs-number">4</span>：r<span class="hljs-comment">--</span><br>略<br></code></pre></td></tr></table></figure></li><li><p>修改第二部分 所属用户、组</p><p>注：只有root用户可以修改文件所属用户和组，下面命令只适用root用户</p><p><code>chown [-R] [用户名] [:] [用户组] [路径]</code></p><p>将[路径]的文件&#x2F;文件夹修改为所属[用户名]，所属[用户组]</p><p>-R：注意大写，用于文件夹，指对文件夹内所有内容应用相同操作</p><p>上面的<code>[用户名] [:] [用户组]</code>可以组合，如</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery">chown<span class="hljs-built_in"> root</span> <span class="hljs-number">1</span>.txt,将<span class="hljs-number">1</span>.txt所属用户修改<span class="hljs-built_in">为root</span><br>chown :<span class="hljs-built_in"> root</span> <span class="hljs-number">1</span>.txt，将<span class="hljs-number">1</span>.txt所属用户组修改<span class="hljs-built_in">为root</span><br>chown -R<span class="hljs-built_in"> root</span> test，将文件夹test内所属用户修改<span class="hljs-built_in">为root</span>，并对文件夹内全部内容应用同样规则<br></code></pre></td></tr></table></figure></li></ol><h4 id="软件安装等"><a href="#软件安装等" class="headerlink" title="软件安装等"></a>软件安装等</h4><h5 id="各种命令快捷键"><a href="#各种命令快捷键" class="headerlink" title="各种命令快捷键"></a>各种命令快捷键</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> ^ c：强停、退出<br><br><span class="hljs-bullet">2.</span> ^d：退出、登出<br><br><span class="hljs-bullet">3.</span> history：查看历史输入命令<br><br><span class="hljs-bullet">4.</span> ![字母]：执行最近以[字母]开头的命令<br><br><span class="hljs-bullet">5.</span> ^r：输入内容查询历史命令<br><br><span class="hljs-bullet">6.</span> ^a：跳到开头<br><br>   ^e：跳到结尾<br><br>   ^←：左跳一个词<br><br>   ^→：右跳一个词<br><br><span class="hljs-bullet">7.</span> ^l：清屏<br><br>   clear：清屏<br></code></pre></td></tr></table></figure><h5 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h5><ol><li><p>Linux CentOS</p><p> yum是CentOS Linux的包管理器，通过命令行使用，可以自动处理软件包的依赖关系，并从指定的软件仓库中下载和安装软件包，CentOS中的软件包格式一般为.RPM</p><p>用<code>yum [-y] [install|remove|search] [软件名称]</code></p><p>-y：自动确认</p><p>[install]、[remove]、[search]：下载、卸载、搜索</p></li><li><p>Linux Ubuntu</p><p>与yum类似，apt是Ubuntu Linux的包管理器，Advanced Package Tool（高级包工具）的缩写，它可以自动处理软件包的依赖关系，并从指定的软件仓库中下载和安装软件包，Ubuntu中的软件包格式一般为.deb</p><p>用<code>apt [-y] [install|remove|search] [软件名称]</code></p></li></ol><h5 id="开启、关闭服务等"><a href="#开启、关闭服务等" class="headerlink" title="开启、关闭服务等"></a>开启、关闭服务等</h5><p><code>systemctl</code>是Linux系统中的一个命令行实用程序，用于控制和管理systemd系统和服务管理器。它允许用户启动、停止、启用、禁用、重启和查看系统服务和其他单位（如套接字、计时器和设备）的状态。</p><p>对于一部分安装完成会自动注册成服务的软件可以通过<code>systemctl</code>控制启动关闭等，对于没有加入服务的软件，我们可以自己手动注册成服务。</p><p><code>systemctl [start|stop|status|enable|disable] [服务名]</code></p><h5 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h5><p>可以将文件、文件夹链接到其它位置（像快捷方式）</p><p><code>ln -s [被链接文件/夹] [链接的目的]</code></p><p>-s：创建软连接</p><h5 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h5><ol><li><p>显示时间</p><p><code>date [-d] [+格式化字符串]</code></p><p> date命令默认以<code>YYYY-MM-DD HH:MM:SS</code> 的格式显示当前日期和时间 </p><p>-d：按给定字符串显示日期，一般用于日期计算</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">支持的时间标记有：<br><span class="hljs-built_in">year</span>：年<br><span class="hljs-built_in">month</span>：月<br><span class="hljs-built_in">day</span>：天<br><span class="hljs-built_in">hour</span>：小时<br><span class="hljs-built_in">minute</span>：分钟<br><span class="hljs-built_in">second</span>：秒<br>例：<br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 day&quot;</span> <span class="hljs-string">&quot;+%Y/%m/%d&quot;</span><br>表示显示后一天，按年/月/日格式显示<br></code></pre></td></tr></table></figure><p>+格式化字符串：由下面组合</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">Y</span></span>: 四位数的年份（例如：2023）<br><span class="hljs-tag">%<span class="hljs-selector-tag">y</span></span>: 两位数的年份（例如：23）<br><span class="hljs-tag">%<span class="hljs-selector-tag">m</span></span>: 月份（01 到 12）<br><span class="hljs-tag">%<span class="hljs-selector-tag">d</span></span>: 日期（01 到 31）<br><span class="hljs-tag">%<span class="hljs-selector-tag">H</span></span>: 小时（00 到 23）<br><span class="hljs-tag">%<span class="hljs-selector-tag">M</span></span>: 分钟（00 到 59）<br><span class="hljs-tag">%<span class="hljs-selector-tag">S</span></span>: 秒（00 到 60）<br><br>例如，要以 YYYY-MM-DD HH:MM:SS 的格式显示当前日期和时间，可以使用：<br>date &quot;+%Y-%m-%d\ %H:%M:%S&quot;<br>返回类似结果：<br>2023-04-28 12:00:00<br></code></pre></td></tr></table></figure></li><li><p>修改时区</p><p><code>rm -f /etc/localtime</code>删除原来使用的时区文件</p><p><code>ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code>将时区文件中亚洲上海的时区链接到原先使用时区文件的路径</p><p>注：修改时区需要root权限</p></li></ol><h4 id="IP地址、主机名称、域名解析"><a href="#IP地址、主机名称、域名解析" class="headerlink" title="IP地址、主机名称、域名解析"></a>IP地址、主机名称、域名解析</h4><p><code>ifconfig</code>：查看本机ip地址，127.0.0.1，本地回环IP，表示本机</p><p><code>hostname</code>：查看主机名称</p><p><code>hostnamectl set-hostname [主机名]</code>：修改主机名</p><p>域名解析：访问网站都是通过ip地址访问，但ip地址太难记，所以思考一种方法，通过好记的名称(域名)对应(映射)到不好记的ip，而通过域名得到ip这个过程就叫域名解析（域名解析成ip地址）</p><p>域名解析过程：</p><p><img src="/..%5Cpostot%5C23-04-29-2.png" alt="1665027727152"></p><h5 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">`ping <span class="hljs-selector-attr">[-c n]</span> <span class="hljs-selector-attr">[ip|主机名]</span>`<br>测试网络状态，通不通<br>-c n：ping n次，不然默认一直ping<br><br>wget <span class="hljs-selector-attr">[-b]</span> <span class="hljs-selector-attr">[url]</span><br>非交互式的下载，可以下载网络文件<br>-<span class="hljs-selector-tag">b</span>：后台下载<br><br>curl <span class="hljs-selector-attr">[-O]</span> <span class="hljs-selector-attr">[url]</span><br>可以发送http网络请求，可用于下载文件、获取信息等<br>-O：注意大写，用于下载文件，当url是下载链接时，可以用此选项保存文件<br><br></code></pre></td></tr></table></figure><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><ol><li><p>端口分类</p><p>公认端口：1-1023，用于系统内置或常用知名软件绑定使用</p><p>注册端口：1024-49151，用于松散绑定（用户自定义）</p><p>动态端口：49152-65535，用于临时使用（多用于出口）</p></li><li><p>嗅探全部端口</p><p>可以通过<code>nmap [ip地址]</code>嗅探可用端口</p><p>注：<code>nmap</code>不是系统自带，可以通过<code>yum install nmap</code>来下载</p></li></ol><h5 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h5><ol><li><p>查看进程信息</p><p><code>ps [-e -f]</code></p><p>-e：显示所有进程</p><p>-f：格式化展示信息（展示全部信息）</p><p>从左到右分别是：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dos">UID：开启进程的用户ID<br>PID：进程的ID<br>PPID：进程的父进程ID<br>C：进程占用CPU时间的百分比<br>STIME：进程启动的时间<br>TTY：进程所属的终端（tty）<br><span class="hljs-built_in">TIME</span>：进程使用CPU的时间总计<br><span class="hljs-built_in">CMD</span>：进程启动时对应的命令或路径<br></code></pre></td></tr></table></figure><p>可以配合<code>ps -ef | grep &quot;关键字&quot;</code>过滤关键信息</p></li><li><p>关闭进程</p><p><code>kill [-9] [进程id]</code></p><p>-9：强制关闭，不带-9则是通知进程，要求其自己关闭</p></li></ol><h5 id="主机监控"><a href="#主机监控" class="headerlink" title="主机监控"></a>主机监控</h5><p>主要是监控主机各项指标，这部分粗略了解既可</p><ol><li><p>类似任务管理器的命令<code>top</code>，可以查看CPU、内存、进程等信息</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">第一行：top命令名称，当前的系统时间，启动累计时间，用户登录数量，<span class="hljs-number">1</span>，<span class="hljs-number">5</span>，<span class="hljs-number">15</span>分钟负载（<span class="hljs-number">0.09</span>代表<span class="hljs-number">0.09</span>个核）<br><br>第二行：总进程数，运行进程数，睡眠进程数，僵尸进程数<br><br>第三行：<span class="hljs-meta">CPU</span>使用率：us用户<span class="hljs-meta">CPU</span>使用率，sy系统<span class="hljs-meta">CPU</span>使用率，ni高优先级进程占用<span class="hljs-meta">CPU</span>时间%，id空闲<span class="hljs-meta">CPU</span>%，waIO等待<span class="hljs-meta">CPU</span>占用率，hiCPU硬件中断率，siCPU软件中断率，<span class="hljs-built_in">st</span>强制等待占用<span class="hljs-meta">CPU</span>率<br><br>第四行：物理内存：总量，空闲，使用，buff和cache占用<br>第五行：虚拟内存：总量，空闲，使用，buff和cache占用<br><br>进程信息：top命令下面的主要部分显示了当前正在运行的进程列表，包括每个进程的PID、用户、<span class="hljs-meta">CPU</span>使用率、内存使用率等信息。<br><br>下面主体：<br>PID：进程的ID<br>USER：进程所属用户<br>PR：进程优先级，越小越高<br>NI：负值表示高优先级，正表示低优先级<br>VIRT：进程使用虚拟内存，kb<br>RES：进程使用物理内存，kb<br><span class="hljs-keyword">SHR</span>：进程使用共享内存，kb<br>S：进程状态（S休眠，R运行，Z僵死，N负数优先级，I空闲）<br>%CPU：进程占用<span class="hljs-meta">CPU</span>率<br>%MEM：进程占内存率<br>TIME+：进程使用<span class="hljs-meta">CPU</span>时间总计，10ms为单位<br>COMMAND：进程的命令或程序文件路径<br></code></pre></td></tr></table></figure><p><code>top</code>命令的选项、交互快捷键略，以后用得到时补充</p></li><li><p>磁盘信息<code>df [-h]</code></p></li><li><p>磁盘和CPU信息<code>iostat [-x] [num1] [num2]</code></p><p>-x：显示详细信息</p><p>num1：刷新间隔</p><p>num2：刷新次数</p></li><li><p>网络统计信息<code>sar -n DEV num1 num2</code>，sar命令相当复杂，用该固定组合命令既够用</p><p>-n：查看网络</p><p>DEV表示查看网络接口</p><p>num1和num2同上表示刷新间隔和刷新次数</p></li></ol><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><p>环境变量是一些键值对，可以由用户或程序动态设置或修改。它们通常包含有关当前用户会话或应用程序执行环境的信息，例如搜索路径、语言首选项、临时文件位置等。</p><ol><li>概识</li></ol><p>   <code>env</code>命令查看当前系统配置的环境变量信息</p><p>   通过$符号可以取出环境变量的值，并可以配合<code>echo</code>打印</p><p>   PATH中记录的是命令的搜索路径目录，我们执行的命令就是通过PATH的路径目录逐一搜索找到并执行的。</p><ol start="2"><li>改变环境变量</li></ol><p>   临时生效：<code>export 名称=值</code>，重启后失效</p><p>   永久生效：</p><ul><li>针对用户：~&#x2F;.bashrc文件中配置</li><li>针对全部用户：&#x2F;etc&#x2F;profile文件中配置，</li><li>配置完成，可以通过source命令立刻生效</li></ul><ol start="3"><li><p>操作</p><p>在&#x2F;home&#x2F;bmsy&#x2F;myenv文件夹下创建文件myenv1并编写简单命令，改写文件的权限为可执行</p><ul><li>在普通用户环境下添加自定义命令<ul><li>修改~&#x2F;.bashrc文件，在文件末尾加入<code>export 名称=值</code></li></ul></li><li>在全局环境下添加自定义命令<ul><li>临时修改PATH：<code>export PATH=$PATH:/home/bmsy/myenv</code></li><li>永久修改PATH：在&#x2F;etc&#x2F;profile文件中加入<code>export PATH=$PATH:/home/bmsy/myenv</code></li></ul></li></ul></li></ol><h5 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h5><p>略</p><h4 id="更新java-JDK版本"><a href="#更新java-JDK版本" class="headerlink" title="更新java_JDK版本"></a>更新java_JDK版本</h4><ol><li><p>java版本<code>java -version</code></p></li><li><p>查看已有jdk安装路径和java安装路径</p><p><code>whereis java</code>查看jdk安装路径</p><p><code>which java</code>查看java执行路径</p></li><li><p>删除原来JDK</p></li><li><p>查看Linux系统版本，确定是32位还是64位</p><p><code>uname -a</code></p></li><li><p>下载JDK</p><p>上传到自己指定的目录下，<code>tar -xzvf file.tar.gz</code></p><p>解压tar.gz</p></li><li><p>修改环境变量</p><p>vim &#x2F;etc&#x2F;profile查看原始JAVA_HOME的路径并修改为 &#x2F;…自己的JDK目录</p></li><li><p>配置默认JDK版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/java java /u</span>sr<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_192<span class="hljs-regexp">/bin/</span>java <span class="hljs-number">300</span><br><br>update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/javac javac /u</span>sr<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_192<span class="hljs-regexp">/bin/</span>javac <span class="hljs-number">300</span><br><br>update-alternatives --config java<br><br><span class="hljs-regexp">//</span>系统会给列出各种JDK版本<br></code></pre></td></tr></table></figure></li><li><p>关闭shell，重新登录服务器，查看Java版本既可</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-5-指令</title>
    <link href="/2023/04/26/Vue-5-%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/04/26/Vue-5-%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-内置指令"><a href="#1-内置指令" class="headerlink" title="1.内置指令"></a>1.内置指令</h4><blockquote><p>Vue中的内置指令包括：</p><ol><li>v-bind：用于绑定一个或多个属性值到表达式。</li><li>v-if&#x2F;v-else-if&#x2F;v-else：用于条件渲染，根据表达式的真假来显示或隐藏元素。</li><li>v-show：也用于条件渲染，但是不会删除元素，而是通过CSS样式控制显示与隐藏。</li><li>v-for：用于循环渲染列表数据。</li><li>v-on：用于绑定事件处理函数。</li><li>v-model：用于双向绑定表单元素和组件的数据。</li><li>v-html：用于输出HTML代码。</li><li>v-text：用于输出文本内容，与v-html的区别是v-html会解析HTML代码，而v-text只会输出纯文本。</li><li>v-pre：跳过编译，直接输出原始文本内容。</li><li>v-cloak：在Vue实例加载完成前隐藏未编译的Mustache标签。</li></ol></blockquote><h4 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2.自定义指令"></a>2.自定义指令</h4><blockquote><p>一个基本的自定义指令包括以下部分：</p><ol><li>指令名称：自定义指令的名称需要以v-开头。例如，v-highlight。</li><li>钩子函数：自定义指令提供了一系列钩子函数，可以在不同的阶段对指令绑定的元素进行处理。常用的钩子函数有bind、inserted、update、componentUpdated和unbind。</li><li>参数和修饰符：自定义指令可以接收参数和修饰符，这些参数和修饰符可以在钩子函数中使用。</li></ol><p>示例，自定义指令v-highlight，将元素背景颜色设置为黄色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;highlight&#x27;</span>, &#123;<br>  <span class="hljs-attr">bind</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">el, binding, vnode</span>) &#123;<br>    el.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;yellow&quot;</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>使用该指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-highlight</span>&gt;</span>这里是被高亮的文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当该指令被解析时，它会将元素的背景颜色设置为黄色。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-2-事件</title>
    <link href="/2023/04/25/Vue-2-%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/04/25/Vue-2-%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h5 id="1-事件处理v-on"><a href="#1-事件处理v-on" class="headerlink" title="1.事件处理v-on"></a>1.事件处理v-on</h5><blockquote><p><code>v-on:clock=&quot;函数名&quot;</code>可简写为<code>@clock=&quot;函数名&quot;</code></p><p>函数写在vm的methods:{}内，原理是methods内的函数会备份到vm内(和data到_data一样)，但函数不需要做数据代理。</p><p>如果把函数写在data:{}内vm备份到_data后虽然有效，但备份到_data后会做数据代理(产生get,set方法)，加重vm的负担</p><p><strong>注</strong>：不传参时默认传入事件对象event，传参时也想获得event需要用占位符$event</p><p>用于对页面操作，做出响应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>题目<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;showInfo1&quot;</span>&gt;</span> 不传参函数<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;showInfo2(ts,$event)&quot;</span>&gt;</span> 传参函数<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#d1&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript"><span class="hljs-attr">ts</span>:<span class="hljs-string">&#x27;传参点击事件绑定成功&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">showInfo1</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;拿回按钮的文本：&quot;</span>,event.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">showInfo2</span>(<span class="hljs-params">ts</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ts)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;拿回按钮的文本：&quot;</span>,event.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br><br></code></pre></td></tr></table></figure></blockquote><h4 id="2-事件修饰符"><a href="#2-事件修饰符" class="headerlink" title="2.事件修饰符"></a>2.事件修饰符</h4><blockquote><h5 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h5><p><code>&lt;a href=&quot;http://baidu.com&quot; @click=&quot;showInfo&quot;&gt; 这是一个链接&lt;/a&gt;</code></p><p>该链接点击后默认行为会自动跳转，现在想禁止默认行为</p><p>传统方法：可以在showInfo函数中控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">showInfo</span>(<span class="hljs-params">event</span>)&#123;<br>event.<span class="hljs-title function_">preventDefault</span>()<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;链接的文本：&quot;</span>,event.<span class="hljs-property">innerText</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>Vue的事件修饰符：在@click控制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span> 这是一个链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="更多事件修饰符"><a href="#更多事件修饰符" class="headerlink" title="更多事件修饰符"></a>更多事件修饰符</h5><ol><li><code>.prevent</code>: 阻止事件默认行为</li><li><code>.stop</code>: 阻止事件冒泡（继续传播）</li><li><code>.once</code>: 事件将只触发一次</li><li><code>.capture</code>: 添加事件监听器时使用事件捕获模式</li><li><code>.self</code>: 只当事件在该元素本身（而不是子元素）触发时触发</li><li><code>.passive</code>: 事件的默认行为立即执行，无需等待事件回调执行完毕（指示侦听器不会调用<code>preventDefault()</code>）</li></ol><h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><p>Vue中的常用键盘事件</p><ol><li><p>@keydown&#96;: 按下任意键时触发事件</p></li><li><p><code>@keyup</code>: 松开任意键时触发事件</p></li><li><p><code>@keydown.[key]</code>: 按下指定键时触发事件，其中<code>[key]</code>表示按键别名或键码（不建议使用）（例如：<code>@keydown.enter</code>或&#96;&#96;@keydown.13&#96;，enter是回车键）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> @<span class="hljs-attr">keydown.enter</span>=<span class="hljs-string">&quot;sendMessage&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 处理按下Enter键的操作</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>系统修饰符（用法特殊）：ctrl，alt，shift，meta(windo键)</p><ol><li>配合keyup，下修饰符，再按下其它键，随后释放其它键，事件才触发</li><li>配合keydown，正常触发使用</li></ol><p>Vue.config.keyCodes.自定义键名&#x3D;键码     可以自定义按键别名</p></li></ol></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-3-计算属性和监听属性</title>
    <link href="/2023/04/25/Vue-3-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7/"/>
    <url>/2023/04/25/Vue-3-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h5 id="1-计算属性computed"><a href="#1-计算属性computed" class="headerlink" title="1.计算属性computed"></a>1.计算属性computed</h5><blockquote><ol><li><p>要用的属性通过已有的属性计算得来</p></li><li><p>原理：底层借助Object.defineproperty方法提供的getter和setter</p></li><li><p>get函数什么时候会执行？</p><p>（1）初次读取时会执行一次</p><p>（2）当依赖的数据发生变化时会被再次调用</p></li><li><p>优势：和methods实现相比，内部有缓存机制（复用），效率更高</p></li><li><p>备注：</p><p>（1）计算属性最终会出现在vm上，直接读取使用既可</p><p>（2）如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变；</p></li></ol><p>为了使代码风格简化，将插值表达式简化；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>原价：&#123;&#123; price &#125;&#125;元<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>折扣价：&#123;&#123; discountPrice &#125;&#125;元<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">price</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">_discount</span>: <span class="hljs-number">0.8</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">discountPrice</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">discount</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_discount</span> = value / <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在不需要用set的时候，计算属性可以简写为：</p><p>只考虑读取，不考虑修改的时候，这时discountPrice就是get</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">discountPrice</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">discount</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="2-监视属性watch"><a href="#2-监视属性watch" class="headerlink" title="2.监视属性watch"></a>2.监视属性watch</h4><blockquote><ol><li><p>当被监视属性发生变化时，回调函数自动调用，进行相关操作</p></li><li><p>监视的属性可以是data或计算属性computed内的属性和方法名</p></li><li><p>监视的两种写法</p><p>（1）new Vue时传入watch配置</p><p>（2）通过vm.$watch监视</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">name</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;姓名从&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">oldVal</span>,变为,<span class="hljs-variable language_">this</span>.<span class="hljs-property">newVal</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>监视属性为方法名时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;nameChanged&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">nameChanged</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`姓名从<span class="hljs-subst">$&#123;oldVal&#125;</span>变为<span class="hljs-subst">$&#123;newVal&#125;</span>`</span>)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h5><p>深度监听可以在对象嵌套较深、需要监听多层嵌套属性变化的情况下使用，但是需要注意性能问题，可以在watch选项中使用deep属性来开启深度监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-attr">student</span>: &#123;<br>       <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>       <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>       <span class="hljs-attr">scores</span>: &#123;<br>         <span class="hljs-attr">math</span>: <span class="hljs-number">90</span>,<br>         <span class="hljs-attr">english</span>: <span class="hljs-number">85</span><br>       &#125;<br>     &#125;<br>   &#125;<br> &#125;,<br> <span class="hljs-attr">watch</span>: &#123;<br>   <span class="hljs-attr">student</span>: &#123;<span class="hljs-comment">//深度监听得配置deep，无法用上面student(newVal, oldVal)&#123;&#125;简写形式</span><br>     <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//开启了student的深度监听</span><br>     <span class="hljs-title function_">handler</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;学生信息变化&#x27;</span>, newVal, oldVal)<br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>监听一个对象的某个属性时使用<code>&#39;student.name&#39;</code>即可，正常都是应该写<code>&#39;&#39;</code>，平时简写一般省略<code>&#39;&#39;</code>，但是监听多层级的某一层时不能省略。</p><p>在Vue中，可以在<code>watch</code>选项中使用<code>deep</code>属性来开启深度监听</p></li></ol></blockquote><h4 id="3-计算属性和监听属性的对比"><a href="#3-计算属性和监听属性的对比" class="headerlink" title="3.计算属性和监听属性的对比"></a>3.计算属性和监听属性的对比</h4><blockquote><ol><li>计算属性是依靠返回函完成计算属性的交付，监听属性是依靠普通函数内的操作完成数据的操作；所以有2</li><li>计算属性可以完成的，监听属性都可以完成，但监听属性可以完成的，计算属性不一定可以完成，比如：watch可以进行异步操作</li></ol><p>两个原则：</p><ol><li>被Vue管理的函数最好写成普通函数，这样的this才是指向vm或组件实例</li><li>所以不被Vue管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this的指向才是vm或组件实例对象</li></ol></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中一些函数的解读</title>
    <link href="/2023/04/23/Java%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E7%9A%84%E8%A7%A3%E8%AF%BB/"/>
    <url>/2023/04/23/Java%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E7%9A%84%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h4 id="将-JSON-对象中的某属性值解析成一个整型数组"><a href="#将-JSON-对象中的某属性值解析成一个整型数组" class="headerlink" title="将 JSON 对象中的某属性值解析成一个整型数组"></a>将 JSON 对象中的某属性值解析成一个整型数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] xRange = regionObject.getJSONArray(<span class="string">&quot;xRange&quot;</span>).toList().stream().mapToInt(o -&gt; Integer.parseInt(o.toString())).toArray();</span><br></pre></td></tr></table></figure><p><code>regionObject</code> 是一个 JSON 对象，<code>getJSONArray(&quot;xRange&quot;)</code> 将返回一个包含 JSON 数组的对象。我们可以通过调用 <code>toList()</code> 方法将这个 JSON 数组转换为 Java 中的 <code>List</code> 类型。</p><p>接着，我们使用 Java 8 中的流式编程 API 来对这个列表进行操作，其中 <code>mapToInt(o -&gt; Integer.parseInt(o.toString()))</code> 是一个映射函数，将列表中的每个元素转换成一个整型。具体来说，这个函数首先使用 <code>toString()</code> 方法将列表中的元素转换成一个字符串，然后再使用 <code>Integer.parseInt()</code> 方法将字符串解析成整型。这样，我们就得到了一个包含整型数据的流。</p><p>最后，我们调用 <code>toArray()</code> 方法将这个流转换成一个整型数组，存储在 <code>xRange</code> 变量中。这个数组包含了 JSON 对象中 <code>&quot;xRange&quot;</code> 属性对应的所有整型值。</p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>将 JSON 对象中的字符串类型的属性值转换成一个 <code>java.util.Date</code> 对象。</p><p> JSON 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jsonCopy code&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="string">&quot;birthDate&quot;</span>: <span class="string">&quot;1990-01-01&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>&quot;birthDate&quot;</code> 属性值解析成一个 <code>java.util.Date</code> 对象。可以使用 <code>java.text.SimpleDateFormat</code> 类将字符串转换成日期对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">javaCopy codeimport java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">// 假设 jsonStr 是一个包含上述 JSON 对象的字符串</span><br><span class="line">JSONObject jsonObj = new JSONObject(jsonStr);</span><br><span class="line"></span><br><span class="line">// 从 json 中获取 birthDate 属性值</span><br><span class="line">String birthDateStr = jsonObj.getString(&quot;birthDate&quot;);</span><br><span class="line"></span><br><span class="line">// 将 birthDateStr 转换为 Date 对象</span><br><span class="line">SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">Date birthDate = dateFormat.parse(birthDateStr);</span><br></pre></td></tr></table></figure><p>使用 <code>JSONObject.getString(String)</code> 方法获取了 <code>&quot;birthDate&quot;</code> 属性的字符串值，然后用 <code>SimpleDateFormat.parse(String)</code> 方法将字符串转换为 <code>Date</code> 对象。这里需要指定日期格式，这里使用了 <code>&quot;yyyy-MM-dd&quot;</code>，与 JSON 字符串中日期格式相匹配。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS布局</title>
    <link href="/2023/04/19/CSS%E5%B8%83%E5%B1%80/"/>
    <url>/2023/04/19/CSS%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="HTML-基础标签和属性"><a href="#HTML-基础标签和属性" class="headerlink" title="HTML 基础标签和属性"></a>HTML 基础标签和属性</h4><blockquote><h5 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h5><p>&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;body&gt;</p><p>&lt;div&gt;块级、&lt;p&gt;段落、&lt;h1~h6&gt;标题、&lt;a&gt;链接、&lt;img&gt;图片&lt;ul&gt;无序列表&lt;ol&gt;有序列表</p><h5 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h5><p>id：给元素设置一个唯一的id标识符</p><p>class：给元素添加css类名，用于控制样式</p><p>style：直接给元素设置样式（内联样式）</p><p>src：设置超链接或媒体文件的源地址</p><p>alt：为图像添加替代文本，当图像无法显示时会显示该文本</p><p>title：为元素添加标题，鼠标悬停在元素上会弹出该标题</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客美化</title>
    <link href="/2023/04/17/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    <url>/2023/04/17/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="Hexo主题基本结构"><a href="#Hexo主题基本结构" class="headerlink" title="Hexo主题基本结构"></a>Hexo主题基本结构</h4><blockquote><p>.<br>├── _config.yml  主题的配置文件<br>├── languages语言文件夹<br>├── layout    布局文件<br>├── scripts脚本文件启动时<br>└── source资源源文件</p><p>其中layout：</p><p>layout.ejs   - 使用 EJS<br>layout.swig  - 使用 Swig</p><p>其中source：</p><p>  CSS、JavaScript 文件等。文件或文件夹开头名称为 _（下划线）或隐藏的文件会被忽略。 </p></blockquote><h4 id="source-资源文件夹"><a href="#source-资源文件夹" class="headerlink" title="source 资源文件夹"></a>source 资源文件夹</h4>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程与进程</title>
    <link href="/2023/04/17/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    <url>/2023/04/17/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><blockquote><p>进程和线程</p><p>线程的实现</p><p>线程的状态</p><p>线程的常用方法</p><p>线程的优先级</p><p>同步和死锁</p></blockquote><h4 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h4><blockquote><p>线程：是单独按顺序运行的控制流；</p><p>进程：执行中的程序；</p><p>一个进程最少包含一个线程，可以包含多个线程</p></blockquote><h4 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h4><blockquote><ol><li>继承Thread类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//一个构造函数，接受线程编号作为参数，并将该编号保存在实例变量 threadNum 中。重写 run() 方法，在其中使用循环打印线程编号和计数器的值。</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threadNum;<br>       <br>       <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(<span class="hljs-type">int</span> threadNum)</span> &#123;<br>           <span class="hljs-built_in">this</span>.threadNum = threadNum;<br>       &#125;<br>       <br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>               System.out.println(<span class="hljs-string">&quot;Thread &quot;</span> + threadNum + <span class="hljs-string">&quot;: &quot;</span> + i);<br>           &#125;<br>       &#125;<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>           <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-number">1</span>);<br>           <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-number">2</span>);<br>           <br>           t1.start();<br>           t2.start();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>实现Runnable接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//一个构造函数，接受线程编号作为参数，并将该编号保存在实例变量 threadNum 中。实现 run() 方法，在其中使用循环打印线程编号和计数器的值。</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threadNum;<br>       <br>       <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable</span><span class="hljs-params">(<span class="hljs-type">int</span> threadNum)</span> &#123;<br>           <span class="hljs-built_in">this</span>.threadNum = threadNum;<br>       &#125;<br>       <br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>               System.out.println(<span class="hljs-string">&quot;Thread &quot;</span> + threadNum + <span class="hljs-string">&quot;: &quot;</span> + i);<br>           &#125;<br>       &#125;<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>           <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">1</span>));<br>           <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">2</span>));<br>           <br>           t1.start();<br>           t2.start();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><blockquote><h6 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h6><ol><li>创建状态：创建好了一个单&#x2F;多线程的对象</li><li>就绪状态：调用了star()方法，等待CPU调度（等待资源分配）</li><li>运行状态：执行run()方法</li><li>阻塞状态：暂停执行，可能将资源交给其它线程使用</li><li>终止状态（死亡状态）：线程销毁</li></ol><h5 id="官话解释"><a href="#官话解释" class="headerlink" title="官话解释"></a>官话解释</h5><ol><li>New（创建）状态：当线程对象被创建但还没有开始执行时，它处于新状态。</li><li>Runnable（运行）状态：当线程正在运行或等待系统资源以执行时，它处于可运行状态。例如，当线程调用sleep()方法或等待I&#x2F;O操作完成时，它将进入可运行状态。</li><li>Blocked（阻塞）状态：当线程被阻止进一步执行时，它处于阻塞状态。这通常发生在等待获取synchronized锁或等待I&#x2F;O操作完成时。</li><li>Waiting（等待）状态：当线程无限期地等待另一个线程执行特定操作时，它处于等待状态。例如，当线程调用wait()方法时，它将进入等待状态。</li><li>Timed Waiting（计时等待）状态：当线程在有限时间内等待另一个线程执行特定操作时，它处于计时等待状态。例如，当线程调用Thread.sleep()方法，或者调用带超时参数的方法，如wait(long timeout)或join(long timeout)方法时，它将进入计时等待状态。</li><li>Terminated（终止）状态：当线程完成了它的任务并退出时，它处于终止状态。</li></ol></blockquote><h4 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h4><blockquote><ol><li>start()：启动线程，调用run()方法。</li><li>run()：线程执行体，在start()方法被调用后自动执行。</li><li>sleep()：使线程暂停执行指定的时间，以毫秒为单位。</li><li>join()：等待该线程结束，其他线程才能继续执行。</li><li>interrupt()：中断该线程，抛出InterruptedException异常。</li><li>isInterrupted()：判断该线程是否被中断。</li><li>wait()：使线程等待，直到其他线程唤醒它。</li><li>notify()：唤醒一个在wait()状态下的线程。</li><li>setPriority()：设置线程的优先级。</li><li>yield()：让出CPU执行权，给其他线程执行机会。</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>  <span class="hljs-comment">// 创建一个新线程</span><br>   <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>   <br>     <span class="hljs-comment">// 启动线程</span><br>  thread.start();<br>   <br>     <span class="hljs-comment">// 等待线程结束</span><br>  thread.join();<br>   <br>     <span class="hljs-comment">// 打印线程是否被中断</span><br>  System.out.println(<span class="hljs-string">&quot;Thread interrupted? &quot;</span> + thread.isInterrupted());<br>   <br>     <br>  <span class="hljs-comment">//设置线程优先级，线程的优先级请看下一节</span><br>    thread.setPriority(Thread.MAX_PRIORITY);<br>   <br>     <span class="hljs-comment">// 让出CPU执行权</span><br>  Thread.yield();<br>   <br>     <span class="hljs-comment">// 等待1秒钟</span><br>  Thread.sleep(<span class="hljs-number">1000L</span>);<br>   &#125;<br>   <br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">try</span> &#123;<br>             <span class="hljs-comment">// 使线程暂停执行500毫秒</span><br>             Thread.sleep(<span class="hljs-number">500L</span>);<br>         &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>             <span class="hljs-comment">// 处理异常</span><br>             e.printStackTrace();<br>         &#125;<br>   <br>         <span class="hljs-comment">// 唤醒在wait状态下的线程</span><br>      <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>             notify();<br>         &#125;<br>     &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><blockquote><p>​     Java中的线程优先级用整数表示，范围从1到10，其中1是最低优先级，10是最高优先级。默认情况下，所有线程都具有相同的优先级为5。可以用thread.setPriority()方法设置优先级。</p><p>​     Thread.MIN_PRIORITY：表示线程的最低优先级。该常量的值为1。<br>​     Thread.NORM_PRIORITY：表示线程的普通优先级。该常量的值为5。<br>​     Thread.MAX_PRIORITY：表示线程的最高优先级。该常量的值为10。<br>​     *&#x2F;</p></blockquote><h4 id="线程同步和死锁"><a href="#线程同步和死锁" class="headerlink" title="线程同步和死锁"></a>线程同步和死锁</h4><blockquote><p>同步的概念： 多个线程访问共享资源时，保证它们的访问顺序和结果正确性的一种机制 </p><p>实现同步的手段：使用锁、信号量等 </p><p>Java提供实现同步的关键字synchronized，有以下用法</p><ol><li>修饰代码块：可以将<code>synchronized</code>关键字放置在一段代码块周围，以确保同一时间只有一个线程能够进入该代码块。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br><span class="hljs-comment">// 这里的代码同一时间只能被一个线程执行</span><br>&#125;<br> <br></code></pre></td></tr></table></figure><ol start="2"><li>修饰方法：可以将<code>synchronized</code>关键字放在（静态）方法声明上，以确保同一时间只有一个线程能够执行该方法。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//修饰方法</span><br><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 这里的代码同一时间只能被一个线程执行</span><br>&#125;<br> <span class="hljs-comment">//修饰静态方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 这里的代码同一时间只能被一个线程执行</span><br>&#125;  <br></code></pre></td></tr></table></figure><p>一个使用线程的实际例子，所有售票窗口共享500张票，买完为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketSeller</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>       System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;售出第&quot;</span> + tickets-- + <span class="hljs-string">&quot;张票&quot;</span>);<br>     &#125;<br>   &#125;<br>   <br> <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>       sell();<br>     &#125;<br>   &#125;<br>   <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">TicketSeller</span> <span class="hljs-variable">ticketSeller</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSeller</span>();<br> <br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticketSeller);<br>  t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>     t1.start();<br>   <br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticketSeller);<br>  t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>     t2.start();<br>   <br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticketSeller);<br>  t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br>     t3.start();<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>死锁：两个或多个线程在执行过程中，因互相等待对方释放资源而陷入了无限等待的状态。</p><p>死锁发生需要满足的四个条件：</p><p>互斥（资源只能被一个进程占用）</p><p>占有并等待（已经占有资源的进程可以请求其他的资源）</p><p>不可抢占（资源不能被其他进程抢占）</p><p>循环等待（存在一个进程等待一个进程所持有的资源，而这个进程又在等待另一个进程所持有的资源）</p><p>避免死锁，从四个条件出发：</p><ol><li>打破互斥条件：例如采用读写锁而非独占锁，使得多个线程可以同时读取同一份数据。</li><li>打破占有并等待条件：例如采用资源预分配策略，即在申请资源之前就将所有需要的资源全部分配完毕。</li><li>打破不可抢占条件：例如引入超时机制，在等待一段时间后强制释放已经占有的资源。</li><li>打破循环等待条件：例如引入资源排序机制，规定所有线程必须按照同一套顺序申请资源，从而避免循环等待的情况。</li></ol></blockquote><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><blockquote><p><img src="/..%5Cpostot%5C23-04-17-1.png" alt="1665027727152"></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运筹学-运输问题</title>
    <link href="/2022/11/22/Untitled/"/>
    <url>/2022/11/22/Untitled/</url>
    
    <content type="html"><![CDATA[<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% N=[ 3 6 2 6</span></span><br><span class="line"><span class="comment">%     5 3 6 4 </span></span><br><span class="line"><span class="comment">% 9 7 7 8];</span></span><br><span class="line"><span class="comment">% in=[40 45 55 60];</span></span><br><span class="line"><span class="comment">% out=[55 70 75];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%N:运价表   out:每个产地产量(按行输入)   in:每个销地销量(按行输入)</span></span><br><span class="line"><span class="comment">%x:最优运输方案</span></span><br><span class="line">in=input(<span class="string">&#x27;请输入每个销地销量（按行输入）：&#x27;</span>);</span><br><span class="line">out=input(<span class="string">&#x27;请输入每个产地产量（按行输入）：&#x27;</span>);</span><br><span class="line">N = input(<span class="string">&#x27;请输入运价表（矩阵）：&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum_out=sum(out);</span><br><span class="line">sum_in=sum(in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sum_out&gt;sum_in          <span class="comment">%产大于销的情况，转换为产销平衡问题</span></span><br><span class="line">    [old_row,old_col]=<span class="built_in">size</span>(N);</span><br><span class="line">    new=<span class="built_in">zeros</span>(old_row,<span class="number">1</span>);</span><br><span class="line">    N=[N,new];</span><br><span class="line">    in=[in,sum_out-sum_in];</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;该问题产大于销,方案最后一列为虚拟销地&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> sum_in&gt;sum_out     <span class="comment">%销大于产的情况，转换为产销平衡问题</span></span><br><span class="line">    [old_row1,old_col1]=<span class="built_in">size</span>(N);</span><br><span class="line">    new1=<span class="built_in">zeros</span>(<span class="number">1</span>,old_col1);</span><br><span class="line">    N=[N;new1];</span><br><span class="line">    out=[out,sum_in-sum_out];</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;该问题销大于产,方案最后一行为虚拟产地&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;该问题为产销平衡问题&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">[row,col]=<span class="built_in">size</span>(N);</span><br><span class="line">sigma=<span class="built_in">zeros</span>(row,col);<span class="comment">%定义检验数表</span></span><br><span class="line">x=-<span class="built_in">ones</span>(row,col);<span class="comment">%定义初始运输表</span></span><br><span class="line">ui=<span class="built_in">zeros</span>(row,<span class="number">1</span>);<span class="comment">%定义ui</span></span><br><span class="line">vj=<span class="built_in">zeros</span>(<span class="number">1</span>,col);<span class="comment">%定义vj</span></span><br><span class="line">out1=out;    <span class="comment">%求初始方案的运算过程的产量out1</span></span><br><span class="line">in1=in;       <span class="comment">%求初始方案的运算过程的销量in1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%求初始方案(西北角法)</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">        <span class="keyword">if</span> out1(<span class="built_in">i</span>)==<span class="number">0</span></span><br><span class="line">            out1(<span class="built_in">i</span>)=<span class="number">-1</span>;<span class="comment">%若该产地产量为0，则置为-1，即划掉该行</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> in1(<span class="built_in">j</span>)==<span class="number">0</span></span><br><span class="line">            in1(<span class="built_in">j</span>)=<span class="number">-1</span>; <span class="comment">%若该销地销量为0，则置为-1，即划掉该列</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> out1(<span class="built_in">i</span>)&gt;<span class="number">0</span>&amp;&amp;in1(<span class="built_in">j</span>)&gt;<span class="number">0</span></span><br><span class="line">          <span class="keyword">if</span> out1(<span class="built_in">i</span>)&gt;in1(<span class="built_in">j</span>)        </span><br><span class="line">            x(<span class="built_in">i</span>,<span class="built_in">j</span>)=in1(<span class="built_in">j</span>);           <span class="comment">%若产量大于销量，则该销地销量填入方案</span></span><br><span class="line">            out1(<span class="built_in">i</span>)=out1(<span class="built_in">i</span>)-x(<span class="built_in">i</span>,<span class="built_in">j</span>);  <span class="comment">%该产地剩余的产量</span></span><br><span class="line">            in1(<span class="built_in">j</span>)=in1(<span class="built_in">j</span>)-x(<span class="built_in">i</span>,<span class="built_in">j</span>);    <span class="comment">%该销地剩余的销量</span></span><br><span class="line">          <span class="keyword">else</span>                       </span><br><span class="line">            x(<span class="built_in">i</span>,<span class="built_in">j</span>)=out1(<span class="built_in">i</span>);          <span class="comment">%若销量大于产量，则直接将产地产量填入方案</span></span><br><span class="line">            in1(<span class="built_in">j</span>)=in1(<span class="built_in">j</span>)-x(<span class="built_in">i</span>,<span class="built_in">j</span>);    <span class="comment">%该产地剩余的产量</span></span><br><span class="line">            out1(<span class="built_in">i</span>)=out1(<span class="built_in">i</span>)-x(<span class="built_in">i</span>,<span class="built_in">j</span>);   <span class="comment">%该销地剩余的销量</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%迭代过程</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span></span><br><span class="line"><span class="comment">%求检验数(位势法)</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:row  <span class="comment">%初始化ui，除了第一个元素为0，其他所有ui元素变为inf</span></span><br><span class="line">    ui(<span class="built_in">i</span>)=<span class="built_in">inf</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:col  <span class="comment">%初始化vj,所有vj元素变为inf</span></span><br><span class="line">   vj(<span class="built_in">i</span>)=<span class="built_in">inf</span>; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>    <span class="comment">%求ui,vj</span></span><br><span class="line">    checku=<span class="built_in">find</span>(ui==<span class="built_in">inf</span>);</span><br><span class="line">    checkv=<span class="built_in">find</span>(vj==<span class="built_in">inf</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(checku)&amp;&amp;<span class="built_in">isempty</span>(checkv)  <span class="comment">%当ui,vj都不为inf时,ui和vj计算完成,跳出循环</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">       <span class="keyword">if</span> x(<span class="built_in">i</span>,<span class="built_in">j</span>)~=<span class="number">-1</span></span><br><span class="line">          <span class="keyword">if</span> ui(<span class="built_in">i</span>)==<span class="built_in">inf</span>&amp;&amp;vj(<span class="built_in">j</span>)==<span class="built_in">inf</span><span class="comment">%若ui,vj全为inf,则先跳过计算</span></span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">elseif</span> vj(<span class="built_in">j</span>)==<span class="built_in">inf</span></span><br><span class="line">             vj(<span class="built_in">j</span>)=N(<span class="built_in">i</span>,<span class="built_in">j</span>)-ui(<span class="built_in">i</span>);<span class="comment">%若vj为inf,ui不为inf,计算vj</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              ui(<span class="built_in">i</span>)=N(<span class="built_in">i</span>,<span class="built_in">j</span>)-vj(<span class="built_in">j</span>);<span class="comment">%若ui为inf,vj不为inf,计算ui</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row  <span class="comment">%初始化检验数表，所有元素变为inf</span></span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">      sigma(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="built_in">inf</span>; </span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row  <span class="comment">%计算检验数表</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">        <span class="keyword">if</span> x(<span class="built_in">i</span>,<span class="built_in">j</span>)==<span class="number">-1</span></span><br><span class="line">            sigma(<span class="built_in">i</span>,<span class="built_in">j</span>)=N(<span class="built_in">i</span>,<span class="built_in">j</span>)-ui(<span class="built_in">i</span>)-vj(<span class="built_in">j</span>);          </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%判断是否得到最优方案</span></span><br><span class="line"><span class="keyword">if</span> sigma&gt;<span class="number">0</span>   </span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;有唯一最优方案,最优方案为(表中-1表示空格):&quot;</span>)</span><br><span class="line">    x</span><br><span class="line">    sum_min=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row   <span class="comment">%计算最小运价</span></span><br><span class="line">       <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">           <span class="keyword">if</span> x(<span class="built_in">i</span>,<span class="built_in">j</span>)~=<span class="number">-1</span></span><br><span class="line">              sum_min=sum_min+x(<span class="built_in">i</span>,<span class="built_in">j</span>)*N(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;最小运价为：&quot;</span>)</span><br><span class="line">    sum_min</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">elseif</span> sigma&gt;=<span class="number">0</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;最优方案不唯一,其中一个为(表中-1表示空格):&quot;</span>)</span><br><span class="line">     x</span><br><span class="line">     sum_min=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row  <span class="comment">%计算最小运价</span></span><br><span class="line">       <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">          <span class="keyword">if</span> x(<span class="built_in">i</span>,<span class="built_in">j</span>)~=<span class="number">-1</span></span><br><span class="line">              sum_min=sum_min+x(<span class="built_in">i</span>,<span class="built_in">j</span>)*N(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;最小运价为：&quot;</span>)</span><br><span class="line">    sum_min</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%闭回路调整法</span></span><br><span class="line">visit=x;    </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row        <span class="comment">%初始化访问表,可以被访问的点标为0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">        <span class="keyword">if</span> visit(<span class="built_in">i</span>,<span class="built_in">j</span>)~=<span class="number">-1</span></span><br><span class="line">            visit(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">m=<span class="built_in">min</span>(sigma(sigma&lt;<span class="number">0</span>));<span class="comment">%找到小于零的最小检验数m</span></span><br><span class="line">[r2,c2]=<span class="built_in">find</span>(sigma==m);<span class="comment">%找到m的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%记录m的行标和列标,由于可能出现检验数相同的情况,我们取其中第一个</span></span><br><span class="line">r=r2(<span class="number">1</span>);</span><br><span class="line">c=c2(<span class="number">1</span>);</span><br><span class="line">r1=r2(<span class="number">1</span>);          </span><br><span class="line">c1=c2(<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">visit(r,c)=<span class="number">2</span>;  <span class="comment">%标记m已被访问,记为2   </span></span><br><span class="line">circle=-<span class="built_in">ones</span>(row+col+<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">%定义闭回路路径表</span></span><br><span class="line"><span class="comment">%circle表的结构:[行标  列标  运量]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%将起点(m点)填入路径表</span></span><br><span class="line">circle(<span class="number">1</span>,<span class="number">1</span>)=r1;</span><br><span class="line">circle(<span class="number">1</span>,<span class="number">2</span>)=c1;</span><br><span class="line">p=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%找闭回路</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>  </span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row         <span class="comment">%找第c列中有无未被访问的点</span></span><br><span class="line">      <span class="keyword">if</span> visit(<span class="built_in">i</span>,c)==<span class="number">0</span>  <span class="comment">%若该点未被访问,则访问该点,进行标记并存入路径表</span></span><br><span class="line">         visit(<span class="built_in">i</span>,c)=<span class="number">1</span>;</span><br><span class="line">         r=<span class="built_in">i</span>;           <span class="comment">%记录该点行标</span></span><br><span class="line">         circle(p,<span class="number">1</span>)=<span class="built_in">i</span>; </span><br><span class="line">         circle(p,<span class="number">2</span>)=c;</span><br><span class="line">         circle(p,<span class="number">3</span>)=x(<span class="built_in">i</span>,c);</span><br><span class="line">         p=p+<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col         <span class="comment">%找第r行中有无未被访问的点</span></span><br><span class="line">      <span class="keyword">if</span> visit(r,<span class="built_in">j</span>)==<span class="number">0</span> <span class="comment">%若该点未被访问,则访问该点,进行标记并存入路径表</span></span><br><span class="line">         visit(r,<span class="built_in">j</span>)=<span class="number">1</span>;</span><br><span class="line">         c=<span class="built_in">j</span>;          <span class="comment">%记录该点列标</span></span><br><span class="line">         circle(p,<span class="number">1</span>)=r;</span><br><span class="line">         circle(p,<span class="number">2</span>)=<span class="built_in">j</span>;</span><br><span class="line">         circle(p,<span class="number">3</span>)=x(r,<span class="built_in">j</span>);</span><br><span class="line">         p=p+<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   </span><br><span class="line">   a=<span class="built_in">find</span>(visit(r,:)==<span class="number">0</span>);</span><br><span class="line">   b=<span class="built_in">find</span>(visit(:,c)==<span class="number">0</span>);</span><br><span class="line">   a1=<span class="built_in">find</span>(visit(r,:)==<span class="number">2</span>);</span><br><span class="line">   b1=<span class="built_in">find</span>(visit(:,c)==<span class="number">2</span>);</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">isempty</span>(a)&amp;&amp;<span class="built_in">isempty</span>(b)  <span class="comment">%判断该点所在行和列中有无未被访问的点</span></span><br><span class="line">       <span class="keyword">if</span> ~<span class="built_in">isempty</span>(a1)||~<span class="built_in">isempty</span>(b1)  <span class="comment">%判断最后访问点是否与起始点在同一行或同一列，若是则跳出循环，找到闭回路</span></span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">else</span>           <span class="comment">%若不是,则将该点置为-1(此路不通,下次循环不走此路),重置访问表和路径表,开始下一次循环</span></span><br><span class="line">           visit(r,c)=<span class="number">-1</span>;</span><br><span class="line">           <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row</span><br><span class="line">              <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:col</span><br><span class="line">                  <span class="keyword">if</span> visit(<span class="built_in">i</span>,<span class="built_in">j</span>)==<span class="number">1</span></span><br><span class="line">                     visit(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">0</span>;</span><br><span class="line">                  <span class="keyword">end</span></span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line">       </span><br><span class="line">      r=r1;</span><br><span class="line">      c=c1;</span><br><span class="line">    </span><br><span class="line">      circle=-<span class="built_in">ones</span>(row+col,<span class="number">3</span>);</span><br><span class="line">      circle(<span class="number">1</span>,<span class="number">1</span>)=r1;</span><br><span class="line">      circle(<span class="number">1</span>,<span class="number">2</span>)=c1;</span><br><span class="line">       p=<span class="number">2</span>;</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span>   </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">[rows,cols]=<span class="built_in">size</span>(circle);</span><br><span class="line"><span class="comment">%定义circle表时我们给了足够大的维度,而由于闭回路可能无法包括所有点,现在要将多余行删去</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:rows   </span><br><span class="line">    <span class="keyword">if</span> circle(<span class="built_in">i</span>,<span class="number">1</span>)==<span class="number">-1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">circle(<span class="built_in">i</span>:rows,:)=[];</span><br><span class="line"><span class="comment">%开始找闭回路中的顶点表</span></span><br><span class="line">add=circle(<span class="number">1</span>,:);</span><br><span class="line">circle=[circle;add];  <span class="comment">%将起始点填入circle表,形成完整的闭回路</span></span><br><span class="line">[row1,col1]=<span class="built_in">size</span>(circle);</span><br><span class="line"><span class="built_in">i</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%若闭回路中同一行或同一列中有两个以上的点,则删去中间点,只留下顶点</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>             </span><br><span class="line">     <span class="keyword">if</span> <span class="built_in">i</span>==row1<span class="number">-1</span></span><br><span class="line">       <span class="keyword">break</span>; </span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (circle(<span class="built_in">i</span><span class="number">-1</span>,<span class="number">1</span>)==circle(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        circle(<span class="built_in">i</span>,:)=[];</span><br><span class="line">        row1=row1<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">i</span>=<span class="built_in">i</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> (circle(<span class="built_in">i</span><span class="number">-1</span>,<span class="number">2</span>)==circle(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">        circle(<span class="built_in">i</span>,:)=[];</span><br><span class="line">        row1=row1<span class="number">-1</span>; </span><br><span class="line">        <span class="built_in">i</span>=<span class="built_in">i</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%由于起始点在闭回路中出现了两次,因此删去第二次出现的起始点</span></span><br><span class="line">k=<span class="built_in">find</span>(circle(:,<span class="number">3</span>)==<span class="number">-1</span>);</span><br><span class="line">circle(k(<span class="number">2</span>),:)=[];</span><br><span class="line">[row2,col2]=<span class="built_in">size</span>(circle);</span><br><span class="line"><span class="comment">%将顶点中奇数编号和偶数编号分开</span></span><br><span class="line"><span class="comment">%顶点表的结构:[行标  列标  运量]</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">mod</span>(row2,<span class="number">2</span>)==<span class="number">0</span>    <span class="comment">%若顶点总数是偶数</span></span><br><span class="line">    single=<span class="built_in">zeros</span>(row2/<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">%定义奇数编号顶点表</span></span><br><span class="line">    double=<span class="built_in">zeros</span>(row2/<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">%定义偶数编号顶点表</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">mod</span>(row2,<span class="number">2</span>)==<span class="number">1</span>    <span class="comment">%若顶点总数是奇数</span></span><br><span class="line">   single=<span class="built_in">zeros</span>(row2/<span class="number">2</span>+<span class="number">0.5</span>,<span class="number">3</span>);   <span class="comment">%定义奇数编号顶点表</span></span><br><span class="line">   double=<span class="built_in">zeros</span>(row2/<span class="number">2</span><span class="number">-0.5</span>,<span class="number">3</span>);   <span class="comment">%定义偶数编号顶点表</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">j1=<span class="number">1</span>;</span><br><span class="line">j2=<span class="number">1</span>;</span><br><span class="line"><span class="comment">%将闭回路中的点按编号分别存入奇数顶点表和偶数顶点表</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row2</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>,<span class="number">2</span>)==<span class="number">1</span></span><br><span class="line">       single(j1,:)=circle(<span class="built_in">i</span>,:);</span><br><span class="line">       j1=j1+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>,<span class="number">2</span>)==<span class="number">0</span></span><br><span class="line">      double(j2,:)=circle(<span class="built_in">i</span>,:);</span><br><span class="line">      j2=j2+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%更新运量表</span></span><br><span class="line">value=double(:,<span class="number">3</span>);</span><br><span class="line">[min_x,index]=<span class="built_in">min</span>(value(value&gt;=<span class="number">0</span>));<span class="comment">%找到偶数顶点的运量最小值及其位置</span></span><br><span class="line">x(r1,c1)=min_x;       <span class="comment">%把该运量最小值填入闭回路起始点的运量</span></span><br><span class="line">x(double(index,<span class="number">1</span>),double(index,<span class="number">2</span>))=<span class="number">-1</span>;  <span class="comment">%把该偶数顶点的运量标记为-1</span></span><br><span class="line">double(index,:)=[];    <span class="comment">%将该偶数顶点从偶数顶点表中删去,以免影响后续计算</span></span><br><span class="line"></span><br><span class="line">[row3,col3]=<span class="built_in">size</span>(single);</span><br><span class="line">[row4,col4]=<span class="built_in">size</span>(double);</span><br><span class="line"><span class="comment">%将奇数编号顶点的运量加上min_x</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:row3</span><br><span class="line">   x(single(<span class="built_in">i</span>,<span class="number">1</span>),single(<span class="built_in">i</span>,<span class="number">2</span>))=single(<span class="built_in">i</span>,<span class="number">3</span>)+min_x;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%将偶数编号顶点的运量减去min_x</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row4</span><br><span class="line">    x(double(<span class="built_in">i</span>,<span class="number">1</span>),double(<span class="built_in">i</span>,<span class="number">2</span>))=double(<span class="built_in">i</span>,<span class="number">3</span>)-min_x;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>储存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SOCKET编程（比特流模拟）实验设计</title>
    <link href="/2022/11/20/SOCKET%E7%BC%96%E7%A8%8B%EF%BC%88%E6%AF%94%E7%89%B9%E6%B5%81%E6%A8%A1%E6%8B%9F%EF%BC%89%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/11/20/SOCKET%E7%BC%96%E7%A8%8B%EF%BC%88%E6%AF%94%E7%89%B9%E6%B5%81%E6%A8%A1%E6%8B%9F%EF%BC%89%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><strong>四、实验思路</strong></p><p><strong>（1）创建分享文件的过程</strong></p><p>实验使用四台电脑，其中一台电脑作为Tracker服务器，其它三台电脑作为同等peer。当某台peer主机拥有可分享的文件时，将BT种子（按可分享文件生成）、标识符（表示分享）以数据报套接字形式（对应UDP协议）发送给Tracker服务器，Tracker服务器记录分享文件的BT种子和分享的主机IP地址，形成BT种子与分享方主机IP的BT-IP映射表。</p><p><strong>（2）请求文件方获得分享文件方IP地址的过程</strong></p><p>当某台主机需要下载某文件时，以数据报套接字形式（对应UDP协议）不断给Tracker服务器发送BT种子和标识符（表示请求），直到收到响应。</p><p>Tracker服务器按照自己形成的BT-IP映射表按BT种子进行查找，并向请求方以数据报套接字形式（对应UDP协议）发送一定数量的分享方IP地址</p><p><strong>（3）请求方向分享方请求文件</strong></p><p>请求方按收到的分享方IP地址，按请求文件的大小和自己选择的分享方的数量形成不同的txt文件（自定义的.torrent文件），依次向自己选择的分享方IP发请求数据流套接字（对应TCP协议）连接并发送txt文件。</p><p><strong>（4）分享方向请求方传输文件</strong></p><p>分享方按接收到的txt文件向请求方传输指定的部分文件。</p><p><strong>（5）请求方将一次收到的文件局部按追加写，拼接为完整文件。</strong></p><p><strong>（6）至此，一次分享、请求文件和文件传输结束</strong></p><p><strong>五、实验细节</strong></p><p><strong>（1）定义BT种子生成</strong></p><p>BT种子为一个字符串，是文件的唯一标识，此处我们以文件名+文件大小（字节为单位）定义BT种子格式内容。</p><p><strong>（2）定义Tracker服务器</strong></p><p>1.默认所有电脑客户端已知Tracker服务器IP地址；</p><p>2.分享方可以向Tracker服务器发数据报套接字（对应UDP协议），内容包含分享文件的BT种子、标识符（表示分享）；</p><p>3.请求方可以向Tracker服务器发送数据报套接字（对应UDP协议）请求，内容包含请求文件的BT种子、标识符（表示请求），以获取所需文件分享方的IP地址；</p><p><strong>（3）自定义的txt文件</strong></p><p>作用：</p><p>通过自定义的类似.torrent文件的txt文本，确定请求的文件，负责发送的文件局部。</p><p>内容格式为：</p><p>请求文件的BT种子；请求文件起始字节处；请求文件的大小（字节为单位）；</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学着玩</title>
    <link href="/2022/11/12/Python%E5%AD%A6%E7%9D%80%E7%8E%A9/"/>
    <url>/2022/11/12/Python%E5%AD%A6%E7%9D%80%E7%8E%A9/</url>
    
    <content type="html"><![CDATA[<h5 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h5><blockquote><h6 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h5><blockquote><h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><p> 转义、换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出了几个字&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出了几个字&#x27;</span>*<span class="number">5</span>)</span><br><span class="line"><span class="comment">#格式化字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d*%d=%2d&#x27;</span> %(<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>),end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></blockquote><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><blockquote><h6 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#平方</span></span><br><span class="line"><span class="number">2</span>**<span class="number">2</span></span><br></pre></td></tr></table></figure><h6 id="判断、循环"><a href="#判断、循环" class="headerlink" title="判断、循环"></a>判断、循环</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1小于2&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">1</span>==<span class="number">2</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1等于2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">Print(<span class="string">&#x27;芜湖!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    s+=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="comment">#等于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>):<span class="comment">#起始，结束(不包含结束)，间距</span></span><br><span class="line">    pring(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span><span class="comment">#跳过3</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span><span class="comment">#过8终结循环</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java list的学习</title>
    <link href="/2022/11/10/Java%20List%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/10/Java%20List%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h6 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h6><blockquote><p>ArrayList是List的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>上面一步我们创建了List对象list，但是list里面还是空，</p><p>不能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.set(<span class="number">0</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>，</p><p>，</p></blockquote><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><blockquote><p>.</p><p>提取TList列表中的a属性为一个list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; TList=t;</span><br><span class="line"><span class="comment">//提取TList列表中的a属性为一个list</span></span><br><span class="line">List&lt;Integer&gt; alist = TList.stream().map(T::geta).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>.</p><p>.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatisPlus queryWrapper</title>
    <link href="/2022/11/10/MyBatisPlus%20queryWrapper/"/>
    <url>/2022/11/10/MyBatisPlus%20queryWrapper/</url>
    
    <content type="html"><![CDATA[<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p><img src="/..%5Cpostot%5C22-11-10-1.png" alt="1665027727152"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库 myBatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-4（前后端交互）</title>
    <link href="/2022/10/08/Vue+SpringBoot-4(%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92)/"/>
    <url>/2022/10/08/Vue+SpringBoot-4(%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92)/</url>
    
    <content type="html"><![CDATA[<h5 id="前端引入ajax"><a href="#前端引入ajax" class="headerlink" title="前端引入ajax"></a>前端引入ajax</h5><blockquote><h6 id="1-下载ajax"><a href="#1-下载ajax" class="headerlink" title="1.下载ajax"></a>1.下载ajax</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br></pre></td></tr></table></figure><h6 id="2-在main-js文件中全局引入ajax"><a href="#2-在main-js文件中全局引入ajax" class="headerlink" title="2.在main.js文件中全局引入ajax"></a>2.在main.js文件中全局引入ajax</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入axios,并将axios赋值给Vue的prototype的自定义格式参数$axios,</span></span><br><span class="line"><span class="comment">// 这样可以防止在 xx.vue文件中调用axios出现 axios未定义错误,</span></span><br><span class="line"><span class="comment">// 调用方法是在&lt;script&gt;中的export default&#123;&#125;的creat()&#123;&#125;函数中使用this.$axios,</span></span><br><span class="line"><span class="comment">// 其原理就是全局变量</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> <span class="comment">// 从下载在项目中的axios引入,给当前main.js使用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios <span class="comment">//设置全局变量的格式( Vue.prototype.$自定义变量名 = 值)</span></span><br></pre></td></tr></table></figure><p>3.在vue组件中调用ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> _this = <span class="variable language_">this</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8081/afterend/test/queryAll&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span><br><span class="line">            <span class="comment">//在此不能直接用 this.test = resp.data，因为此处的this指的不是vue对象，而是回调</span></span><br><span class="line">                _this.<span class="property">test</span> = resp.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8081/afterend/test/queryById?id=20206107&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span><br><span class="line">    _this.<span class="property">test</span> = resp.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line"><span class="comment">//get方式传一个个参数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8081/afterend/test/addOne&#x27;</span>,_this.<span class="property">add1</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span><br><span class="line"><span class="comment">//pose方式传对象，直接写对象名</span></span><br><span class="line"><span class="comment">//get方式传对象，写&#123;t:对象&#125;（也尝试了不知道为什么成功不了）</span></span><br><span class="line">&#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><blockquote><h6 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h6><p>1.配置好application.yml文件中后端服务端口和数据库；</p><p>2.已经创建编写好crossDomain（跨域配置）、ResultEnum（前后端交互信息）、ResultVo（响应返回的数据实体）；后面两个可以省略，我后面示例用到了</p><p>3.完成数据库的连接，表的创建</p><p>4.完成dto-&gt;mapper-&gt;Service层的一个实例</p><p>（上面前提没有做好请参考上一篇文章Vue+SpringBoot-3（后端））</p><h6 id="在Controller创建testHandler类"><a href="#在Controller创建testHandler类" class="headerlink" title="在Controller创建testHandler类"></a>在Controller创建testHandler类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.afterend.Service.testServic;</span><br><span class="line"><span class="keyword">import</span> com.example.afterend.Vo.ResultVo;</span><br><span class="line"><span class="keyword">import</span> com.example.afterend.dto.test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span><span class="comment">//这是一个控制器</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span><span class="comment">//第一层地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    testServic testservic;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryAll&quot;)</span><span class="comment">//第二层地址</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">ConQueryAll</span><span class="params">()</span>&#123;</span><br><span class="line">        ResultVo resultVo=<span class="keyword">new</span> <span class="title class_">ResultVo</span>(<span class="number">2000</span>,<span class="string">&quot;查询成功&quot;</span>,testservic.queryAll());</span><br><span class="line">        <span class="keyword">return</span>  resultVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryById&quot;)</span><span class="comment">//第二层地址</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">ConQueryById</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        ResultVo resultVo=<span class="keyword">new</span> <span class="title class_">ResultVo</span>(<span class="number">2000</span>,<span class="string">&quot;查询成功&quot;</span>,testservic.queryById(id));</span><br><span class="line">        <span class="keyword">return</span>  resultVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/addOne&quot;,method = RequestMethod.POST)</span><span class="comment">//第二层地址，注意这里用的post方式传对象</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">ConQueryById</span><span class="params">(<span class="meta">@RequestBody</span> test t)</span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">        <span class="type">int</span> flag=testservic.addOne(t);</span><br><span class="line">        ResultVo resultVo=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag&gt;<span class="number">0</span>)</span><br><span class="line">            resultVo=<span class="keyword">new</span> <span class="title class_">ResultVo</span>(<span class="number">2000</span>,<span class="string">&quot;插入成功&quot;</span>,flag);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            resultVo=<span class="keyword">new</span> <span class="title class_">ResultVo</span>(<span class="number">5000</span>,<span class="string">&quot;插入失败&quot;</span>,flag);</span><br><span class="line">        <span class="keyword">return</span>  resultVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-3（后端）</title>
    <link href="/2022/10/06/Vue+SpringBoot-3%EF%BC%88%E5%90%8E%E7%AB%AF%EF%BC%89/"/>
    <url>/2022/10/06/Vue+SpringBoot-3%EF%BC%88%E5%90%8E%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><blockquote><h6 id="创建项目结构文件夹"><a href="#创建项目结构文件夹" class="headerlink" title="创建项目结构文件夹"></a>创建项目结构文件夹</h6><p>dto：实体类，与数据库表映射</p><p>utils：工具类，与数据库表映射</p><p>Vo：用于构建不同数据的综合实体类、前端交互的数据、配置数据等</p><p>Controller： 控制层，接收前端的数据 </p><p>constant： 配置与前端交互返回的数据提示和内容 </p><p>Service：处理接收到的数据，主要用做功能代码</p><p>Mapper：Service-&gt;mapper，实现数据库的增删改查</p><p>config： 配置跨域和redis配置 </p><p>XXXXXXApplication.java: 启动类 （创建项目时存在）</p><p><img src="/..%5Cpostot%5C22-10-06-1.png" alt="1665027727152"></p><h6 id="项目结构之间的关系"><a href="#项目结构之间的关系" class="headerlink" title="项目结构之间的关系"></a>项目结构之间的关系</h6><p>（我们从一次   ”前端请求-后端处理-响应”  来解释）</p><p>1.前端发送请求， controller接受请求接收附带的数据</p><p>2.controller传到service，在service编写功能，处理数据</p><p>3.再从service到mapper，mapper编写数据库增删改查功能</p><p>4.mapper的增删改查功能再通过resource文件夹下的mapper.xml,完成操作数据库的数据 </p><p>5.mapper.xml完成对数据库数据操作后再返回mapper层，返回service，返回controller，返回前端</p></blockquote><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><blockquote><h6 id="1-启动类配置-已经存在，不用管"><a href="#1-启动类配置-已经存在，不用管" class="headerlink" title="1.启动类配置(已经存在，不用管)"></a>1.启动类配置(已经存在，不用管)</h6><p> 想启动项目，必须要有一个入口文件 ，就是我们的XXXXXXApplicationTests（我这里是AfterEndApplicationTests创建项目时已经创建，不需要我们新建或者改写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterEndApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(AfterEndApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-跨域访问配置（这里我们不用redis，简化的配置）"><a href="#2-跨域访问配置（这里我们不用redis，简化的配置）" class="headerlink" title="2.跨域访问配置（这里我们不用redis，简化的配置）"></a>2.跨域访问配置（这里我们不用redis，简化的配置）</h6><p>为了可以接受到前端的数据请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.Config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 跨域访问配置</span></span><br><span class="line"><span class="comment">* 22-10-06</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类为配置类，用于取代bean.xml配置文件注册bean对象。</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//继承WebMvcConfigurer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">crossDomain</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>  &#123;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写父类方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//设置允许跨域</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//设置允许的方法</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-数据库配置"><a href="#3-数据库配置" class="headerlink" title="3.数据库配置"></a>3.数据库配置</h6><p> resources-&gt;application.properties改为application.yml</p><p>在application.yml 文件配置数据库和服务器的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#项目的路径，配置如下之后，路径为http:locahost:8080/afterend</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/afterend</span></span><br><span class="line">    <span class="comment">#数据库</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h6 id="4-数据交互配置（可以简化忽略）"><a href="#4-数据交互配置（可以简化忽略）" class="headerlink" title="4.数据交互配置（可以简化忽略）"></a>4.数据交互配置（可以简化忽略）</h6><p> 主要有两个文件，ResutEnum和ResutVo，用于与前端数据交互 </p><p>在constant文件夹创建ResultEnum类，定义前端请求后返回的代号和提示信息（其中OK和Error方法暂时注释，还没搞懂）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultEnum</span> &#123;</span><br><span class="line">    Integer code;</span><br><span class="line">    String message;</span><br><span class="line"><span class="comment">//    OK(2000,&quot;成功&quot;),</span></span><br><span class="line"><span class="comment">//    Error(5000,&quot;失败&quot;);</span></span><br><span class="line">    ResultEnum(Integer code, String message)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">        <span class="built_in">this</span>.message=message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Vo文件夹中创建ResultVo类，用于返回前端请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.Vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.afterend.constant.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultVo</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(ResultEnum resultEnum)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=resultEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message= resultEnum.getMessage();</span><br><span class="line">        data=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(ResultEnum resultEnum,T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=resultEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message= resultEnum.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(Integer code,String message,T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">        <span class="built_in">this</span>.message= message;</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h5 id="测试（测试后端通过mybatis-pulse操作数据库）"><a href="#测试（测试后端通过mybatis-pulse操作数据库）" class="headerlink" title="测试（测试后端通过mybatis-pulse操作数据库）"></a>测试（测试后端通过mybatis-pulse操作数据库）</h5><blockquote><p>前提：pom.xml依赖和application.yml数据库配置完成</p><h5 id="1-创建数据库表，插入适当数据"><a href="#1-创建数据库表，插入适当数据" class="headerlink" title="1.创建数据库表，插入适当数据"></a>1.创建数据库表，插入适当数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">USE airplane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line"> id <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">20206105</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">20206107</span>,<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="number">20206108</span>,<span class="string">&#x27;3&#x27;</span>);</span><br></pre></td></tr></table></figure><h6 id="2-dto层创建实体类test"><a href="#2-dto层创建实体类test" class="headerlink" title="2.dto层创建实体类test"></a>2.dto层创建实体类test</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span><span class="comment">//为类生成相对略微复杂的构建器 API（不太懂）</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;test&quot;)</span><span class="comment">//指定表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> Integer id;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-Mapper层创建继承接口testMapper"><a href="#3-Mapper层创建继承接口testMapper" class="headerlink" title="3.Mapper层创建继承接口testMapper"></a>3.Mapper层创建继承接口testMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.afterend.dto.test;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表明是一个mapper接口</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="comment">//引入test类</span></span><br><span class="line"><span class="comment">//Mapper 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">testMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;test&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="4-Service层创建testServic编写方法"><a href="#4-Service层创建testServic编写方法" class="headerlink" title="4.Service层创建testServic编写方法"></a>4.Service层创建testServic编写方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.afterend.Mapper.testMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.afterend.dto.test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testServic</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span><span class="comment">//通过依赖注入（DI），完成IOC容器中各个组件依赖的关系赋值</span></span><br><span class="line"> testMapper testmapper;</span><br><span class="line"> <span class="comment">//查询全部</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;test&gt; <span class="title function_">queryAll</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> testmapper.selectList(<span class="literal">null</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mybatis-pulse的其它数据库操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id查询</span></span><br><span class="line">    <span class="keyword">public</span> test <span class="title function_">queryById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testmapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//名字模糊查询</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;test&gt; <span class="title function_">queryByName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        testQueryWrapper.like(<span class="string">&quot;name&quot;</span>, name); <span class="comment">//参数为表中的列名，要查询的条件 相当于 WHERE name LIKE%name%</span></span><br><span class="line">        <span class="keyword">return</span> testmapper.selectList(testQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//名字精确查询(通过map)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;test&gt; <span class="title function_">queryByNameMap</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> testmapper.selectByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计数    (注：也可以和上面的一样加入各种条件)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> testmapper.selectCount(testQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过id删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testmapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过条件删除???</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBy</span><span class="params">(String column, Object val)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        testQueryWrapper.eq(column, val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> testmapper.delete(testQueryWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;影响行数：&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过条件删除(map)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        testmapper.deleteByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据条件更新???</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeBy</span><span class="params">(test t, String column, Object val)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;test&gt; testQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        testQueryWrapper.eq(column, val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> testmapper.update(t, testQueryWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;影响行数：&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过ID修改信息???</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeUserById</span><span class="params">(test t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> testmapper.updateById(t);</span><br><span class="line">        System.out.println(<span class="string">&quot;影响行数：&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一条数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addOne</span><span class="params">(test t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testmapper.insert(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加多条数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(List&lt;test&gt; ts)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (test t : ts) &#123;</span><br><span class="line">            addOne(t);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h6 id="5-test文件夹下创建测试类（测试操作是否成功，可以不测试）"><a href="#5-test文件夹下创建测试类（测试操作是否成功，可以不测试）" class="headerlink" title="5.test文件夹下创建测试类（测试操作是否成功，可以不测试）"></a>5.test文件夹下创建测试类（测试操作是否成功，可以不测试）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.afterend.test1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.afterend.Service.testServic;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span><span class="comment">//测试注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> testServic testservic;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quaeyAll</span><span class="params">()</span>&#123;</span><br><span class="line">     testservic.queryAll().forEach(System.out::println);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h6><p><img src="/..%5Cpostot%5C22-10-06-2.png" alt="1665027727152"></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-2（前端）</title>
    <link href="/2022/10/05/Vue+SpringBoot-2%EF%BC%88%E5%89%8D%E7%AB%AF%EF%BC%89/"/>
    <url>/2022/10/05/Vue+SpringBoot-2%EF%BC%88%E5%89%8D%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><blockquote><p>这里直接用csdn一位博主（积极向上的十六）的内容了</p><p><a href="https://blog.csdn.net/weixin_44872023/article/details/107114823?ops_request_misc=%7B%22request_id%22:%22166513639316782427470260%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166513639316782427470260&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-107114823-null-null.142%5Ev51%5Epc_rank_34_2,201%5Ev3%5Eadd_ask&utm_term=vue2">vue cli2 vuecli2目录结构</a></p><p><img src="/.%5Cpostot%5C22-10-05-1.png" alt="1665027727152"></p><h6 id="重点部分"><a href="#重点部分" class="headerlink" title="重点部分"></a>重点部分</h6><ol><li><p>index.html——[主页]<br>index.html如其他html一样，但一般只定义一个空的根节点，在main.js里面定义的实例将挂载在根节点下，内容都通过vue组件来填充</p></li><li><p>App.vue——[根组件]<br>一个vue页面通常由三部分组成:模板(template)、js(script)、样式(style)</p></li><li><p>main.js——[入口文件]<br>main.js主要是引入vue框架，根组件及路由设置，并且定义vue实例</p></li><li><p>router——[路由配置]<br>router文件夹下，有一个index.js，即为路由配置文件</p></li></ol><h6 id="其它细分的文件结构（简单的项目很少用到）"><a href="#其它细分的文件结构（简单的项目很少用到）" class="headerlink" title="其它细分的文件结构（简单的项目很少用到）"></a>其它细分的文件结构（简单的项目很少用到）</h6><p>build文件主要是webpack的配置，主要启动文件是dev-server.js，当我们输入npm run dev首先启动的就是dev-server.js，它会去检查<a href="https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020">node</a>及npm版本，加载配置文件，启动服务。 </p><p><img src="/.%5Cpostot%5C22-10-05-2.png" alt="1665027727152"></p><p>config文件主要是项目相关配置，我们常用的就是当端口冲突时配置监听端口，打包输出路径及命名等 </p><p><img src="/.%5Cpostot%5C22-10-05-3.png" alt="1665027727152"></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+SpringBoot-1（准备）</title>
    <link href="/2022/10/03/Vue+SpringBoot-1%EF%BC%88%E5%87%86%E5%A4%87%EF%BC%89/"/>
    <url>/2022/10/03/Vue+SpringBoot-1%EF%BC%88%E5%87%86%E5%A4%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><blockquote><h6 id="HBuilder-X写前端"><a href="#HBuilder-X写前端" class="headerlink" title="HBuilder X写前端:"></a>HBuilder X写前端:</h6><p>Veu2（2.6.10）</p><h6 id="IDEA写后端："><a href="#IDEA写后端：" class="headerlink" title="IDEA写后端："></a>IDEA写后端：</h6><p>JDK1.8；Java8</p><p>SpringBoot（2.7.4）</p><p>mybatisplus</p><h6 id="IDEA创建SpringBoot项目时添加依赖："><a href="#IDEA创建SpringBoot项目时添加依赖：" class="headerlink" title="IDEA创建SpringBoot项目时添加依赖："></a>IDEA创建SpringBoot项目时添加依赖：</h6><p>SpringWeb</p><p>JDBC API</p><p>MyBatis Framework</p><p>MySQL Driver</p><p>Thymeleaf</p></blockquote><h5 id="尝试运行创建的前端"><a href="#尝试运行创建的前端" class="headerlink" title="尝试运行创建的前端"></a>尝试运行创建的前端</h5><blockquote><h6 id="报错：（没记录到报错语句）"><a href="#报错：（没记录到报错语句）" class="headerlink" title="报错：（没记录到报错语句）"></a>报错：（没记录到报错语句）</h6><p>通过查询，node版本和Vue需要考虑兼容，通过将node替换为较为稳定的16.15.1版本解决了该报错，使初建前端项目可以直接运行</p><p>（推荐可以了解一下nvm，很方便的管理node版本和npm）</p></blockquote><h5 id="尝试运行创建的后端（报错，依赖没下载全面）"><a href="#尝试运行创建的后端（报错，依赖没下载全面）" class="headerlink" title="尝试运行创建的后端（报错，依赖没下载全面）"></a>尝试运行创建的后端（报错，依赖没下载全面）</h5><h5 id="Maven改阿里镜像-避免Maven有些包需要外网下载不了"><a href="#Maven改阿里镜像-避免Maven有些包需要外网下载不了" class="headerlink" title="Maven改阿里镜像(避免Maven有些包需要外网下载不了)"></a>Maven改阿里镜像(避免Maven有些包需要外网下载不了)</h5><blockquote><h6 id="1-下载Maven"><a href="#1-下载Maven" class="headerlink" title="1.下载Maven"></a>1.下载Maven</h6><p> Maven是一个项目管理工具，它包含了一个对象模型。一组标准集合集合，一个依赖管理系统。和用来运行定义在生命周期阶段中插件目标和逻辑。 核心功能Maven的核心功能是合理叙述项目间的依赖关系，通俗点就是通过pom.xml文件的配置获取jar包不用手动的去添加jar包。其本质就是通过配置pom.xml来获取jar包，当然这是在该项目必须是maven项目的前提下。 </p><p><a href="https://maven.apache.org/">Maven官网地址</a></p><p><img src="/..%5Cpostot%5C22-10-03-1.png" alt="1665027727152"></p><p><img src="/..%5Cpostot%5C22-10-03-2.png" alt="1665027727152"></p><h6 id="2-修改settings-xml文件"><a href="#2-修改settings-xml文件" class="headerlink" title="2.修改settings.xml文件"></a>2.修改settings.xml文件</h6><p>解压完成在Maven中找到：conf-&gt;<strong>settings.xml</strong><br>搜索&lt;<strong>mirrors</strong>节点，注释之前内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;maven-<span class="keyword">default</span>-http-blocker&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http:<span class="comment">//0.0.0.0/&lt;/url&gt;</span></span><br><span class="line">      &lt;blocked&gt;<span class="literal">true</span>&lt;/blocked&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>在该节点添加以下内容 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">   &lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h6 id="3-修改IDEA内设置"><a href="#3-修改IDEA内设置" class="headerlink" title="3.修改IDEA内设置"></a>3.修改IDEA内设置</h6><p> file-&gt;settings-&gt;Build…-&gt;Build Tools-&gt;Maven </p><p><img src="/..%5Cpostot%5C22-10-03-3.png" alt="1665027727152"></p></blockquote><h5 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h5><blockquote><p>pom.xml是配置maven配置的文件，下面是刚创建好项目时（注释自己添加的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"> &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"> &lt;parent&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line"> &lt;/parent&gt;</span><br><span class="line"> &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;afterEnd&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line"> &lt;name&gt;afterEnd&lt;/name&gt;</span><br><span class="line"> &lt;description&gt;afterEnd&lt;/description&gt;</span><br><span class="line"> &lt;properties&gt;</span><br><span class="line">     &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line"> &lt;/properties&gt;</span><br><span class="line"> &lt;dependencies&gt;</span><br><span class="line">&lt;!--        spring-boot--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">         &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">&lt;!--        mybatis--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">&lt;!--        mysql--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">         &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    打包配置--&gt;</span><br><span class="line"> &lt;build&gt;</span><br><span class="line">     &lt;plugins&gt;</span><br><span class="line">         &lt;plugin&gt;</span><br><span class="line">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">         &lt;/plugin&gt;</span><br><span class="line">     &lt;/plugins&gt;</span><br><span class="line"> &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h6 id="1-lombok依赖"><a href="#1-lombok依赖" class="headerlink" title="1.lombok依赖"></a>1.lombok依赖</h6><pre><code>    是一个在Java开发过程中用注解的方式，简化了 JavaBean 的编写，避免了冗余和样板式代码而出现的插件，让编写的类更加简洁 </code></pre><p>（1）Idea中File→Setting→Plugins中，下载lombok 插件</p><p>新版找不到lombok 插件可以参考下文解决</p><p><a href="https://blog.csdn.net/weixin_47381872/article/details/123036333?ops_request_misc=%7B%22request_id%22:%22166503957416782412513583%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166503957416782412513583&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_v39-2-123036333-null-null.142%5Ev51%5Epc_rank_34_2,201%5Ev3%5Eadd_ask&utm_term=idea%E6%90%9C%E4%B8%8D%E5%88%B0lombok%E6%8F%92%E4%BB%B6&spm=1018.2226.3001.4187"> 最新版IDEA Lombok插件安装</a> </p><p>（2）在工程的pom.xml文件中引入lombok依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在工程的pom.xml文件中引入lombok依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;1.18.8&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-mybatisplus依赖"><a href="#2-mybatisplus依赖" class="headerlink" title="2.mybatisplus依赖"></a>2.mybatisplus依赖</h6><p>mybatis-plus 是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生 。</p><p> 将springboot依赖中自带的mybatisplus依赖注释，加入mybatisplus依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--        mybatis--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2.2.2&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="3-测试单元依赖（根据需要添加）"><a href="#3-测试单元依赖（根据需要添加）" class="headerlink" title="3.测试单元依赖（根据需要添加）"></a>3.测试单元依赖（根据需要添加）</h6><p> 用于单元测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-处理excel数据</title>
    <link href="/2022/09/29/matlab%20%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/09/29/matlab%20%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h5 id="导入excel表格"><a href="#导入excel表格" class="headerlink" title="导入excel表格"></a>导入excel表格</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NUM,TXT,RAW]=xlsread(<span class="string">&#x27;相对路径或绝对路径\neam.xlsx&#x27;</span>,sheet_n);</span><br></pre></td></tr></table></figure><p>其中NUM为读取的数字；TXT为读取的文本；RAW为全部信息（未被处理未被处理的信息）</p><p>sheet_n可以为下面附表名称，也可以用1，2，3代表第几个附表</p><p>获得的NUM,TXT,RAW都是元胞数组，形式如下</p><p>[</p><p>{1} {‘aaa’} {‘aaaa’};</p><p>{2} {‘bbb’} {‘bbbb’}</p><p>]</p></blockquote><h5 id="对元胞数组的一些处理"><a href="#对元胞数组的一些处理" class="headerlink" title="对元胞数组的一些处理"></a>对元胞数组的一些处理</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rn1_2=<span class="built_in">size</span>(RAW1_2,<span class="number">1</span>);<span class="comment">%获取行数</span></span><br><span class="line">Rm1_2=<span class="built_in">size</span>(RAW1_2,<span class="number">2</span>);<span class="comment">%获取列数</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RAW&#123;<span class="built_in">i</span>,<span class="built_in">j</span>&#125;<span class="comment">%取元胞数组RAW第i行第j列的元胞内容</span></span><br><span class="line">RAW(<span class="built_in">i</span>,<span class="built_in">j</span>)<span class="comment">%取元胞数组RAW第i行第j列的元胞</span></span><br><span class="line">RAW(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">5</span>))<span class="comment">%取元胞数组RAW第i行1~5列的元胞</span></span><br></pre></td></tr></table></figure><p>例如：对于元胞数组</p><p>[</p><p>{1} {‘aaa’} {‘aaaa’};</p><p>{2} {‘bbb’} {‘bbbb’}</p><p>]</p><p>RAW{2,2}&#x3D;》bbb</p><p>RAW(2,2)&#x3D;》{‘bbb’}</p><p>RAW(1,1:3))&#x3D;》{1} {‘aaa’} {‘aaaa’}&lt;—注意这里是多个数据，不能直接赋值给变量或数组</p></blockquote><h5 id="构造元胞数组的一些技巧"><a href="#构造元胞数组的一些技巧" class="headerlink" title="构造元胞数组的一些技巧"></a>构造元胞数组的一些技巧</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chem1=<span class="built_in">cat</span>(<span class="number">2</span>,RAW(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">5</span>));<span class="comment">%取RAW元胞数组第i行的1~5列的五个元胞数据，组成行元胞数组；2代表行，1代表列</span></span><br><span class="line">chem2=<span class="built_in">cat</span>(<span class="number">2</span>,RAW(<span class="built_in">i</span>,<span class="number">1</span>:Rm));</span><br><span class="line">chem=[chem,chem1,chem2];<span class="comment">%数组的串联</span></span><br><span class="line">data=[data;chem];<span class="comment">%数组的并联</span></span><br></pre></td></tr></table></figure><p>cat(1,5 8 ‘a’ 10 ‘b’)</p><p>将多个数据组成得到一个列数组：</p><p>[5;</p><p>8;</p><p>‘a’;</p><p>10;</p><p>‘b’;</p><p>]</p><p>1</p></blockquote><h5 id="写入excel表格"><a href="#写入excel表格" class="headerlink" title="写入excel表格"></a>写入excel表格</h5><blockquote>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xlswrite(<span class="string">&#x27;excel名称.xlsx&#x27;</span>, tiltle, <span class="string">&#x27;Sheet4&#x27;</span>);</span><br><span class="line">xlswrite(<span class="string">&#x27;excel名称.xlsx&#x27;</span>, data, <span class="string">&#x27;Sheet4&#x27;</span>,<span class="string">&#x27;A2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>一般分别写入表头和表内数据</p><p>tiltle为表头（1*m的元胞数组）</p><p>data为表内数据（n*m的元胞数组）</p><p>sheet4表示写在sheet4附表内；A2表示从A2单元格开始写入</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-处理excel数据</title>
    <link href="/2022/09/29/matlab-2-%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/09/29/matlab-2-%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h5 id="导入excel表格"><a href="#导入excel表格" class="headerlink" title="导入excel表格"></a>导入excel表格</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NUM,TXT,RAW]=xlsread(<span class="string">&#x27;相对路径或绝对路径\neam.xlsx&#x27;</span>,sheet_n);</span><br></pre></td></tr></table></figure><p>其中NUM为读取的数字；TXT为读取的文本；RAW为全部信息（未被处理未被处理的信息）</p><p>sheet_n可以为下面附表名称，也可以用1，2，3代表第几个附表</p><p>获得的NUM,TXT,RAW都是元胞数组，形式如下</p><p>[</p><p>{1} {‘aaa’} {‘aaaa’};</p><p>{2} {‘bbb’} {‘bbbb’}</p><p>]</p></blockquote><h5 id="对元胞数组的一些处理"><a href="#对元胞数组的一些处理" class="headerlink" title="对元胞数组的一些处理"></a>对元胞数组的一些处理</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rn1_2=<span class="built_in">size</span>(RAW1_2,<span class="number">1</span>);<span class="comment">%获取行数</span></span><br><span class="line">Rm1_2=<span class="built_in">size</span>(RAW1_2,<span class="number">2</span>);<span class="comment">%获取列数</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RAW&#123;<span class="built_in">i</span>,<span class="built_in">j</span>&#125;<span class="comment">%取元胞数组RAW第i行第j列的元胞内容</span></span><br><span class="line">RAW(<span class="built_in">i</span>,<span class="built_in">j</span>)<span class="comment">%取元胞数组RAW第i行第j列的元胞</span></span><br><span class="line">RAW(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">5</span>))<span class="comment">%取元胞数组RAW第i行1~5列的元胞</span></span><br></pre></td></tr></table></figure><p>例如：对于元胞数组</p><p>[</p><p>{1} {‘aaa’} {‘aaaa’};</p><p>{2} {‘bbb’} {‘bbbb’}</p><p>]</p><p>RAW{2,2}&#x3D;》bbb</p><p>RAW(2,2)&#x3D;》{‘bbb’}</p><p>RAW(1,1:3))&#x3D;》{1} {‘aaa’} {‘aaaa’}&lt;—注意这里是多个数据，不能直接赋值给变量或数组</p></blockquote><h5 id="构造元胞数组的一些技巧"><a href="#构造元胞数组的一些技巧" class="headerlink" title="构造元胞数组的一些技巧"></a>构造元胞数组的一些技巧</h5><blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chem1=<span class="built_in">cat</span>(<span class="number">2</span>,RAW(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">5</span>));<span class="comment">%取RAW元胞数组第i行的1~5列的五个元胞数据，组成行元胞数组；2代表行，1代表列</span></span><br><span class="line">chem2=<span class="built_in">cat</span>(<span class="number">2</span>,RAW(<span class="built_in">i</span>,<span class="number">1</span>:Rm));</span><br><span class="line">chem=[chem,chem1,chem2];<span class="comment">%数组的串联</span></span><br><span class="line">data=[data;chem];<span class="comment">%数组的并联</span></span><br></pre></td></tr></table></figure><p>cat(1,5 8 ‘a’ 10 ‘b’)</p><p>将多个数据组成得到一个列数组：</p><p>[5;</p><p>8;</p><p>‘a’;</p><p>10;</p><p>‘b’;</p><p>]</p><p>1</p></blockquote><h5 id="写入excel表格"><a href="#写入excel表格" class="headerlink" title="写入excel表格"></a>写入excel表格</h5><blockquote>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xlswrite(<span class="string">&#x27;excel名称.xlsx&#x27;</span>, tiltle, <span class="string">&#x27;Sheet4&#x27;</span>);</span><br><span class="line">xlswrite(<span class="string">&#x27;excel名称.xlsx&#x27;</span>, data, <span class="string">&#x27;Sheet4&#x27;</span>,<span class="string">&#x27;A2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>一般分别写入表头和表内数据</p><p>tiltle为表头（1*m的元胞数组）</p><p>data为表内数据（n*m的元胞数组）</p><p>sheet4表示写在sheet4附表内；A2表示从A2单元格开始写入</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-线性规划</title>
    <link href="/2022/09/28/matlab%20%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
    <url>/2022/09/28/matlab%20%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h4 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h4><p>注意需要化为公式的标准格式（目标函数最小值、表达式约束&lt;形式等，详情见下）</p><h5 id="一、线性规划公式：linprog-f-a-b-aeq-beq-lb-ub"><a href="#一、线性规划公式：linprog-f-a-b-aeq-beq-lb-ub" class="headerlink" title="一、线性规划公式：linprog(f,a,b,aeq,beq,lb,ub)"></a>一、线性规划公式：linprog(f,a,b,aeq,beq,lb,ub)</h5><blockquote><p>f为目标函数系数（注意是最小值，求最大则在下面函数的f前和最终输出结果前加一个负号）<br>a为约束不等式未知数的系数，多个不等式用封号隔开（注意是系数1<em>未知数1+…&lt;&#x3D;常数，&gt;&#x3D;的需要两边添加负号变换过来）<br>b为约束不等式另一边的常数，多个不等式用封号隔开<br>aeq和beq分别是约束等式的系数和常数，没有就用[]代替，不能省略<br>zeros(6,1)产生6</em>1的0矩阵，lb用于约束未知数的最小值，下面例子中表示所有未知数大于0<br>ub约束未知数最大值，没有则用[]代替，可以省略</p><p>例1：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">0.4</span>,<span class="number">0.28</span>,<span class="number">0.32</span>,<span class="number">0.72</span>,<span class="number">0.64</span>,<span class="number">0.6</span>];</span><br><span class="line">a=[<span class="number">0.01</span>,<span class="number">0.01</span>,<span class="number">0.01</span>,<span class="number">0.03</span>,<span class="number">0.03</span>,<span class="number">0.03</span>;</span><br><span class="line">    <span class="number">0.02</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.05</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,<span class="number">0.02</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.05</span>,<span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0.03</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.08</span>];</span><br><span class="line">b=[<span class="number">850</span>,<span class="number">700</span>,<span class="number">100</span>,<span class="number">900</span>];</span><br><span class="line">aeq=[];</span><br><span class="line">beq=[];</span><br><span class="line">[x,y]=linprog(-f,a,b,aeq,beq,<span class="built_in">zeros</span>(<span class="number">6</span>,<span class="number">1</span>),[]) fprintf(<span class="string">&#x27;x1=%.2f,x2=%.2f,x3=%.2f,x4=%.2f,x5=%.2f,x6=%.2f,\nz=%.2f\n&#x27;</span>,x,-y);</span><br></pre></td></tr></table></figure></blockquote><h5 id="二、整数或0-1规划公式：intlinprog-f-ic，a-b-aeq-beq-lb-ub"><a href="#二、整数或0-1规划公式：intlinprog-f-ic，a-b-aeq-beq-lb-ub" class="headerlink" title="二、整数或0-1规划公式：intlinprog(f,ic，a,b,aeq,beq,lb,ub);"></a>二、整数或0-1规划公式：intlinprog(f,ic，a,b,aeq,beq,lb,ub);</h5><blockquote><p>其他同线性规划公式，多出一个变量ic既intcon<br>intcon意义为整数约束变量的位置。例x1和x2都要是整数，ic值为[1,2]<br>这个位置是按照目标函数和约束条件中变量位置来排列的。如果仅有x2为整数约束，那么ic的值为2<br> 0-1规划只要在整数规划的基础上约束未知数上限为1既可</p><p>例2：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>];</span><br><span class="line">ic=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">     <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>;</span><br><span class="line">     <span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>];</span><br><span class="line"> b=[<span class="number">8</span>;<span class="number">7</span>;<span class="number">9</span>;<span class="number">6</span>;<span class="number">6</span>;<span class="number">4</span>;<span class="number">8</span>;<span class="number">40</span>;<span class="number">40</span>;<span class="number">10.2</span>;<span class="number">10.2</span>;<span class="number">3.027</span>;<span class="number">3.027</span>];</span><br><span class="line"> aeq=[];</span><br><span class="line"> beq=[];</span><br><span class="line"> [x,y]=intlinprog(-f,ic,a,b,aeq,beq,<span class="built_in">zeros</span>(<span class="number">14</span>,<span class="number">1</span>),[]);</span><br><span class="line"> fprintf(<span class="string">&#x27;x11=%d,x12=%d,x13=%d,x14=%d,x15=%d,x16=%d,x17=%d,x21=%.2f,x22=%.2f,x23=%.2f,x24=%.2f,x25=%.2f,x26=%.2f,x27=%.2f\n\nz:%.2f\n&#x27;</span>,x,-y);</span><br></pre></td></tr></table></figure><p>例3：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">ic=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">b=[<span class="number">20</span>;<span class="number">-5</span>];</span><br><span class="line">aeq=[];</span><br><span class="line">beq=[];</span><br><span class="line">[x,y]=intlinprog(-f,ic,a,b,aeq,beq,<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">1</span>),[]);</span><br><span class="line">fprintf(<span class="string">&#x27;x1=%.0f,x2=%.0f,x3=%.0f\nz=%.0f\n&#x27;</span>,x,-y);</span><br></pre></td></tr></table></figure><p> 注：该例解为4，2，0或5，0，1，看到最前面，该公式求解线性规划得到一个解既停，如果有多个最优解则会遗漏！</p></blockquote><h5 id="三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文"><a href="#三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文" class="headerlink" title="三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文"></a>三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文</h5>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-线性规划</title>
    <link href="/2022/09/28/matlab-3-%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
    <url>/2022/09/28/matlab-3-%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h4 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h4><p>注意需要化为公式的标准格式（目标函数最小值、表达式约束&lt;形式等，详情见下）</p><h5 id="一、线性规划公式：linprog-f-a-b-aeq-beq-lb-ub"><a href="#一、线性规划公式：linprog-f-a-b-aeq-beq-lb-ub" class="headerlink" title="一、线性规划公式：linprog(f,a,b,aeq,beq,lb,ub)"></a>一、线性规划公式：linprog(f,a,b,aeq,beq,lb,ub)</h5><blockquote><p>f为目标函数系数（注意是最小值，求最大则在下面函数的f前和最终输出结果前加一个负号）<br>a为约束不等式未知数的系数，多个不等式用封号隔开（注意是系数1<em>未知数1+…&lt;&#x3D;常数，&gt;&#x3D;的需要两边添加负号变换过来）<br>b为约束不等式另一边的常数，多个不等式用封号隔开<br>aeq和beq分别是约束等式的系数和常数，没有就用[]代替，不能省略<br>zeros(6,1)产生6</em>1的0矩阵，lb用于约束未知数的最小值，下面例子中表示所有未知数大于0<br>ub约束未知数最大值，没有则用[]代替，可以省略</p><p>例1：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">0.4</span>,<span class="number">0.28</span>,<span class="number">0.32</span>,<span class="number">0.72</span>,<span class="number">0.64</span>,<span class="number">0.6</span>];</span><br><span class="line">a=[<span class="number">0.01</span>,<span class="number">0.01</span>,<span class="number">0.01</span>,<span class="number">0.03</span>,<span class="number">0.03</span>,<span class="number">0.03</span>;</span><br><span class="line">    <span class="number">0.02</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.05</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,<span class="number">0.02</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.05</span>,<span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0.03</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.08</span>];</span><br><span class="line">b=[<span class="number">850</span>,<span class="number">700</span>,<span class="number">100</span>,<span class="number">900</span>];</span><br><span class="line">aeq=[];</span><br><span class="line">beq=[];</span><br><span class="line">[x,y]=linprog(-f,a,b,aeq,beq,<span class="built_in">zeros</span>(<span class="number">6</span>,<span class="number">1</span>),[]) fprintf(<span class="string">&#x27;x1=%.2f,x2=%.2f,x3=%.2f,x4=%.2f,x5=%.2f,x6=%.2f,\nz=%.2f\n&#x27;</span>,x,-y);</span><br></pre></td></tr></table></figure></blockquote><h5 id="二、整数或0-1规划公式：intlinprog-f-ic，a-b-aeq-beq-lb-ub"><a href="#二、整数或0-1规划公式：intlinprog-f-ic，a-b-aeq-beq-lb-ub" class="headerlink" title="二、整数或0-1规划公式：intlinprog(f,ic，a,b,aeq,beq,lb,ub);"></a>二、整数或0-1规划公式：intlinprog(f,ic，a,b,aeq,beq,lb,ub);</h5><blockquote><p>其他同线性规划公式，多出一个变量ic既intcon<br>intcon意义为整数约束变量的位置。例x1和x2都要是整数，ic值为[1,2]<br>这个位置是按照目标函数和约束条件中变量位置来排列的。如果仅有x2为整数约束，那么ic的值为2<br> 0-1规划只要在整数规划的基础上约束未知数上限为1既可</p><p>例2：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>];</span><br><span class="line">ic=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">     <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>;</span><br><span class="line">     <span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.613</span>,<span class="number">0.72</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">487</span>,<span class="number">0.52</span>,<span class="number">0.64</span>];</span><br><span class="line"> b=[<span class="number">8</span>;<span class="number">7</span>;<span class="number">9</span>;<span class="number">6</span>;<span class="number">6</span>;<span class="number">4</span>;<span class="number">8</span>;<span class="number">40</span>;<span class="number">40</span>;<span class="number">10.2</span>;<span class="number">10.2</span>;<span class="number">3.027</span>;<span class="number">3.027</span>];</span><br><span class="line"> aeq=[];</span><br><span class="line"> beq=[];</span><br><span class="line"> [x,y]=intlinprog(-f,ic,a,b,aeq,beq,<span class="built_in">zeros</span>(<span class="number">14</span>,<span class="number">1</span>),[]);</span><br><span class="line"> fprintf(<span class="string">&#x27;x11=%d,x12=%d,x13=%d,x14=%d,x15=%d,x16=%d,x17=%d,x21=%.2f,x22=%.2f,x23=%.2f,x24=%.2f,x25=%.2f,x26=%.2f,x27=%.2f\n\nz:%.2f\n&#x27;</span>,x,-y);</span><br></pre></td></tr></table></figure><p>例3：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">ic=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">b=[<span class="number">20</span>;<span class="number">-5</span>];</span><br><span class="line">aeq=[];</span><br><span class="line">beq=[];</span><br><span class="line">[x,y]=intlinprog(-f,ic,a,b,aeq,beq,<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">1</span>),[]);</span><br><span class="line">fprintf(<span class="string">&#x27;x1=%.0f,x2=%.0f,x3=%.0f\nz=%.0f\n&#x27;</span>,x,-y);</span><br></pre></td></tr></table></figure><p> 注：该例解为4，2，0或5，0，1，看到最前面，该公式求解线性规划得到一个解既停，如果有多个最优解则会遗漏！</p></blockquote><h5 id="三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文"><a href="#三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文" class="headerlink" title="三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文"></a>三、多目标线性规划，非线性规划等，见网上资料，如CSDN搜索或查找论文</h5>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-基础</title>
    <link href="/2022/09/27/matlab%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/27/matlab%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h5 id="matlab-语法"><a href="#matlab-语法" class="headerlink" title="matlab 语法"></a>matlab 语法</h5><blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab-基础</title>
    <link href="/2022/09/27/matlab-1-%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/27/matlab-1-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h5 id="matlab-语法"><a href="#matlab-语法" class="headerlink" title="matlab 语法"></a>matlab 语法</h5><blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md基本语法</title>
    <link href="/2022/09/26/md%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/09/26/md%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h5 id="标题-一级标题-二级标题"><a href="#标题-一级标题-二级标题" class="headerlink" title="标题# 一级标题## 二级标题"></a>标题# 一级标题## 二级标题</h5><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h5 id="无序列表-a-a-a（可嵌套）"><a href="#无序列表-a-a-a（可嵌套）" class="headerlink" title="无序列表+ a- a* a（可嵌套）"></a>无序列表+ a- a* a（可嵌套）</h5><blockquote><ul><li><p>a</p><ul><li>b<ul><li>c</li></ul></li></ul></li><li><p>aa</p></li><li><p>aaa</p></li></ul></blockquote><h5 id="有序列表2-a（可嵌套）"><a href="#有序列表2-a（可嵌套）" class="headerlink" title="有序列表2. a（可嵌套）"></a>有序列表2. a（可嵌套）</h5><blockquote><ol start="2"><li>a</li><li>b</li><li>g</li></ol></blockquote><h5 id="区块-gt-一层区块（可嵌套）"><a href="#区块-gt-一层区块（可嵌套）" class="headerlink" title="区块&gt; 一层区块（可嵌套）"></a>区块&gt; 一层区块（可嵌套）</h5><blockquote><p>一层区块</p><blockquote><p>二层区块</p><blockquote><p>三层区块</p><p>……</p><p>（可以嵌套到六层）</p></blockquote></blockquote></blockquote><h5 id="代码块-单行代码-多行代码"><a href="#代码块-单行代码-多行代码" class="headerlink" title="代码块` 单行代码 ```` 多行代码 ```"></a>代码块` 单行代码 ```` 多行代码 ```</h5><blockquote><h6 id="单行代码块用‘"><a href="#单行代码块用‘" class="headerlink" title="单行代码块用‘"></a>单行代码块用‘</h6><p><code> int a =0;</code></p><h6 id="多行代码用-96-96-96"><a href="#多行代码用-96-96-96" class="headerlink" title="多行代码用&#96;&#96;&#96;"></a>多行代码用&#96;&#96;&#96;</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c=c;</span><br></pre></td></tr></table></figure></blockquote><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><blockquote><h6 id="行内式-文字-链接-quot-标题-quot"><a href="#行内式-文字-链接-quot-标题-quot" class="headerlink" title="行内式[文字](链接 &quot;标题&quot; )"></a>行内式[文字](链接 &quot;标题&quot; )</h6><p><a href="https://bumingsuooyi.github.io/" title="欢迎来到我的博客">博客</a></p><h6 id="参数式-文字-…-quot-标题-quot"><a href="#参数式-文字-…-quot-标题-quot" class="headerlink" title="参数式[文字]: …. &quot;标题&quot;"></a>参数式[文字]: …. &quot;标题&quot;</h6></blockquote><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><blockquote><h6 id="行内式-图片名称-链接-quot-quot"><a href="#行内式-图片名称-链接-quot-quot" class="headerlink" title="行内式![图片名称](链接 &quot;&quot;)"></a>行内式![图片名称](链接 &quot;&quot;)</h6><p><img src="https://img-home.csdnimg.cn/images/20201124032511.png" alt="图片名字" title="标题:CSDN"></p><p>参数式[图片名称]:链接 &quot;标题&quot;</p></blockquote><h5 id="分割线—-——"><a href="#分割线—-——" class="headerlink" title="分割线—- - - ——**** * *******____ _ _______"></a>分割线—- - - ——**** * *******____ _ _______</h5><blockquote><h6 id="—"><a href="#—" class="headerlink" title="(—)"></a>(—)</h6><hr><h6 id=""><a href="#" class="headerlink" title="(- - -)"></a>(- - -)</h6><hr><h6 id="——"><a href="#——" class="headerlink" title="(——)"></a>(——)</h6><hr></blockquote><h5 id="表格-123-234-345"><a href="#表格-123-234-345" class="headerlink" title="表格(|123|234|345|)"></a>表格(|123|234|345|)</h5><blockquote><p>&#x2F;&#x2F;例子一</p><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">&#x2F;&#x2F;例子二</td><td align="center"></td><td align="right"></td></tr><tr><td align="left">123</td><td align="center">234</td><td align="right">345</td></tr><tr><td align="left">:—</td><td align="center">:–:</td><td align="right">—:</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table></blockquote><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><blockquote><h6 id="强调字体（-1-、-2-）-1-、-2"><a href="#强调字体（-1-、-2-）-1-、-2" class="headerlink" title="强调字体（*1*、**2**）(_1_、__2__)"></a>强调字体（*1*、**2**）(_1_、__2__)</h6><p><em>被强调1</em></p><p><strong>被强调2</strong></p><p><em>被强调1</em></p><p><strong>被强调2</strong></p><h6 id="删除线（-删除-）"><a href="#删除线（-删除-）" class="headerlink" title="删除线（~~删除~~）"></a>删除线（~~删除~~）</h6><p><del>删除</del></p><h6 id="转义（-加-96-）"><a href="#转义（-加-96-）" class="headerlink" title="转义（\加*+-&#96;_）"></a>转义（\加*+-&#96;_）</h6><p>(\\)</p><p>\</p><p>(\*)</p><ul><li></li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2022/09/09/My-New-Post/"/>
    <url>/2022/09/09/My-New-Post/</url>
    
    <content type="html"><![CDATA[<p>123456</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/01/hello-world/"/>
    <url>/2022/09/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
